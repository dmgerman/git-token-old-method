begin_unit
begin_comment
comment|/*  * Copyright (c) 2011, Google Inc.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CONVERT_H
end_ifndef
begin_define
DECL|macro|CONVERT_H
define|#
directive|define
name|CONVERT_H
end_define
begin_enum
DECL|enum|safe_crlf
enum|enum
name|safe_crlf
block|{
DECL|enumerator|SAFE_CRLF_FALSE
name|SAFE_CRLF_FALSE
init|=
literal|0
block|,
DECL|enumerator|SAFE_CRLF_FAIL
name|SAFE_CRLF_FAIL
init|=
literal|1
block|,
DECL|enumerator|SAFE_CRLF_WARN
name|SAFE_CRLF_WARN
init|=
literal|2
block|}
enum|;
end_enum
begin_decl_stmt
specifier|extern
name|enum
name|safe_crlf
name|safe_crlf
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|auto_crlf
enum|enum
name|auto_crlf
block|{
DECL|enumerator|AUTO_CRLF_FALSE
name|AUTO_CRLF_FALSE
init|=
literal|0
block|,
DECL|enumerator|AUTO_CRLF_TRUE
name|AUTO_CRLF_TRUE
init|=
literal|1
block|,
DECL|enumerator|AUTO_CRLF_INPUT
name|AUTO_CRLF_INPUT
init|=
operator|-
literal|1
block|}
enum|;
end_enum
begin_decl_stmt
specifier|extern
name|enum
name|auto_crlf
name|auto_crlf
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|eol
enum|enum
name|eol
block|{
DECL|enumerator|EOL_UNSET
name|EOL_UNSET
block|,
DECL|enumerator|EOL_CRLF
name|EOL_CRLF
block|,
DECL|enumerator|EOL_LF
name|EOL_LF
block|,
ifdef|#
directive|ifdef
name|NATIVE_CRLF
DECL|enumerator|EOL_NATIVE
name|EOL_NATIVE
init|=
name|EOL_CRLF
else|#
directive|else
name|EOL_NATIVE
operator|=
name|EOL_LF
endif|#
directive|endif
block|}
enum|;
end_enum
begin_decl_stmt
specifier|extern
name|enum
name|eol
name|core_eol
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* returns 1 if *dst was used */
end_comment
begin_function_decl
specifier|extern
name|int
name|convert_to_git
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|size_t
name|len
parameter_list|,
name|struct
name|strbuf
modifier|*
name|dst
parameter_list|,
name|enum
name|safe_crlf
name|checksafe
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|convert_to_working_tree
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|size_t
name|len
parameter_list|,
name|struct
name|strbuf
modifier|*
name|dst
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|renormalize_buffer
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|size_t
name|len
parameter_list|,
name|struct
name|strbuf
modifier|*
name|dst
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|would_convert_to_git
specifier|static
specifier|inline
name|int
name|would_convert_to_git
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|size_t
name|len
parameter_list|,
name|enum
name|safe_crlf
name|checksafe
parameter_list|)
block|{
return|return
name|convert_to_git
argument_list|(
name|path
argument_list|,
name|src
argument_list|,
name|len
argument_list|,
name|NULL
argument_list|,
name|checksafe
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*****************************************************************  *  * Streaming converison support  *  *****************************************************************/
end_comment
begin_struct_decl
struct_decl|struct
name|stream_filter
struct_decl|;
end_struct_decl
begin_comment
comment|/* opaque */
end_comment
begin_function_decl
specifier|extern
name|struct
name|stream_filter
modifier|*
name|get_stream_filter
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|free_stream_filter
parameter_list|(
name|struct
name|stream_filter
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|is_null_stream_filter
parameter_list|(
name|struct
name|stream_filter
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Use as much input up to *isize_p and fill output up to *osize_p;  * update isize_p and osize_p to indicate how much buffer space was  * consumed and filled. Return 0 on success, non-zero on error.  *  * Some filters may need to buffer the input and look-ahead inside it  * to decide what to output, and they may consume more than zero bytes  * of input and still not produce any output. After feeding all the  * input, pass NULL as input and keep calling this function, to let  * such filters know there is no more input coming and it is time for  * them to produce the remaining output based on the buffered input.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|stream_filter
parameter_list|(
name|struct
name|stream_filter
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|input
parameter_list|,
name|size_t
modifier|*
name|isize_p
parameter_list|,
name|char
modifier|*
name|output
parameter_list|,
name|size_t
modifier|*
name|osize_p
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* CONVERT_H */
end_comment
end_unit
