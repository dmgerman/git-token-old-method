begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|REVISION_H
end_ifndef
begin_define
DECL|macro|REVISION_H
define|#
directive|define
name|REVISION_H
end_define
begin_comment
comment|/*  * The low 16 bits of the "flags" field shows whether  * a commit is part of the path to the root for that  * parent.  *  * Bit 16 is an internal flag that we've seen the  * definition for this rev, and not just seen it as  * a parent target.  */
end_comment
begin_define
DECL|macro|marked
define|#
directive|define
name|marked
parameter_list|(
name|rev
parameter_list|)
value|((rev)->flags& 0xffff)
end_define
begin_define
DECL|macro|SEEN
define|#
directive|define
name|SEEN
value|0x10000
end_define
begin_define
DECL|macro|USED
define|#
directive|define
name|USED
value|0x20000
end_define
begin_define
DECL|macro|REACHABLE
define|#
directive|define
name|REACHABLE
value|0x40000
end_define
begin_struct
DECL|struct|parent
struct|struct
name|parent
block|{
DECL|member|parent
name|struct
name|revision
modifier|*
name|parent
decl_stmt|;
DECL|member|next
name|struct
name|parent
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|revision
struct|struct
name|revision
block|{
DECL|member|flags
name|unsigned
name|int
name|flags
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|date
name|unsigned
name|long
name|date
decl_stmt|;
DECL|member|parent
name|struct
name|parent
modifier|*
name|parent
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|revs
specifier|static
name|struct
name|revision
modifier|*
modifier|*
name|revs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|nr_revs
DECL|variable|rev_allocs
specifier|static
name|int
name|nr_revs
decl_stmt|,
name|rev_allocs
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|find_rev
specifier|static
name|int
name|find_rev
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
name|int
name|first
init|=
literal|0
decl_stmt|,
name|last
init|=
name|nr_revs
decl_stmt|;
while|while
condition|(
name|first
operator|<
name|last
condition|)
block|{
name|int
name|next
init|=
operator|(
name|first
operator|+
name|last
operator|)
operator|/
literal|2
decl_stmt|;
name|struct
name|revision
modifier|*
name|rev
init|=
name|revs
index|[
name|next
index|]
decl_stmt|;
name|int
name|cmp
decl_stmt|;
name|cmp
operator|=
name|memcmp
argument_list|(
name|sha1
argument_list|,
name|rev
operator|->
name|sha1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cmp
condition|)
return|return
name|next
return|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|last
operator|=
name|next
expr_stmt|;
continue|continue;
block|}
name|first
operator|=
name|next
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|-
name|first
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|lookup_rev
specifier|static
name|struct
name|revision
modifier|*
name|lookup_rev
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
name|int
name|pos
init|=
name|find_rev
argument_list|(
name|sha1
argument_list|)
decl_stmt|;
name|struct
name|revision
modifier|*
name|n
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
return|return
name|revs
index|[
name|pos
index|]
return|;
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|rev_allocs
operator|==
name|nr_revs
condition|)
block|{
name|rev_allocs
operator|=
name|alloc_nr
argument_list|(
name|rev_allocs
argument_list|)
expr_stmt|;
name|revs
operator|=
name|realloc
argument_list|(
name|revs
argument_list|,
name|rev_allocs
operator|*
sizeof|sizeof
argument_list|(
expr|struct
name|revision
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|n
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|revision
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|->
name|flags
operator|=
literal|0
expr_stmt|;
name|memcpy
argument_list|(
name|n
operator|->
name|sha1
argument_list|,
name|sha1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|n
operator|->
name|parent
operator|=
name|NULL
expr_stmt|;
comment|/* Insert it into the right place */
name|memmove
argument_list|(
name|revs
operator|+
name|pos
operator|+
literal|1
argument_list|,
name|revs
operator|+
name|pos
argument_list|,
operator|(
name|nr_revs
operator|-
name|pos
operator|)
operator|*
sizeof|sizeof
argument_list|(
expr|struct
name|revision
operator|*
argument_list|)
argument_list|)
expr_stmt|;
name|revs
index|[
name|pos
index|]
operator|=
name|n
expr_stmt|;
name|nr_revs
operator|++
expr_stmt|;
return|return
name|n
return|;
block|}
end_function
begin_function
DECL|function|add_relationship
specifier|static
name|struct
name|revision
modifier|*
name|add_relationship
parameter_list|(
name|struct
name|revision
modifier|*
name|rev
parameter_list|,
name|unsigned
name|char
modifier|*
name|needs
parameter_list|)
block|{
name|struct
name|revision
modifier|*
name|parent_rev
init|=
name|lookup_rev
argument_list|(
name|needs
argument_list|)
decl_stmt|;
name|struct
name|parent
modifier|*
modifier|*
name|pp
init|=
operator|&
name|rev
operator|->
name|parent
decl_stmt|,
modifier|*
name|p
decl_stmt|;
while|while
condition|(
operator|(
name|p
operator|=
operator|*
name|pp
operator|)
operator|!=
name|NULL
condition|)
block|{
if|if
condition|(
name|p
operator|->
name|parent
operator|==
name|parent_rev
condition|)
return|return
name|parent_rev
return|;
name|pp
operator|=
operator|&
name|p
operator|->
name|next
expr_stmt|;
block|}
name|p
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|->
name|parent
operator|=
name|parent_rev
expr_stmt|;
name|p
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
operator|*
name|pp
operator|=
name|p
expr_stmt|;
return|return
name|parent_rev
return|;
block|}
end_function
begin_function
DECL|function|mark_reachable
specifier|static
name|void
name|mark_reachable
parameter_list|(
name|struct
name|revision
modifier|*
name|rev
parameter_list|)
block|{
name|struct
name|parent
modifier|*
name|p
init|=
name|rev
operator|->
name|parent
decl_stmt|;
comment|/* If we've been here already, don't bother */
if|if
condition|(
name|rev
operator|->
name|flags
operator|&
name|REACHABLE
condition|)
return|return;
name|rev
operator|->
name|flags
operator||=
name|REACHABLE
operator||
name|USED
expr_stmt|;
while|while
condition|(
name|p
condition|)
block|{
name|mark_reachable
argument_list|(
name|p
operator|->
name|parent
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|->
name|next
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|parse_commit_date
specifier|static
name|unsigned
name|long
name|parse_commit_date
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|)
block|{
if|if
condition|(
name|memcmp
argument_list|(
name|buf
argument_list|,
literal|"author"
argument_list|,
literal|6
argument_list|)
condition|)
return|return
literal|0
return|;
while|while
condition|(
operator|*
name|buf
operator|++
operator|!=
literal|'\n'
condition|)
comment|/* nada */
empty_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|buf
argument_list|,
literal|"committer"
argument_list|,
literal|9
argument_list|)
condition|)
return|return
literal|0
return|;
while|while
condition|(
operator|*
name|buf
operator|++
operator|!=
literal|'>'
condition|)
comment|/* nada */
empty_stmt|;
return|return
name|strtoul
argument_list|(
name|buf
argument_list|,
name|NULL
argument_list|,
literal|10
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parse_commit
specifier|static
name|int
name|parse_commit
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
name|struct
name|revision
modifier|*
name|rev
init|=
name|lookup_rev
argument_list|(
name|sha1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|rev
operator|->
name|flags
operator|&
name|SEEN
operator|)
condition|)
block|{
name|void
modifier|*
name|buffer
decl_stmt|,
modifier|*
name|bufptr
decl_stmt|;
name|unsigned
name|long
name|size
decl_stmt|;
name|char
name|type
index|[
literal|20
index|]
decl_stmt|;
name|unsigned
name|char
name|parent
index|[
literal|20
index|]
decl_stmt|;
name|rev
operator|->
name|flags
operator||=
name|SEEN
expr_stmt|;
name|buffer
operator|=
name|bufptr
operator|=
name|read_sha1_file
argument_list|(
name|sha1
argument_list|,
name|type
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|||
name|strcmp
argument_list|(
name|type
argument_list|,
literal|"commit"
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|bufptr
operator|+=
literal|46
expr_stmt|;
comment|/* "tree " + "hex sha1" + "\n" */
while|while
condition|(
operator|!
name|memcmp
argument_list|(
name|bufptr
argument_list|,
literal|"parent "
argument_list|,
literal|7
argument_list|)
operator|&&
operator|!
name|get_sha1_hex
argument_list|(
name|bufptr
operator|+
literal|7
argument_list|,
name|parent
argument_list|)
condition|)
block|{
name|add_relationship
argument_list|(
name|rev
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|parse_commit
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|bufptr
operator|+=
literal|48
expr_stmt|;
comment|/* "parent " + "hex sha1" + "\n" */
block|}
name|rev
operator|->
name|date
operator|=
name|parse_commit_date
argument_list|(
name|bufptr
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* REVISION_H */
end_comment
end_unit
