begin_unit
begin_comment
comment|/* suppress inclusion of conflicting openssl functions */
end_comment
begin_define
DECL|macro|OPENSSL_NO_MD5
define|#
directive|define
name|OPENSSL_NO_MD5
end_define
begin_define
DECL|macro|HEADER_HMAC_H
define|#
directive|define
name|HEADER_HMAC_H
end_define
begin_define
DECL|macro|HEADER_SHA_H
define|#
directive|define
name|HEADER_SHA_H
end_define
begin_include
include|#
directive|include
file|<CommonCrypto/CommonHMAC.h>
end_include
begin_define
DECL|macro|HMAC_CTX
define|#
directive|define
name|HMAC_CTX
value|CCHmacContext
end_define
begin_define
DECL|macro|HMAC_Init
define|#
directive|define
name|HMAC_Init
parameter_list|(
name|hmac
parameter_list|,
name|key
parameter_list|,
name|len
parameter_list|,
name|algo
parameter_list|)
value|CCHmacInit(hmac, algo, key, len)
end_define
begin_define
DECL|macro|HMAC_Update
define|#
directive|define
name|HMAC_Update
value|CCHmacUpdate
end_define
begin_define
DECL|macro|HMAC_Final
define|#
directive|define
name|HMAC_Final
parameter_list|(
name|hmac
parameter_list|,
name|hash
parameter_list|,
name|ptr
parameter_list|)
value|CCHmacFinal(hmac, hash)
end_define
begin_define
DECL|macro|HMAC_CTX_cleanup
define|#
directive|define
name|HMAC_CTX_cleanup
parameter_list|(
name|ignore
parameter_list|)
end_define
begin_define
DECL|macro|EVP_md5
define|#
directive|define
name|EVP_md5
parameter_list|(
modifier|...
parameter_list|)
value|kCCHmacAlgMD5
end_define
begin_if
if|#
directive|if
name|__MAC_OS_X_VERSION_MIN_REQUIRED
operator|>=
literal|1070
end_if
begin_define
DECL|macro|APPLE_LION_OR_NEWER
define|#
directive|define
name|APPLE_LION_OR_NEWER
end_define
begin_include
include|#
directive|include
file|<Security/Security.h>
end_include
begin_comment
comment|/* Apple's TYPE_BOOL conflicts with config.c */
end_comment
begin_undef
DECL|macro|TYPE_BOOL
undef|#
directive|undef
name|TYPE_BOOL
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SHA1_MAX_BLOCK_SIZE
end_ifndef
begin_error
error|#
directive|error
error|Using Apple Common Crypto library requires setting SHA1_MAX_BLOCK_SIZE
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|APPLE_LION_OR_NEWER
end_ifdef
begin_define
DECL|macro|git_CC_error_check
define|#
directive|define
name|git_CC_error_check
parameter_list|(
name|pattern
parameter_list|,
name|err
parameter_list|)
define|\
value|do { \ 		if (err) { \ 			die(pattern, (long)CFErrorGetCode(err)); \ 		} \ 	} while(0)
end_define
begin_define
DECL|macro|EVP_EncodeBlock
define|#
directive|define
name|EVP_EncodeBlock
value|git_CC_EVP_EncodeBlock
end_define
begin_function
DECL|function|git_CC_EVP_EncodeBlock
specifier|static
specifier|inline
name|int
name|git_CC_EVP_EncodeBlock
parameter_list|(
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inlen
parameter_list|)
block|{
name|CFErrorRef
name|err
decl_stmt|;
name|SecTransformRef
name|encoder
decl_stmt|;
name|CFDataRef
name|input
decl_stmt|,
name|output
decl_stmt|;
name|CFIndex
name|length
decl_stmt|;
name|encoder
operator|=
name|SecEncodeTransformCreate
argument_list|(
name|kSecBase64Encoding
argument_list|,
operator|&
name|err
argument_list|)
expr_stmt|;
name|git_CC_error_check
argument_list|(
literal|"SecEncodeTransformCreate failed: %ld"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|input
operator|=
name|CFDataCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|in
argument_list|,
name|inlen
argument_list|)
expr_stmt|;
name|SecTransformSetAttribute
argument_list|(
name|encoder
argument_list|,
name|kSecTransformInputAttributeName
argument_list|,
name|input
argument_list|,
operator|&
name|err
argument_list|)
expr_stmt|;
name|git_CC_error_check
argument_list|(
literal|"SecTransformSetAttribute failed: %ld"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|output
operator|=
name|SecTransformExecute
argument_list|(
name|encoder
argument_list|,
operator|&
name|err
argument_list|)
expr_stmt|;
name|git_CC_error_check
argument_list|(
literal|"SecTransformExecute failed: %ld"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|length
operator|=
name|CFDataGetLength
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|CFDataGetBytes
argument_list|(
name|output
argument_list|,
name|CFRangeMake
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|strlen
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|out
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|EVP_DecodeBlock
define|#
directive|define
name|EVP_DecodeBlock
value|git_CC_EVP_DecodeBlock
end_define
begin_function
DECL|function|git_CC_EVP_DecodeBlock
specifier|static
name|int
specifier|inline
name|git_CC_EVP_DecodeBlock
parameter_list|(
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|inlen
parameter_list|)
block|{
name|CFErrorRef
name|err
decl_stmt|;
name|SecTransformRef
name|decoder
decl_stmt|;
name|CFDataRef
name|input
decl_stmt|,
name|output
decl_stmt|;
name|CFIndex
name|length
decl_stmt|;
name|decoder
operator|=
name|SecDecodeTransformCreate
argument_list|(
name|kSecBase64Encoding
argument_list|,
operator|&
name|err
argument_list|)
expr_stmt|;
name|git_CC_error_check
argument_list|(
literal|"SecEncodeTransformCreate failed: %ld"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|input
operator|=
name|CFDataCreate
argument_list|(
name|kCFAllocatorDefault
argument_list|,
name|in
argument_list|,
name|inlen
argument_list|)
expr_stmt|;
name|SecTransformSetAttribute
argument_list|(
name|decoder
argument_list|,
name|kSecTransformInputAttributeName
argument_list|,
name|input
argument_list|,
operator|&
name|err
argument_list|)
expr_stmt|;
name|git_CC_error_check
argument_list|(
literal|"SecTransformSetAttribute failed: %ld"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|output
operator|=
name|SecTransformExecute
argument_list|(
name|decoder
argument_list|,
operator|&
name|err
argument_list|)
expr_stmt|;
name|git_CC_error_check
argument_list|(
literal|"SecTransformExecute failed: %ld"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|length
operator|=
name|CFDataGetLength
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|CFDataGetBytes
argument_list|(
name|output
argument_list|,
name|CFRangeMake
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|CFRelease
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|strlen
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|out
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* APPLE_LION_OR_NEWER */
end_comment
end_unit
