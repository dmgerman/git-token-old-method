begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|DELTA_H
end_ifndef
begin_define
DECL|macro|DELTA_H
define|#
directive|define
name|DELTA_H
end_define
begin_comment
comment|/* handling of delta buffers */
end_comment
begin_function_decl
specifier|extern
name|void
modifier|*
name|diff_delta
parameter_list|(
name|void
modifier|*
name|from_buf
parameter_list|,
name|unsigned
name|long
name|from_size
parameter_list|,
name|void
modifier|*
name|to_buf
parameter_list|,
name|unsigned
name|long
name|to_size
parameter_list|,
name|unsigned
name|long
modifier|*
name|delta_size
parameter_list|,
name|unsigned
name|long
name|max_size
parameter_list|,
name|void
modifier|*
modifier|*
name|from_index
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|patch_delta
parameter_list|(
name|void
modifier|*
name|src_buf
parameter_list|,
name|unsigned
name|long
name|src_size
parameter_list|,
name|void
modifier|*
name|delta_buf
parameter_list|,
name|unsigned
name|long
name|delta_size
parameter_list|,
name|unsigned
name|long
modifier|*
name|dst_size
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* the smallest possible delta size is 4 bytes */
end_comment
begin_define
DECL|macro|DELTA_SIZE_MIN
define|#
directive|define
name|DELTA_SIZE_MIN
value|4
end_define
begin_comment
comment|/*  * This must be called twice on the delta data buffer, first to get the  * expected reference buffer size, and again to get the result buffer size.  */
end_comment
begin_function
DECL|function|get_delta_hdr_size
specifier|static
specifier|inline
name|unsigned
name|long
name|get_delta_hdr_size
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
modifier|*
name|datap
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|data
init|=
operator|*
name|datap
decl_stmt|;
name|unsigned
name|char
name|cmd
decl_stmt|;
name|unsigned
name|long
name|size
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|cmd
operator|=
operator|*
name|data
operator|++
expr_stmt|;
name|size
operator||=
operator|(
name|cmd
operator|&
operator|~
literal|0x80
operator|)
operator|<<
name|i
expr_stmt|;
name|i
operator|+=
literal|7
expr_stmt|;
block|}
do|while
condition|(
name|cmd
operator|&
literal|0x80
condition|)
do|;
operator|*
name|datap
operator|=
name|data
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
