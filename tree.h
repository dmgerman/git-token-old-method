begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|TREE_H
end_ifndef
begin_define
DECL|macro|TREE_H
define|#
directive|define
name|TREE_H
end_define
begin_include
include|#
directive|include
file|"object.h"
end_include
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|tree_type
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|tree_entry_list
struct|struct
name|tree_entry_list
block|{
DECL|member|next
name|struct
name|tree_entry_list
modifier|*
name|next
decl_stmt|;
DECL|member|directory
name|unsigned
name|directory
range|:
literal|1
decl_stmt|;
DECL|member|executable
name|unsigned
name|executable
range|:
literal|1
decl_stmt|;
DECL|member|symlink
name|unsigned
name|symlink
range|:
literal|1
decl_stmt|;
DECL|member|zeropad
name|unsigned
name|zeropad
range|:
literal|1
decl_stmt|;
DECL|member|mode
name|unsigned
name|int
name|mode
decl_stmt|;
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
union|union
block|{
DECL|member|any
name|struct
name|object
modifier|*
name|any
decl_stmt|;
DECL|member|tree
name|struct
name|tree
modifier|*
name|tree
decl_stmt|;
DECL|member|blob
name|struct
name|blob
modifier|*
name|blob
decl_stmt|;
block|}
DECL|member|item
name|item
union|;
DECL|member|parent
name|struct
name|tree_entry_list
modifier|*
name|parent
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|tree
struct|struct
name|tree
block|{
DECL|member|object
name|struct
name|object
name|object
decl_stmt|;
DECL|member|entries
name|struct
name|tree_entry_list
modifier|*
name|entries
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
name|struct
name|tree
modifier|*
name|lookup_tree
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|parse_tree_buffer
parameter_list|(
name|struct
name|tree
modifier|*
name|item
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|parse_tree
parameter_list|(
name|struct
name|tree
modifier|*
name|tree
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Parses and returns the tree in the given ent, chasing tags and commits. */
end_comment
begin_function_decl
name|struct
name|tree
modifier|*
name|parse_tree_indirect
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|READ_TREE_RECURSIVE
define|#
directive|define
name|READ_TREE_RECURSIVE
value|1
end_define
begin_typedef
DECL|typedef|read_tree_fn_t
typedef|typedef
name|int
function_decl|(
modifier|*
name|read_tree_fn_t
function_decl|)
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
specifier|extern
name|int
name|read_tree_recursive
parameter_list|(
name|void
modifier|*
name|buffer
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|base
parameter_list|,
name|int
name|baselen
parameter_list|,
name|int
name|stage
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|match
parameter_list|,
name|read_tree_fn_t
name|fn
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* TREE_H */
end_comment
end_unit
