begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|WALKER_H
end_ifndef
begin_define
DECL|macro|WALKER_H
define|#
directive|define
name|WALKER_H
end_define
begin_struct
DECL|struct|walker
struct|struct
name|walker
block|{
DECL|member|data
name|void
modifier|*
name|data
decl_stmt|;
DECL|member|fetch_ref
name|int
function_decl|(
modifier|*
name|fetch_ref
function_decl|)
parameter_list|(
name|struct
name|walker
modifier|*
parameter_list|,
name|char
modifier|*
name|ref
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
DECL|member|prefetch
name|void
function_decl|(
modifier|*
name|prefetch
function_decl|)
parameter_list|(
name|struct
name|walker
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
DECL|member|fetch
name|int
function_decl|(
modifier|*
name|fetch
function_decl|)
parameter_list|(
name|struct
name|walker
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
DECL|member|cleanup
name|void
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|struct
name|walker
modifier|*
parameter_list|)
function_decl|;
DECL|member|get_tree
name|int
name|get_tree
decl_stmt|;
DECL|member|get_history
name|int
name|get_history
decl_stmt|;
DECL|member|get_all
name|int
name|get_all
decl_stmt|;
DECL|member|get_verbosely
name|int
name|get_verbosely
decl_stmt|;
DECL|member|get_recover
name|int
name|get_recover
decl_stmt|;
DECL|member|corrupt_object_found
name|int
name|corrupt_object_found
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/* Report what we got under get_verbosely */
end_comment
begin_function_decl
name|void
name|walker_say
parameter_list|(
name|struct
name|walker
modifier|*
name|walker
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Load pull targets from stdin */
end_comment
begin_function_decl
name|int
name|walker_targets_stdin
parameter_list|(
name|char
modifier|*
modifier|*
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
modifier|*
name|write_ref
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Free up loaded targets */
end_comment
begin_function_decl
name|void
name|walker_targets_free
parameter_list|(
name|int
name|targets
parameter_list|,
name|char
modifier|*
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|write_ref
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* If write_ref is set, the ref filename to write the target value to. */
end_comment
begin_comment
comment|/* If write_ref_log_details is set, additional text will appear in the ref log. */
end_comment
begin_function_decl
name|int
name|walker_fetch
parameter_list|(
name|struct
name|walker
modifier|*
name|impl
parameter_list|,
name|int
name|targets
parameter_list|,
name|char
modifier|*
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|write_ref
parameter_list|,
specifier|const
name|char
modifier|*
name|write_ref_log_details
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|walker_free
parameter_list|(
name|struct
name|walker
modifier|*
name|walker
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|struct
name|walker
modifier|*
name|get_http_walker
parameter_list|(
specifier|const
name|char
modifier|*
name|url
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* WALKER_H */
end_comment
end_unit
