begin_unit
begin_comment
comment|/*  *  LibXDiff by Davide Libenzi ( File Differential Library )  *  Copyright (C) 2003  Davide Libenzi  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public  *  License as published by the Free Software Foundation; either  *  version 2.1 of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *  Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  *  *  Davide Libenzi<davidel@xmailserver.org>  *  */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|XTYPES_H
argument_list|)
end_if
begin_define
DECL|macro|XTYPES_H
define|#
directive|define
name|XTYPES_H
end_define
begin_typedef
DECL|struct|s_chanode
typedef|typedef
struct|struct
name|s_chanode
block|{
DECL|member|next
name|struct
name|s_chanode
modifier|*
name|next
decl_stmt|;
DECL|member|icurr
name|long
name|icurr
decl_stmt|;
block|}
DECL|typedef|chanode_t
name|chanode_t
typedef|;
end_typedef
begin_typedef
DECL|struct|s_chastore
typedef|typedef
struct|struct
name|s_chastore
block|{
DECL|member|head
DECL|member|tail
name|chanode_t
modifier|*
name|head
decl_stmt|,
modifier|*
name|tail
decl_stmt|;
DECL|member|isize
DECL|member|nsize
name|long
name|isize
decl_stmt|,
name|nsize
decl_stmt|;
DECL|member|ancur
name|chanode_t
modifier|*
name|ancur
decl_stmt|;
DECL|member|sncur
name|chanode_t
modifier|*
name|sncur
decl_stmt|;
DECL|member|scurr
name|long
name|scurr
decl_stmt|;
block|}
DECL|typedef|chastore_t
name|chastore_t
typedef|;
end_typedef
begin_typedef
DECL|struct|s_xrecord
typedef|typedef
struct|struct
name|s_xrecord
block|{
DECL|member|next
name|struct
name|s_xrecord
modifier|*
name|next
decl_stmt|;
DECL|member|ptr
name|char
specifier|const
modifier|*
name|ptr
decl_stmt|;
DECL|member|size
name|long
name|size
decl_stmt|;
DECL|member|ha
name|unsigned
name|long
name|ha
decl_stmt|;
block|}
DECL|typedef|xrecord_t
name|xrecord_t
typedef|;
end_typedef
begin_typedef
DECL|struct|s_xdfile
typedef|typedef
struct|struct
name|s_xdfile
block|{
DECL|member|rcha
name|chastore_t
name|rcha
decl_stmt|;
DECL|member|nrec
name|long
name|nrec
decl_stmt|;
DECL|member|hbits
name|unsigned
name|int
name|hbits
decl_stmt|;
DECL|member|rhash
name|xrecord_t
modifier|*
modifier|*
name|rhash
decl_stmt|;
DECL|member|dstart
DECL|member|dend
name|long
name|dstart
decl_stmt|,
name|dend
decl_stmt|;
DECL|member|recs
name|xrecord_t
modifier|*
modifier|*
name|recs
decl_stmt|;
DECL|member|rchg
name|char
modifier|*
name|rchg
decl_stmt|;
DECL|member|rindex
name|long
modifier|*
name|rindex
decl_stmt|;
DECL|member|nreff
name|long
name|nreff
decl_stmt|;
DECL|member|ha
name|unsigned
name|long
modifier|*
name|ha
decl_stmt|;
block|}
DECL|typedef|xdfile_t
name|xdfile_t
typedef|;
end_typedef
begin_typedef
DECL|struct|s_xdfenv
typedef|typedef
struct|struct
name|s_xdfenv
block|{
DECL|member|xdf1
DECL|member|xdf2
name|xdfile_t
name|xdf1
decl_stmt|,
name|xdf2
decl_stmt|;
block|}
DECL|typedef|xdfenv_t
name|xdfenv_t
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* #if !defined(XTYPES_H) */
end_comment
end_unit
