begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|GIT_UTF8_H
end_ifndef
begin_define
DECL|macro|GIT_UTF8_H
define|#
directive|define
name|GIT_UTF8_H
end_define
begin_typedef
DECL|typedef|ucs_char_t
typedef|typedef
name|unsigned
name|int
name|ucs_char_t
typedef|;
end_typedef
begin_comment
DECL|typedef|ucs_char_t
comment|/* assuming 32bit int */
end_comment
begin_function_decl
name|size_t
name|display_mode_esc_sequence_len
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|utf8_width
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|start
parameter_list|,
name|size_t
modifier|*
name|remainder_p
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|utf8_strnwidth
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|skip_ansi
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|utf8_strwidth
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|is_utf8
parameter_list|(
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|is_encoding_utf8
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|same_encoding
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|__attribute__
argument_list|(
argument|(format (printf,
literal|2
argument|,
literal|3
argument|))
argument_list|)
end_macro
begin_function_decl
name|int
name|utf8_fprintf
parameter_list|(
name|FILE
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|char
name|utf8_bom
index|[]
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|skip_utf8_bom
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|strbuf_add_wrapped_text
parameter_list|(
name|struct
name|strbuf
modifier|*
name|buf
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|,
name|int
name|indent
parameter_list|,
name|int
name|indent2
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|strbuf_add_wrapped_bytes
parameter_list|(
name|struct
name|strbuf
modifier|*
name|buf
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|indent
parameter_list|,
name|int
name|indent2
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|strbuf_utf8_replace
parameter_list|(
name|struct
name|strbuf
modifier|*
name|sb
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|width
parameter_list|,
specifier|const
name|char
modifier|*
name|subst
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|NO_ICONV
end_ifndef
begin_function_decl
name|char
modifier|*
name|reencode_string_iconv
parameter_list|(
specifier|const
name|char
modifier|*
name|in
parameter_list|,
name|size_t
name|insz
parameter_list|,
name|iconv_t
name|conv
parameter_list|,
name|int
modifier|*
name|outsz
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|reencode_string_len
parameter_list|(
specifier|const
name|char
modifier|*
name|in
parameter_list|,
name|int
name|insz
parameter_list|,
specifier|const
name|char
modifier|*
name|out_encoding
parameter_list|,
specifier|const
name|char
modifier|*
name|in_encoding
parameter_list|,
name|int
modifier|*
name|outsz
parameter_list|)
function_decl|;
end_function_decl
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|reencode_string_len
define|#
directive|define
name|reencode_string_len
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|NULL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|reencode_string
specifier|static
specifier|inline
name|char
modifier|*
name|reencode_string
parameter_list|(
specifier|const
name|char
modifier|*
name|in
parameter_list|,
specifier|const
name|char
modifier|*
name|out_encoding
parameter_list|,
specifier|const
name|char
modifier|*
name|in_encoding
parameter_list|)
block|{
return|return
name|reencode_string_len
argument_list|(
name|in
argument_list|,
name|strlen
argument_list|(
name|in
argument_list|)
argument_list|,
name|out_encoding
argument_list|,
name|in_encoding
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|int
name|mbs_chrlen
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|text
parameter_list|,
name|size_t
modifier|*
name|remainder_p
parameter_list|,
specifier|const
name|char
modifier|*
name|encoding
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Returns true if the the path would match ".git" after HFS case-folding.  * The path should be NUL-terminated, but we will match variants of both ".git\0"  * and ".git/..." (but _not_ ".../.git"). This makes it suitable for both fsck  * and verify_path().  */
end_comment
begin_function_decl
name|int
name|is_hfs_dotgit
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
end_unit
