begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
string|'"""Misc. useful functionality used by the rest of this package.\n\nThis module provides common functionality used by the other modules in\nthis package.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Whether or not to show debug messages'
nl|'\n'
DECL|variable|DEBUG
name|'DEBUG'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|notify
name|'def'
name|'notify'
op|'('
name|'msg'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print a message to stderr."""'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
name|'msg'
op|'%'
name|'args'
newline|'\n'
nl|'\n'
DECL|function|debug
dedent|''
name|'def'
name|'debug'
op|'('
name|'msg'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print a debug message to stderr when DEBUG is enabled."""'
newline|'\n'
name|'if'
name|'DEBUG'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
name|'msg'
op|'%'
name|'args'
newline|'\n'
nl|'\n'
DECL|function|error
dedent|''
dedent|''
name|'def'
name|'error'
op|'('
name|'msg'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print an error message to stderr."""'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"ERROR:"'
op|','
name|'msg'
op|'%'
name|'args'
newline|'\n'
nl|'\n'
DECL|function|warn
dedent|''
name|'def'
name|'warn'
op|'('
name|'msg'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print a warning message to stderr."""'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"warning:"'
op|','
name|'msg'
op|'%'
name|'args'
newline|'\n'
nl|'\n'
DECL|function|die
dedent|''
name|'def'
name|'die'
op|'('
name|'msg'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print as error message to stderr and exit the program."""'
newline|'\n'
name|'error'
op|'('
name|'msg'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProgressIndicator
dedent|''
name|'class'
name|'ProgressIndicator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Simple progress indicator.\n\n    Displayed as a spinning character by default, but can be customized\n    by passing custom messages that overrides the spinning character.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|States
name|'States'
op|'='
op|'('
string|'"|"'
op|','
string|'"/"'
op|','
string|'"-"'
op|','
string|'"\\\\"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'prefix'
op|'='
string|'""'
op|','
name|'f'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new ProgressIndicator, bound to the given file object."""'
newline|'\n'
name|'self'
op|'.'
name|'n'
op|'='
number|'0'
comment|'# Simple progress counter'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
comment|'# Progress is written to this file object'
newline|'\n'
name|'self'
op|'.'
name|'prev_len'
op|'='
number|'0'
comment|'# Length of previous msg (to be overwritten)'
newline|'\n'
name|'self'
op|'.'
name|'prefix'
op|'='
name|'prefix'
comment|'# Prefix prepended to each progress message'
newline|'\n'
name|'self'
op|'.'
name|'prefix_lens'
op|'='
op|'['
op|']'
comment|'# Stack of prefix string lengths'
newline|'\n'
nl|'\n'
DECL|member|pushprefix
dedent|''
name|'def'
name|'pushprefix'
op|'('
name|'self'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Append the given prefix onto the prefix stack."""'
newline|'\n'
name|'self'
op|'.'
name|'prefix_lens'
op|'.'
name|'append'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'prefix'
op|'+='
name|'prefix'
newline|'\n'
nl|'\n'
DECL|member|popprefix
dedent|''
name|'def'
name|'popprefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove the last prefix from the prefix stack."""'
newline|'\n'
name|'prev_len'
op|'='
name|'self'
op|'.'
name|'prefix_lens'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'prefix'
op|'='
name|'self'
op|'.'
name|'prefix'
op|'['
op|':'
name|'prev_len'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|','
name|'lf'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate progress, possibly with a custom message."""'
newline|'\n'
name|'if'
name|'msg'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'self'
op|'.'
name|'States'
op|'['
name|'self'
op|'.'
name|'n'
op|'%'
name|'len'
op|'('
name|'self'
op|'.'
name|'States'
op|')'
op|']'
newline|'\n'
dedent|''
name|'msg'
op|'='
name|'self'
op|'.'
name|'prefix'
op|'+'
name|'msg'
newline|'\n'
name|'print'
op|'>>'
name|'self'
op|'.'
name|'f'
op|','
string|'"\\r%-*s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'prev_len'
op|','
name|'msg'
op|')'
op|','
newline|'\n'
name|'self'
op|'.'
name|'prev_len'
op|'='
name|'len'
op|'('
name|'msg'
op|'.'
name|'expandtabs'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'lf'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'>>'
name|'self'
op|'.'
name|'f'
newline|'\n'
name|'self'
op|'.'
name|'prev_len'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'n'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|','
name|'msg'
op|'='
string|'"done"'
op|','
name|'noprefix'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finalize progress indication with the given message."""'
newline|'\n'
name|'if'
name|'noprefix'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'prefix'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'self'
op|'('
name|'msg'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|start_command
dedent|''
dedent|''
name|'def'
name|'start_command'
op|'('
name|'args'
op|','
name|'cwd'
op|'='
name|'None'
op|','
name|'shell'
op|'='
name|'False'
op|','
name|'add_env'
op|'='
name|'None'
op|','
nl|'\n'
name|'stdin'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Start the given command, and return a subprocess object.\n\n    This provides a simpler interface to the subprocess module.\n\n    """'
newline|'\n'
name|'env'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'add_env'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'.'
name|'update'
op|'('
name|'add_env'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'args'
op|','
name|'bufsize'
op|'='
number|'1'
op|','
name|'stdin'
op|'='
name|'stdin'
op|','
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
name|'cwd'
op|'='
name|'cwd'
op|','
name|'shell'
op|'='
name|'shell'
op|','
nl|'\n'
name|'env'
op|'='
name|'env'
op|','
name|'universal_newlines'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_command
dedent|''
name|'def'
name|'run_command'
op|'('
name|'args'
op|','
name|'cwd'
op|'='
name|'None'
op|','
name|'shell'
op|'='
name|'False'
op|','
name|'add_env'
op|'='
name|'None'
op|','
nl|'\n'
name|'flag_error'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run the given command to completion, and return its results.\n\n    This provides a simpler interface to the subprocess module.\n\n    The results are formatted as a 3-tuple: (exit_code, output, errors)\n\n    If flag_error is enabled, Error messages will be produced if the\n    subprocess terminated with a non-zero exit code and/or stderr\n    output.\n\n    The other arguments are passed on to start_command().\n\n    """'
newline|'\n'
name|'process'
op|'='
name|'start_command'
op|'('
name|'args'
op|','
name|'cwd'
op|','
name|'shell'
op|','
name|'add_env'
op|')'
newline|'\n'
op|'('
name|'output'
op|','
name|'errors'
op|')'
op|'='
name|'process'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
name|'exit_code'
op|'='
name|'process'
op|'.'
name|'returncode'
newline|'\n'
name|'if'
name|'flag_error'
name|'and'
name|'errors'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'('
string|'"\'%s\' returned errors:\\n---\\n%s---"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|','
name|'errors'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'flag_error'
name|'and'
name|'exit_code'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'('
string|'"\'%s\' returned exit code %i"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|','
name|'exit_code'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'exit_code'
op|','
name|'output'
op|','
name|'errors'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|file_reader_method
dedent|''
name|'def'
name|'file_reader_method'
op|'('
name|'missing_ok'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for simplifying reading of files.\n\n    If missing_ok is True, a failure to open a file for reading will\n    not raise the usual IOError, but instead the wrapped method will be\n    called with f == None.  The method must in this case properly\n    handle f == None.\n\n    """'
newline|'\n'
DECL|function|_wrap
name|'def'
name|'_wrap'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Teach given method to handle both filenames and file objects.\n\n        The given method must take a file object as its second argument\n        (the first argument being \'self\', of course).  This decorator\n        will take a filename given as the second argument and promote\n        it to a file object.\n\n        """'
newline|'\n'
DECL|function|_wrapped_method
name|'def'
name|'_wrapped_method'
op|'('
name|'self'
op|','
name|'filename'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'filename'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'filename'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'r'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'missing_ok'
op|':'
newline|'\n'
indent|'                        '
name|'f'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'method'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'filename'
op|','
name|'file'
op|')'
name|'and'
name|'f'
op|':'
newline|'\n'
indent|'                    '
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'_wrapped_method'
newline|'\n'
dedent|''
name|'return'
name|'_wrap'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|file_writer_method
dedent|''
name|'def'
name|'file_writer_method'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for simplifying writing of files.\n\n    Enables the given method to handle both filenames and file objects.\n\n    The given method must take a file object as its second argument\n    (the first argument being \'self\', of course).  This decorator will\n    take a filename given as the second argument and promote it to a\n    file object.\n\n    """'
newline|'\n'
DECL|function|_new_method
name|'def'
name|'_new_method'
op|'('
name|'self'
op|','
name|'filename'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'filename'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'filename'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Make sure the containing directory exists'
nl|'\n'
indent|'            '
name|'parent_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'parent_dir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'parent_dir'
op|')'
newline|'\n'
dedent|''
name|'f'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'w'"
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'method'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'filename'
op|','
name|'file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'_new_method'
newline|'\n'
dedent|''
endmarker|''
end_unit
