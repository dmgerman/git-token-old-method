begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
string|'"""Functionality for interacting with Git repositories.\n\nThis module provides classes for interfacing with a Git repository.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'binascii'
name|'import'
name|'hexlify'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'git_remote_helpers'
op|'.'
name|'util'
name|'import'
name|'debug'
op|','
name|'error'
op|','
name|'die'
op|','
name|'start_command'
op|','
name|'run_command'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_git_dir
name|'def'
name|'get_git_dir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the path to the GIT_DIR for this repo."""'
newline|'\n'
name|'args'
op|'='
op|'('
string|'"git"'
op|','
string|'"rev-parse"'
op|','
string|'"--git-dir"'
op|')'
newline|'\n'
name|'exit_code'
op|','
name|'output'
op|','
name|'errors'
op|'='
name|'run_command'
op|'('
name|'args'
op|')'
newline|'\n'
name|'if'
name|'exit_code'
op|':'
newline|'\n'
indent|'        '
name|'die'
op|'('
string|'"Failed to retrieve git dir"'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'not'
name|'errors'
newline|'\n'
name|'return'
name|'output'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_git_config
dedent|''
name|'def'
name|'parse_git_config'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict containing the parsed version of \'git config -l\'."""'
newline|'\n'
name|'exit_code'
op|','
name|'output'
op|','
name|'errors'
op|'='
name|'run_command'
op|'('
op|'('
string|'"git"'
op|','
string|'"config"'
op|','
string|'"-z"'
op|','
string|'"-l"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'exit_code'
op|':'
newline|'\n'
indent|'        '
name|'die'
op|'('
string|'"Failed to retrieve git configuration"'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'not'
name|'errors'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'['
name|'e'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|','
number|'1'
op|')'
name|'for'
name|'e'
name|'in'
name|'output'
op|'.'
name|'split'
op|'('
string|'"\\0"'
op|')'
name|'if'
name|'e'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|git_config_bool
dedent|''
name|'def'
name|'git_config_bool'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert the given git config string value to True or False.\n\n    Raise ValueError if the given string was not recognized as a\n    boolean value.\n\n    """'
newline|'\n'
name|'norm_value'
op|'='
name|'str'
op|'('
name|'value'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'norm_value'
name|'in'
op|'('
string|'"true"'
op|','
string|'"1"'
op|','
string|'"yes"'
op|','
string|'"on"'
op|','
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'norm_value'
name|'in'
op|'('
string|'"false"'
op|','
string|'"0"'
op|','
string|'"no"'
op|','
string|'"off"'
op|','
string|'"none"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
name|'ValueError'
op|'('
string|'"Failed to parse \'%s\' into a boolean value"'
op|'%'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|valid_git_ref
dedent|''
name|'def'
name|'valid_git_ref'
op|'('
name|'ref_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return True iff the given ref name is a valid git ref name."""'
newline|'\n'
comment|'# The following is a reimplementation of the git check-ref-format'
nl|'\n'
comment|'# command.  The rules were derived from the git check-ref-format(1)'
nl|'\n'
comment|'# manual page.  This code should be replaced by a call to'
nl|'\n'
comment|'# check_refname_format() in the git library, when such is available.'
nl|'\n'
name|'if'
name|'ref_name'
op|'.'
name|'endswith'
op|'('
string|"'/'"
op|')'
name|'or'
name|'ref_name'
op|'.'
name|'startswith'
op|'('
string|"'.'"
op|')'
name|'or'
name|'ref_name'
op|'.'
name|'count'
op|'('
string|"'/.'"
op|')'
name|'or'
name|'ref_name'
op|'.'
name|'count'
op|'('
string|"'..'"
op|')'
name|'or'
name|'ref_name'
op|'.'
name|'endswith'
op|'('
string|"'.lock'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'c'
name|'in'
name|'ref_name'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ord'
op|'('
name|'c'
op|')'
op|'<'
number|'0x20'
name|'or'
name|'ord'
op|'('
name|'c'
op|')'
op|'=='
number|'0x7f'
name|'or'
name|'c'
name|'in'
string|'" ~^:?*["'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitObjectFetcher
dedent|''
name|'class'
name|'GitObjectFetcher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Provide parsed access to \'git cat-file --batch\'.\n\n    This provides a read-only interface to the Git object database.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiate a \'git cat-file --batch\' session."""'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
op|'['
op|']'
comment|'# List of object names to be submitted'
newline|'\n'
name|'self'
op|'.'
name|'in_transit'
op|'='
name|'None'
comment|'# Object name currently in transit'
newline|'\n'
nl|'\n'
comment|"# 'git cat-file --batch' produces binary output which is likely"
nl|'\n'
comment|'# to be corrupted by the default "rU"-mode pipe opened by'
nl|'\n'
comment|'# start_command.  (Mode == "rU" does universal new-line'
nl|'\n'
comment|'# conversion, which mangles carriage returns.) Therefore, we'
nl|'\n'
comment|'# open an explicitly binary-safe pipe for transferring the'
nl|'\n'
comment|"# output from 'git cat-file --batch'."
nl|'\n'
name|'pipe_r_fd'
op|','
name|'pipe_w_fd'
op|'='
name|'os'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'pipe_r'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'pipe_r_fd'
op|','
string|'"rb"'
op|')'
newline|'\n'
name|'pipe_w'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'pipe_w_fd'
op|','
string|'"wb"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proc'
op|'='
name|'start_command'
op|'('
op|'('
string|'"git"'
op|','
string|'"cat-file"'
op|','
string|'"--batch"'
op|')'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'pipe_w'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'pipe_r'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify completed communication with \'git cat-file --batch\'."""'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'queue'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'in_transit'
name|'is'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'proc'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'proc'
op|'.'
name|'wait'
op|'('
op|')'
op|'=='
number|'0'
comment|'# Zero exit code'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|'=='
string|'""'
comment|'# No remaining output'
newline|'\n'
nl|'\n'
DECL|member|_submit_next_object
dedent|''
name|'def'
name|'_submit_next_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Submit queue items to the \'git cat-file --batch\' process.\n\n        If there are items in the queue, and there is currently no item\n        currently in \'transit\', then pop the first item off the queue,\n        and submit it.\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'queue'
name|'and'
name|'self'
op|'.'
name|'in_transit'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'in_transit'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'print'
op|'>>'
name|'self'
op|'.'
name|'proc'
op|'.'
name|'stdin'
op|','
name|'self'
op|'.'
name|'in_transit'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|push
dedent|''
dedent|''
name|'def'
name|'push'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Push the given object name onto the queue.\n\n        The given callback function will at some point in the future\n        be called exactly once with the following arguments:\n        - self - this GitObjectFetcher instance\n        - obj  - the object name provided to push()\n        - sha1 - the SHA1 of the object, if \'None\' obj is missing\n        - t    - the type of the object (tag/commit/tree/blob)\n        - size - the size of the object in bytes\n        - data - the object contents\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'append'
op|'('
op|'('
name|'obj'
op|','
name|'callback'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_submit_next_object'
op|'('
op|')'
comment|'# (Re)start queue processing'
newline|'\n'
nl|'\n'
DECL|member|process_next_entry
dedent|''
name|'def'
name|'process_next_entry'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read the next entry off the queue and invoke callback."""'
newline|'\n'
name|'obj'
op|','
name|'cb'
op|'='
name|'self'
op|'.'
name|'in_transit'
newline|'\n'
name|'self'
op|'.'
name|'in_transit'
op|'='
name|'None'
newline|'\n'
name|'header'
op|'='
name|'self'
op|'.'
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'if'
name|'header'
op|'=='
string|'"%s missing\\n"'
op|'%'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cb'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'sha1'
op|','
name|'t'
op|','
name|'size'
op|'='
name|'header'
op|'.'
name|'split'
op|'('
string|'" "'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'sha1'
op|')'
op|'=='
number|'40'
newline|'\n'
name|'assert'
name|'t'
name|'in'
op|'('
string|'"tag"'
op|','
string|'"commit"'
op|','
string|'"tree"'
op|','
string|'"blob"'
op|')'
newline|'\n'
name|'assert'
name|'size'
op|'.'
name|'endswith'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'size'
op|'='
name|'int'
op|'('
name|'size'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'f'
op|'.'
name|'read'
op|'('
name|'size'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'f'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
op|'=='
string|'"\\n"'
newline|'\n'
name|'cb'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'sha1'
op|','
name|'t'
op|','
name|'size'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_submit_next_object'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process the current queue until empty."""'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'in_transit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'process_next_entry'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# High-level convenience methods:'
nl|'\n'
nl|'\n'
DECL|member|get_sha1
dedent|''
dedent|''
name|'def'
name|'get_sha1'
op|'('
name|'self'
op|','
name|'objspec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the SHA1 of the object specified by \'objspec\'.\n\n        Return None if \'objspec\' does not specify an existing object.\n\n        """'
newline|'\n'
DECL|class|_ObjHandler
name|'class'
name|'_ObjHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Helper class for getting the returned SHA1."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'parser'
op|'='
name|'parser'
newline|'\n'
name|'self'
op|'.'
name|'sha1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'obj'
op|','
name|'sha1'
op|','
name|'t'
op|','
name|'size'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: Many unused arguments. Could this be cheaper?'
nl|'\n'
indent|'                '
name|'assert'
name|'parser'
op|'=='
name|'self'
op|'.'
name|'parser'
newline|'\n'
name|'self'
op|'.'
name|'sha1'
op|'='
name|'sha1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'handler'
op|'='
name|'_ObjHandler'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'push'
op|'('
name|'objspec'
op|','
name|'handler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
name|'return'
name|'handler'
op|'.'
name|'sha1'
newline|'\n'
nl|'\n'
DECL|member|open_obj
dedent|''
name|'def'
name|'open_obj'
op|'('
name|'self'
op|','
name|'objspec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a file object wrapping the contents of a named object.\n\n        The caller is responsible for calling .close() on the returned\n        file object.\n\n        Raise KeyError if \'objspec\' does not exist in the repo.\n\n        """'
newline|'\n'
DECL|class|_ObjHandler
name|'class'
name|'_ObjHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Helper class for parsing the returned git object."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Set up helper."""'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'parser'
newline|'\n'
name|'self'
op|'.'
name|'contents'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'err'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'obj'
op|','
name|'sha1'
op|','
name|'t'
op|','
name|'size'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Git object callback (see GitObjectFetcher documentation)."""'
newline|'\n'
name|'assert'
name|'parser'
op|'=='
name|'self'
op|'.'
name|'parser'
newline|'\n'
name|'if'
name|'not'
name|'sha1'
op|':'
comment|'# Missing object'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'err'
op|'='
string|'"Missing object \'%s\'"'
op|'%'
name|'obj'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'assert'
name|'size'
op|'=='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'contents'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'handler'
op|'='
name|'_ObjHandler'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'push'
op|'('
name|'objspec'
op|','
name|'handler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
name|'if'
name|'handler'
op|'.'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
name|'handler'
op|'.'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'handler'
op|'.'
name|'contents'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'handler'
op|'.'
name|'contents'
newline|'\n'
nl|'\n'
DECL|member|walk_tree
dedent|''
name|'def'
name|'walk_tree'
op|'('
name|'self'
op|','
name|'tree_objspec'
op|','
name|'callback'
op|','
name|'prefix'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recursively walk the given Git tree object.\n\n        Recursively walk all subtrees of the given tree object, and\n        invoke the given callback passing three arguments:\n        (path, mode, data) with the path, permission bits, and contents\n        of all the blobs found in the entire tree structure.\n\n        """'
newline|'\n'
DECL|class|_ObjHandler
name|'class'
name|'_ObjHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Helper class for walking a git tree structure."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'cb'
op|','
name|'path'
op|','
name|'mode'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Set up helper."""'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'parser'
newline|'\n'
name|'self'
op|'.'
name|'cb'
op|'='
name|'cb'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'mode'
newline|'\n'
name|'self'
op|'.'
name|'err'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|parse_tree
dedent|''
name|'def'
name|'parse_tree'
op|'('
name|'self'
op|','
name|'treedata'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Parse tree object data, yield tree entries.\n\n                Each tree entry is a 3-tuple (mode, sha1, path)\n\n                self.path is prepended to all paths yielded\n                from this method.\n\n                """'
newline|'\n'
name|'while'
name|'treedata'
op|':'
newline|'\n'
indent|'                    '
name|'mode'
op|'='
name|'int'
op|'('
name|'treedata'
op|'['
op|':'
number|'6'
op|']'
op|','
number|'10'
op|')'
newline|'\n'
comment|'# Turn 100xxx into xxx'
nl|'\n'
name|'if'
name|'mode'
op|'>'
number|'100000'
op|':'
newline|'\n'
indent|'                        '
name|'mode'
op|'-='
number|'100000'
newline|'\n'
dedent|''
name|'assert'
name|'treedata'
op|'['
number|'6'
op|']'
op|'=='
string|'" "'
newline|'\n'
name|'i'
op|'='
name|'treedata'
op|'.'
name|'find'
op|'('
string|'"\\0"'
op|','
number|'7'
op|')'
newline|'\n'
name|'assert'
name|'i'
op|'>'
number|'0'
newline|'\n'
name|'path'
op|'='
name|'treedata'
op|'['
number|'7'
op|':'
name|'i'
op|']'
newline|'\n'
name|'sha1'
op|'='
name|'hexlify'
op|'('
name|'treedata'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
name|'i'
op|'+'
number|'21'
op|']'
op|')'
newline|'\n'
name|'yield'
op|'('
name|'mode'
op|','
name|'sha1'
op|','
name|'self'
op|'.'
name|'path'
op|'+'
name|'path'
op|')'
newline|'\n'
name|'treedata'
op|'='
name|'treedata'
op|'['
name|'i'
op|'+'
number|'21'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'obj'
op|','
name|'sha1'
op|','
name|'t'
op|','
name|'size'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Git object callback (see GitObjectFetcher documentation)."""'
newline|'\n'
name|'assert'
name|'parser'
op|'=='
name|'self'
op|'.'
name|'parser'
newline|'\n'
name|'if'
name|'not'
name|'sha1'
op|':'
comment|'# Missing object'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'err'
op|'='
string|'"Missing object \'%s\'"'
op|'%'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'assert'
name|'size'
op|'=='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'t'
op|'=='
string|'"tree"'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'path'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'path'
op|'+='
string|'"/"'
newline|'\n'
comment|'# Recurse into all blobs and subtrees'
nl|'\n'
dedent|''
name|'for'
name|'m'
op|','
name|'s'
op|','
name|'p'
name|'in'
name|'self'
op|'.'
name|'parse_tree'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'parser'
op|'.'
name|'push'
op|'('
name|'s'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'('
name|'self'
op|'.'
name|'parser'
op|','
name|'self'
op|'.'
name|'cb'
op|','
name|'p'
op|','
name|'m'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'t'
op|'=='
string|'"blob"'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'cb'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'mode'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"Unknown object type \'%s\'"'
op|'%'
op|'('
name|'t'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'push'
op|'('
name|'tree_objspec'
op|','
name|'_ObjHandler'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitRefMap
dedent|''
dedent|''
name|'class'
name|'GitRefMap'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Map Git ref names to the Git object names they currently point to.\n\n    Behaves like a dictionary of Git ref names -> Git object names.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj_fetcher'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new Git ref -> object map."""'
newline|'\n'
name|'self'
op|'.'
name|'obj_fetcher'
op|'='
name|'obj_fetcher'
newline|'\n'
name|'self'
op|'.'
name|'_cache'
op|'='
op|'{'
op|'}'
comment|'# dict: refname -> objname'
newline|'\n'
nl|'\n'
DECL|member|_load
dedent|''
name|'def'
name|'_load'
op|'('
name|'self'
op|','
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the object currently bound to the given ref.\n\n        The name of the object pointed to by the given ref is stored\n        into this mapping, and also returned.\n\n        """'
newline|'\n'
name|'if'
name|'ref'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_cache'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache'
op|'['
name|'ref'
op|']'
op|'='
name|'self'
op|'.'
name|'obj_fetcher'
op|'.'
name|'get_sha1'
op|'('
name|'ref'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_cache'
op|'['
name|'ref'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'refname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return True if the given refname is present in this cache."""'
newline|'\n'
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'_load'
op|'('
name|'refname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'refname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the git object name pointed to by the given refname."""'
newline|'\n'
name|'commit'
op|'='
name|'self'
op|'.'
name|'_load'
op|'('
name|'refname'
op|')'
newline|'\n'
name|'if'
name|'commit'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
string|'"Unknown ref \'%s\'"'
op|'%'
op|'('
name|'refname'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'commit'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'refname'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the git object name pointed to by the given refname."""'
newline|'\n'
name|'commit'
op|'='
name|'self'
op|'.'
name|'_load'
op|'('
name|'refname'
op|')'
newline|'\n'
name|'if'
name|'commit'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'return'
name|'commit'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitFICommit
dedent|''
dedent|''
name|'class'
name|'GitFICommit'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Encapsulate the data in a Git fast-import commit command."""'
newline|'\n'
nl|'\n'
DECL|variable|SHA1RE
name|'SHA1RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^[0-9a-f]{40}$'"
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|parse_mode
name|'def'
name|'parse_mode'
op|'('
name|'cls'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify the given git file mode, and return it as a string."""'
newline|'\n'
name|'assert'
name|'mode'
name|'in'
op|'('
number|'644'
op|','
number|'755'
op|','
number|'100644'
op|','
number|'100755'
op|','
number|'120000'
op|')'
newline|'\n'
name|'return'
string|'"%i"'
op|'%'
op|'('
name|'mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|parse_objname
name|'def'
name|'parse_objname'
op|'('
name|'cls'
op|','
name|'objname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the given object name (or mark number) as a string."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'objname'
op|','
name|'int'
op|')'
op|':'
comment|'# Object name is a mark number'
newline|'\n'
indent|'            '
name|'assert'
name|'objname'
op|'>'
number|'0'
newline|'\n'
name|'return'
string|'":%i"'
op|'%'
op|'('
name|'objname'
op|')'
newline|'\n'
nl|'\n'
comment|'# No existence check is done, only checks for valid format'
nl|'\n'
dedent|''
name|'assert'
name|'cls'
op|'.'
name|'SHA1RE'
op|'.'
name|'match'
op|'('
name|'objname'
op|')'
comment|'# Object name is valid SHA1'
newline|'\n'
name|'return'
name|'objname'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|quote_path
name|'def'
name|'quote_path'
op|'('
name|'cls'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a quoted version of the given path."""'
newline|'\n'
name|'path'
op|'='
name|'path'
op|'.'
name|'replace'
op|'('
string|'"\\\\"'
op|','
string|'"\\\\\\\\"'
op|')'
newline|'\n'
name|'path'
op|'='
name|'path'
op|'.'
name|'replace'
op|'('
string|'"\\n"'
op|','
string|'"\\\\n"'
op|')'
newline|'\n'
name|'path'
op|'='
name|'path'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|'\'\\\\"\''
op|')'
newline|'\n'
name|'return'
string|'\'"%s"\''
op|'%'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|parse_path
name|'def'
name|'parse_path'
op|'('
name|'cls'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that the given path is valid, and quote it, if needed."""'
newline|'\n'
name|'assert'
name|'not'
name|'isinstance'
op|'('
name|'path'
op|','
name|'int'
op|')'
comment|'# Cannot be a mark number'
newline|'\n'
nl|'\n'
comment|'# These checks verify the rules on the fast-import man page'
nl|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'count'
op|'('
string|'"//"'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'"/"'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"/"'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'count'
op|'('
string|'"/./"'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'count'
op|'('
string|'"/../"'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'"/."'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'"/.."'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"./"'
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"../"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'path'
op|'.'
name|'count'
op|'('
string|'\'"\''
op|')'
op|'+'
name|'path'
op|'.'
name|'count'
op|'('
string|"'\\n'"
op|')'
op|'+'
name|'path'
op|'.'
name|'count'
op|'('
string|"'\\\\'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'quote_path'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'email'
op|','
name|'timestamp'
op|','
name|'timezone'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new Git fast-import commit, with the given metadata."""'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'email'
op|'='
name|'email'
newline|'\n'
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'timestamp'
newline|'\n'
name|'self'
op|'.'
name|'timezone'
op|'='
name|'timezone'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'='
op|'['
op|']'
comment|'# List of path operations in this commit'
newline|'\n'
nl|'\n'
DECL|member|modify
dedent|''
name|'def'
name|'modify'
op|'('
name|'self'
op|','
name|'mode'
op|','
name|'blobname'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a file modification to this Git fast-import commit."""'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'.'
name|'append'
op|'('
op|'('
string|'"M"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_mode'
op|'('
name|'mode'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_objname'
op|'('
name|'blobname'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_path'
op|'('
name|'path'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a file deletion to this Git fast-import commit."""'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'.'
name|'append'
op|'('
op|'('
string|'"D"'
op|','
name|'self'
op|'.'
name|'parse_path'
op|'('
name|'path'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'newpath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a file copy to this Git fast-import commit."""'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'.'
name|'append'
op|'('
op|'('
string|'"C"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_path'
op|'('
name|'path'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_path'
op|'('
name|'newpath'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rename
dedent|''
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'newpath'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a file rename to this Git fast-import commit."""'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'.'
name|'append'
op|'('
op|'('
string|'"R"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_path'
op|'('
name|'path'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_path'
op|'('
name|'newpath'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|note
dedent|''
name|'def'
name|'note'
op|'('
name|'self'
op|','
name|'blobname'
op|','
name|'commit'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a note object to this Git fast-import commit."""'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'.'
name|'append'
op|'('
op|'('
string|'"N"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_objname'
op|'('
name|'blobname'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'parse_objname'
op|'('
name|'commit'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteall
dedent|''
name|'def'
name|'deleteall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete all files in this Git fast-import commit."""'
newline|'\n'
name|'self'
op|'.'
name|'pathops'
op|'.'
name|'append'
op|'('
string|'"deleteall"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestGitFICommit
dedent|''
dedent|''
name|'class'
name|'TestGitFICommit'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""GitFICommit selftests."""'
newline|'\n'
nl|'\n'
DECL|member|test_basic
name|'def'
name|'test_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""GitFICommit basic selftests."""'
newline|'\n'
nl|'\n'
DECL|function|expect_fail
name|'def'
name|'expect_fail'
op|'('
name|'method'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Verify that the method(data) raises an AssertionError."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'raise'
name|'AssertionError'
op|'('
string|'"Failed test for invalid data \'%s(%s)\'"'
op|'%'
nl|'\n'
op|'('
name|'method'
op|'.'
name|'__name__'
op|','
name|'repr'
op|'('
name|'data'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_mode
dedent|''
dedent|''
name|'def'
name|'test_parse_mode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""GitFICommit.parse_mode() selftests."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|'('
number|'644'
op|')'
op|','
string|'"644"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|'('
number|'755'
op|')'
op|','
string|'"755"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|'('
number|'100644'
op|')'
op|','
string|'"100644"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|'('
number|'100755'
op|')'
op|','
string|'"100755"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|'('
number|'120000'
op|')'
op|','
string|'"120000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|','
number|'600'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|','
string|'"644"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_mode'
op|','
string|'"abc"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_objname
dedent|''
name|'def'
name|'test_parse_objname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""GitFICommit.parse_objname() selftests."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|'('
number|'1'
op|')'
op|','
string|'":1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|'('
string|'"0123456789"'
op|'*'
number|'4'
op|')'
op|','
nl|'\n'
string|'"0123456789"'
op|'*'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|'('
string|'"2468abcdef"'
op|'*'
number|'4'
op|')'
op|','
nl|'\n'
string|'"2468abcdef"'
op|'*'
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|','
nl|'\n'
string|'"abcdefghij"'
op|'*'
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_path
dedent|''
name|'def'
name|'test_parse_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""GitFICommit.parse_path() selftests."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_path'
op|'('
string|'"foo/bar"'
op|')'
op|','
string|'"foo/bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'GitFICommit'
op|'.'
name|'parse_path'
op|'('
string|'"path/with\\n and \\" in it"'
op|')'
op|','
nl|'\n'
string|'\'"path/with\\\\n and \\\\" in it"\''
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"foo//bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"foo/bar/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"/foo/bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"foo/./bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"foo/../bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"foo/bar/."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"foo/bar/.."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"./foo/bar"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'GitFICommit'
op|'.'
name|'parse_path'
op|','
string|'"../foo/bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitFastImport
dedent|''
dedent|''
name|'class'
name|'GitFastImport'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Encapsulate communication with git fast-import."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|','
name|'obj_fetcher'
op|','
name|'last_mark'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up self to communicate with a fast-import process through f."""'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
comment|'# File object where fast-import stream is written'
newline|'\n'
name|'self'
op|'.'
name|'obj_fetcher'
op|'='
name|'obj_fetcher'
comment|'# GitObjectFetcher instance'
newline|'\n'
name|'self'
op|'.'
name|'next_mark'
op|'='
name|'last_mark'
op|'+'
number|'1'
comment|'# Next mark number'
newline|'\n'
name|'self'
op|'.'
name|'refs'
op|'='
name|'set'
op|'('
op|')'
comment|"# Keep track of the refnames we've seen"
newline|'\n'
nl|'\n'
DECL|member|comment
dedent|''
name|'def'
name|'comment'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write the given comment in the fast-import stream."""'
newline|'\n'
name|'assert'
string|'"\\n"'
name|'not'
name|'in'
name|'s'
op|','
string|'"Malformed comment: \'%s\'"'
op|'%'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"# %s\\n"'
op|'%'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'ref'
op|','
name|'commitdata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make a commit on the given ref, with the given GitFICommit.\n\n        Return the mark number identifying this commit.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"""\\\ncommit %(ref)s\nmark :%(mark)i\ncommitter %(name)s <%(email)s> %(timestamp)i %(timezone)s\ndata %(msgLength)i\n%(msg)s\n"""'
op|'%'
op|'{'
nl|'\n'
string|"'ref'"
op|':'
name|'ref'
op|','
nl|'\n'
string|"'mark'"
op|':'
name|'self'
op|'.'
name|'next_mark'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'commitdata'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'email'"
op|':'
name|'commitdata'
op|'.'
name|'email'
op|','
nl|'\n'
string|"'timestamp'"
op|':'
name|'commitdata'
op|'.'
name|'timestamp'
op|','
nl|'\n'
string|"'timezone'"
op|':'
name|'commitdata'
op|'.'
name|'timezone'
op|','
nl|'\n'
string|"'msgLength'"
op|':'
name|'len'
op|'('
name|'commitdata'
op|'.'
name|'message'
op|')'
op|','
nl|'\n'
string|"'msg'"
op|':'
name|'commitdata'
op|'.'
name|'message'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ref'
name|'not'
name|'in'
name|'self'
op|'.'
name|'refs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'refs'
op|'.'
name|'add'
op|'('
name|'ref'
op|')'
newline|'\n'
name|'parent'
op|'='
name|'ref'
op|'+'
string|'"^0"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'obj_fetcher'
op|'.'
name|'get_sha1'
op|'('
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"from %s\\n"'
op|'%'
op|'('
name|'parent'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'op'
name|'in'
name|'commitdata'
op|'.'
name|'pathops'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'" "'
op|'.'
name|'join'
op|'('
name|'op'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'retval'
op|'='
name|'self'
op|'.'
name|'next_mark'
newline|'\n'
name|'self'
op|'.'
name|'next_mark'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|function|blob
dedent|''
name|'def'
name|'blob'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Import the given blob.\n\n        Return the mark number identifying this blob.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"blob\\nmark :%i\\ndata %i\\n%s\\n"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'next_mark'
op|','
name|'len'
op|'('
name|'data'
op|')'
op|','
name|'data'
op|')'
op|')'
newline|'\n'
name|'retval'
op|'='
name|'self'
op|'.'
name|'next_mark'
newline|'\n'
name|'self'
op|'.'
name|'next_mark'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|function|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|','
name|'ref'
op|','
name|'objname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the given ref to point at the given Git object."""'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
string|'"reset %s\\nfrom %s\\n\\n"'
op|'%'
nl|'\n'
op|'('
name|'ref'
op|','
name|'GitFICommit'
op|'.'
name|'parse_objname'
op|'('
name|'objname'
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'ref'
name|'not'
name|'in'
name|'self'
op|'.'
name|'refs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'refs'
op|'.'
name|'add'
op|'('
name|'ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitNotes
dedent|''
dedent|''
dedent|''
name|'class'
name|'GitNotes'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Encapsulate access to Git notes.\n\n    Simulates a dictionary of object name (SHA1) -> Git note mappings.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'notes_ref'
op|','
name|'obj_fetcher'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new Git notes interface, bound to the given notes ref."""'
newline|'\n'
name|'self'
op|'.'
name|'notes_ref'
op|'='
name|'notes_ref'
newline|'\n'
name|'self'
op|'.'
name|'obj_fetcher'
op|'='
name|'obj_fetcher'
comment|'# Used to get objects from repo'
newline|'\n'
name|'self'
op|'.'
name|'imports'
op|'='
op|'['
op|']'
comment|'# list: (objname, note data blob name) tuples'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that self.commit_notes() was called before destruction."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'imports'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'('
string|'"Missing call to self.commit_notes()."'
op|')'
newline|'\n'
name|'error'
op|'('
string|'"%i notes are not committed!"'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'imports'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load
dedent|''
dedent|''
name|'def'
name|'_load'
op|'('
name|'self'
op|','
name|'objname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the note data associated with the given git object.\n\n        The note data is returned in string form. If no note is found\n        for the given object, None is returned.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'self'
op|'.'
name|'obj_fetcher'
op|'.'
name|'open_obj'
op|'('
string|'"%s:%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'notes_ref'
op|','
name|'objname'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'objname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the note contents associated with the given object.\n\n        Raise KeyError if given object has no associated note.\n\n        """'
newline|'\n'
name|'blobdata'
op|'='
name|'self'
op|'.'
name|'_load'
op|'('
name|'objname'
op|')'
newline|'\n'
name|'if'
name|'blobdata'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
string|'"Object \'%s\' has no note"'
op|'%'
op|'('
name|'objname'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'blobdata'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'objname'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the note contents associated with the given object.\n\n        Return given default if given object has no associated note.\n\n        """'
newline|'\n'
name|'blobdata'
op|'='
name|'self'
op|'.'
name|'_load'
op|'('
name|'objname'
op|')'
newline|'\n'
name|'if'
name|'blobdata'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'return'
name|'blobdata'
newline|'\n'
nl|'\n'
DECL|member|import_note
dedent|''
name|'def'
name|'import_note'
op|'('
name|'self'
op|','
name|'objname'
op|','
name|'data'
op|','
name|'gfi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell git fast-import to store data as a note for objname.\n\n        This method uses the given GitFastImport object to create a\n        blob containing the given note data.  Also an entry mapping the\n        given object name to the created blob is stored until\n        commit_notes() is called.\n\n        Note that this method only works if it is later followed by a\n        call to self.commit_notes() (which produces the note commit\n        that refers to the blob produced here).\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'data'
op|'.'
name|'endswith'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'+='
string|'"\\n"'
newline|'\n'
dedent|''
name|'gfi'
op|'.'
name|'comment'
op|'('
string|'"Importing note for object %s"'
op|'%'
op|'('
name|'objname'
op|')'
op|')'
newline|'\n'
name|'mark'
op|'='
name|'gfi'
op|'.'
name|'blob'
op|'('
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'imports'
op|'.'
name|'append'
op|'('
op|'('
name|'objname'
op|','
name|'mark'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit_notes
dedent|''
name|'def'
name|'commit_notes'
op|'('
name|'self'
op|','
name|'gfi'
op|','
name|'author'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Produce a git fast-import note commit for the imported notes.\n\n        This method uses the given GitFastImport object to create a\n        commit on the notes ref, introducing the notes previously\n        submitted to import_note().\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'imports'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'commitdata'
op|'='
name|'GitFICommit'
op|'('
name|'author'
op|'['
number|'0'
op|']'
op|','
name|'author'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
string|'"0000"'
op|','
name|'message'
op|')'
newline|'\n'
name|'for'
name|'objname'
op|','
name|'blobname'
name|'in'
name|'self'
op|'.'
name|'imports'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'isinstance'
op|'('
name|'objname'
op|','
name|'int'
op|')'
name|'and'
name|'objname'
op|'>'
number|'0'
newline|'\n'
name|'assert'
name|'isinstance'
op|'('
name|'blobname'
op|','
name|'int'
op|')'
name|'and'
name|'blobname'
op|'>'
number|'0'
newline|'\n'
name|'commitdata'
op|'.'
name|'note'
op|'('
name|'blobname'
op|','
name|'objname'
op|')'
newline|'\n'
dedent|''
name|'gfi'
op|'.'
name|'commit'
op|'('
name|'self'
op|'.'
name|'notes_ref'
op|','
name|'commitdata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'imports'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitCachedNotes
dedent|''
dedent|''
name|'class'
name|'GitCachedNotes'
op|'('
name|'GitNotes'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Encapsulate access to Git notes (cached version).\n\n    Only use this class if no caching is done at a higher level.\n\n    Simulates a dictionary of object name (SHA1) -> Git note mappings.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'notes_ref'
op|','
name|'obj_fetcher'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up a caching wrapper around GitNotes."""'
newline|'\n'
name|'GitNotes'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'notes_ref'
op|','
name|'obj_fetcher'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache'
op|'='
op|'{'
op|'}'
comment|'# Cache: object name -> note data'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that GitNotes\' destructor is called."""'
newline|'\n'
name|'GitNotes'
op|'.'
name|'__del__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load
dedent|''
name|'def'
name|'_load'
op|'('
name|'self'
op|','
name|'objname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extend GitNotes._load() with a local objname -> note cache."""'
newline|'\n'
name|'if'
name|'objname'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_cache'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache'
op|'['
name|'objname'
op|']'
op|'='
name|'GitNotes'
op|'.'
name|'_load'
op|'('
name|'self'
op|','
name|'objname'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_cache'
op|'['
name|'objname'
op|']'
newline|'\n'
nl|'\n'
DECL|member|import_note
dedent|''
name|'def'
name|'import_note'
op|'('
name|'self'
op|','
name|'objname'
op|','
name|'data'
op|','
name|'gfi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extend GitNotes.import_note() with a local objname -> note cache."""'
newline|'\n'
name|'if'
name|'not'
name|'data'
op|'.'
name|'endswith'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'+='
string|'"\\n"'
newline|'\n'
dedent|''
name|'assert'
name|'objname'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_cache'
newline|'\n'
name|'self'
op|'.'
name|'_cache'
op|'['
name|'objname'
op|']'
op|'='
name|'data'
newline|'\n'
name|'GitNotes'
op|'.'
name|'import_note'
op|'('
name|'self'
op|','
name|'objname'
op|','
name|'data'
op|','
name|'gfi'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
