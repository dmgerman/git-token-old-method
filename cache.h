begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|CACHE_H
end_ifndef
begin_define
DECL|macro|CACHE_H
define|#
directive|define
name|CACHE_H
end_define
begin_include
include|#
directive|include
file|"git-compat-util.h"
end_include
begin_include
include|#
directive|include
include|SHA1_HEADER
end_include
begin_include
include|#
directive|include
file|<zlib.h>
end_include
begin_if
if|#
directive|if
name|ZLIB_VERNUM
operator|<
literal|0x1200
end_if
begin_define
DECL|macro|deflateBound
define|#
directive|define
name|deflateBound
parameter_list|(
name|c
parameter_list|,
name|s
parameter_list|)
value|((s) + (((s) + 7)>> 3) + (((s) + 63)>> 6) + 11)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|DT_UNKNOWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_D_TYPE_IN_DIRENT
argument_list|)
end_if
begin_define
DECL|macro|DTYPE
define|#
directive|define
name|DTYPE
parameter_list|(
name|de
parameter_list|)
value|((de)->d_type)
end_define
begin_else
else|#
directive|else
end_else
begin_undef
DECL|macro|DT_UNKNOWN
undef|#
directive|undef
name|DT_UNKNOWN
end_undef
begin_undef
DECL|macro|DT_DIR
undef|#
directive|undef
name|DT_DIR
end_undef
begin_undef
DECL|macro|DT_REG
undef|#
directive|undef
name|DT_REG
end_undef
begin_undef
DECL|macro|DT_LNK
undef|#
directive|undef
name|DT_LNK
end_undef
begin_define
DECL|macro|DT_UNKNOWN
define|#
directive|define
name|DT_UNKNOWN
value|0
end_define
begin_define
DECL|macro|DT_DIR
define|#
directive|define
name|DT_DIR
value|1
end_define
begin_define
DECL|macro|DT_REG
define|#
directive|define
name|DT_REG
value|2
end_define
begin_define
DECL|macro|DT_LNK
define|#
directive|define
name|DT_LNK
value|3
end_define
begin_define
DECL|macro|DTYPE
define|#
directive|define
name|DTYPE
parameter_list|(
name|de
parameter_list|)
value|DT_UNKNOWN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * A "directory link" is a link to another git directory.  *  * The value 0160000 is not normally a valid mode, and  * also just happens to be S_IFDIR + S_IFLNK  *  * NOTE! We *really* shouldn't depend on the S_IFxxx macros  * always having the same values everywhere. We should use  * our internal git values for these things, and then we can  * translate that to the OS-specific value. It just so  * happens that everybody shares the same bit representation  * in the UNIX world (and apparently wider too..)  */
end_comment
begin_define
DECL|macro|S_IFDIRLNK
define|#
directive|define
name|S_IFDIRLNK
value|0160000
end_define
begin_define
DECL|macro|S_ISDIRLNK
define|#
directive|define
name|S_ISDIRLNK
parameter_list|(
name|m
parameter_list|)
value|(((m)& S_IFMT) == S_IFDIRLNK)
end_define
begin_comment
comment|/*  * Intensive research over the course of many years has shown that  * port 9418 is totally unused by anything else. Or  *  *	Your search - "port 9418" - did not match any documents.  *  * as www.google.com puts it.  *  * This port has been properly assigned for git use by IANA:  * git (Assigned-9418) [I06-050728-0001].  *  *	git  9418/tcp   git pack transfer service  *	git  9418/udp   git pack transfer service  *  * with Linus Torvalds<torvalds@osdl.org> as the point of  * contact. September 2005.  *  * See http://www.iana.org/assignments/port-numbers  */
end_comment
begin_define
DECL|macro|DEFAULT_GIT_PORT
define|#
directive|define
name|DEFAULT_GIT_PORT
value|9418
end_define
begin_comment
comment|/*  * Basic data structures for the directory cache  */
end_comment
begin_define
DECL|macro|CACHE_SIGNATURE
define|#
directive|define
name|CACHE_SIGNATURE
value|0x44495243
end_define
begin_comment
DECL|macro|CACHE_SIGNATURE
comment|/* "DIRC" */
end_comment
begin_struct
DECL|struct|cache_header
struct|struct
name|cache_header
block|{
DECL|member|hdr_signature
name|unsigned
name|int
name|hdr_signature
decl_stmt|;
DECL|member|hdr_version
name|unsigned
name|int
name|hdr_version
decl_stmt|;
DECL|member|hdr_entries
name|unsigned
name|int
name|hdr_entries
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*  * The "cache_time" is just the low 32 bits of the  * time. It doesn't matter if it overflows - we only  * check it for equality in the 32 bits we save.  */
end_comment
begin_struct
DECL|struct|cache_time
struct|struct
name|cache_time
block|{
DECL|member|sec
name|unsigned
name|int
name|sec
decl_stmt|;
DECL|member|nsec
name|unsigned
name|int
name|nsec
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*  * dev/ino/uid/gid/size are also just tracked to the low 32 bits  * Again - this is just a (very strong in practice) heuristic that  * the inode hasn't changed.  *  * We save the fields in big-endian order to allow using the  * index file over NFS transparently.  */
end_comment
begin_struct
DECL|struct|cache_entry
struct|struct
name|cache_entry
block|{
DECL|member|ce_ctime
name|struct
name|cache_time
name|ce_ctime
decl_stmt|;
DECL|member|ce_mtime
name|struct
name|cache_time
name|ce_mtime
decl_stmt|;
DECL|member|ce_dev
name|unsigned
name|int
name|ce_dev
decl_stmt|;
DECL|member|ce_ino
name|unsigned
name|int
name|ce_ino
decl_stmt|;
DECL|member|ce_mode
name|unsigned
name|int
name|ce_mode
decl_stmt|;
DECL|member|ce_uid
name|unsigned
name|int
name|ce_uid
decl_stmt|;
DECL|member|ce_gid
name|unsigned
name|int
name|ce_gid
decl_stmt|;
DECL|member|ce_size
name|unsigned
name|int
name|ce_size
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|ce_flags
name|unsigned
name|short
name|ce_flags
decl_stmt|;
DECL|member|name
name|char
name|name
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
struct|;
end_struct
begin_define
DECL|macro|CE_NAMEMASK
define|#
directive|define
name|CE_NAMEMASK
value|(0x0fff)
end_define
begin_define
DECL|macro|CE_STAGEMASK
define|#
directive|define
name|CE_STAGEMASK
value|(0x3000)
end_define
begin_define
DECL|macro|CE_UPDATE
define|#
directive|define
name|CE_UPDATE
value|(0x4000)
end_define
begin_define
DECL|macro|CE_VALID
define|#
directive|define
name|CE_VALID
value|(0x8000)
end_define
begin_define
DECL|macro|CE_STAGESHIFT
define|#
directive|define
name|CE_STAGESHIFT
value|12
end_define
begin_define
DECL|macro|create_ce_flags
define|#
directive|define
name|create_ce_flags
parameter_list|(
name|len
parameter_list|,
name|stage
parameter_list|)
value|htons((len) | ((stage)<< CE_STAGESHIFT))
end_define
begin_define
DECL|macro|ce_namelen
define|#
directive|define
name|ce_namelen
parameter_list|(
name|ce
parameter_list|)
value|(CE_NAMEMASK& ntohs((ce)->ce_flags))
end_define
begin_define
DECL|macro|ce_size
define|#
directive|define
name|ce_size
parameter_list|(
name|ce
parameter_list|)
value|cache_entry_size(ce_namelen(ce))
end_define
begin_define
DECL|macro|ce_stage
define|#
directive|define
name|ce_stage
parameter_list|(
name|ce
parameter_list|)
value|((CE_STAGEMASK& ntohs((ce)->ce_flags))>> CE_STAGESHIFT)
end_define
begin_define
DECL|macro|ce_permissions
define|#
directive|define
name|ce_permissions
parameter_list|(
name|mode
parameter_list|)
value|(((mode)& 0100) ? 0755 : 0644)
end_define
begin_function
DECL|function|create_ce_mode
specifier|static
specifier|inline
name|unsigned
name|int
name|create_ce_mode
parameter_list|(
name|unsigned
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|S_ISLNK
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|htonl
argument_list|(
name|S_IFLNK
argument_list|)
return|;
if|if
condition|(
name|S_ISDIR
argument_list|(
name|mode
argument_list|)
operator|||
name|S_ISDIRLNK
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|htonl
argument_list|(
name|S_IFDIRLNK
argument_list|)
return|;
return|return
name|htonl
argument_list|(
name|S_IFREG
operator||
name|ce_permissions
argument_list|(
name|mode
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ce_mode_from_stat
specifier|static
specifier|inline
name|unsigned
name|int
name|ce_mode_from_stat
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|unsigned
name|int
name|mode
parameter_list|)
block|{
specifier|extern
name|int
name|trust_executable_bit
decl_stmt|,
name|has_symlinks
decl_stmt|;
if|if
condition|(
operator|!
name|has_symlinks
operator|&&
name|S_ISREG
argument_list|(
name|mode
argument_list|)
operator|&&
name|ce
operator|&&
name|S_ISLNK
argument_list|(
name|ntohl
argument_list|(
name|ce
operator|->
name|ce_mode
argument_list|)
argument_list|)
condition|)
return|return
name|ce
operator|->
name|ce_mode
return|;
if|if
condition|(
operator|!
name|trust_executable_bit
operator|&&
name|S_ISREG
argument_list|(
name|mode
argument_list|)
condition|)
block|{
if|if
condition|(
name|ce
operator|&&
name|S_ISREG
argument_list|(
name|ntohl
argument_list|(
name|ce
operator|->
name|ce_mode
argument_list|)
argument_list|)
condition|)
return|return
name|ce
operator|->
name|ce_mode
return|;
return|return
name|create_ce_mode
argument_list|(
literal|0666
argument_list|)
return|;
block|}
return|return
name|create_ce_mode
argument_list|(
name|mode
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|canon_mode
define|#
directive|define
name|canon_mode
parameter_list|(
name|mode
parameter_list|)
define|\
value|(S_ISREG(mode) ? (S_IFREG | ce_permissions(mode)) : \ 	S_ISLNK(mode) ? S_IFLNK : S_ISDIR(mode) ? S_IFDIR : S_IFDIRLNK)
end_define
begin_define
DECL|macro|cache_entry_size
define|#
directive|define
name|cache_entry_size
parameter_list|(
name|len
parameter_list|)
value|((offsetof(struct cache_entry,name) + (len) + 8)& ~7)
end_define
begin_struct
DECL|struct|index_state
struct|struct
name|index_state
block|{
DECL|member|cache
name|struct
name|cache_entry
modifier|*
modifier|*
name|cache
decl_stmt|;
DECL|member|cache_nr
DECL|member|cache_alloc
DECL|member|cache_changed
name|unsigned
name|int
name|cache_nr
decl_stmt|,
name|cache_alloc
decl_stmt|,
name|cache_changed
decl_stmt|;
DECL|member|cache_tree
name|struct
name|cache_tree
modifier|*
name|cache_tree
decl_stmt|;
DECL|member|timestamp
name|time_t
name|timestamp
decl_stmt|;
DECL|member|mmap
name|void
modifier|*
name|mmap
decl_stmt|;
DECL|member|mmap_size
name|size_t
name|mmap_size
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|struct
name|index_state
name|the_index
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|NO_THE_INDEX_COMPATIBILITY_MACROS
end_ifndef
begin_define
DECL|macro|active_cache
define|#
directive|define
name|active_cache
value|(the_index.cache)
end_define
begin_define
DECL|macro|active_nr
define|#
directive|define
name|active_nr
value|(the_index.cache_nr)
end_define
begin_define
DECL|macro|active_alloc
define|#
directive|define
name|active_alloc
value|(the_index.cache_alloc)
end_define
begin_define
DECL|macro|active_cache_changed
define|#
directive|define
name|active_cache_changed
value|(the_index.cache_changed)
end_define
begin_define
DECL|macro|active_cache_tree
define|#
directive|define
name|active_cache_tree
value|(the_index.cache_tree)
end_define
begin_define
DECL|macro|read_cache
define|#
directive|define
name|read_cache
parameter_list|()
value|read_index(&the_index)
end_define
begin_define
DECL|macro|read_cache_from
define|#
directive|define
name|read_cache_from
parameter_list|(
name|path
parameter_list|)
value|read_index_from(&the_index, (path))
end_define
begin_define
DECL|macro|write_cache
define|#
directive|define
name|write_cache
parameter_list|(
name|newfd
parameter_list|,
name|cache
parameter_list|,
name|entries
parameter_list|)
value|write_index(&the_index, (newfd))
end_define
begin_define
DECL|macro|discard_cache
define|#
directive|define
name|discard_cache
parameter_list|()
value|discard_index(&the_index)
end_define
begin_define
DECL|macro|cache_name_pos
define|#
directive|define
name|cache_name_pos
parameter_list|(
name|name
parameter_list|,
name|namelen
parameter_list|)
value|index_name_pos(&the_index,(name),(namelen))
end_define
begin_define
DECL|macro|add_cache_entry
define|#
directive|define
name|add_cache_entry
parameter_list|(
name|ce
parameter_list|,
name|option
parameter_list|)
value|add_index_entry(&the_index, (ce), (option))
end_define
begin_define
DECL|macro|remove_cache_entry_at
define|#
directive|define
name|remove_cache_entry_at
parameter_list|(
name|pos
parameter_list|)
value|remove_index_entry_at(&the_index, (pos))
end_define
begin_define
DECL|macro|remove_file_from_cache
define|#
directive|define
name|remove_file_from_cache
parameter_list|(
name|path
parameter_list|)
value|remove_file_from_index(&the_index, (path))
end_define
begin_define
DECL|macro|add_file_to_cache
define|#
directive|define
name|add_file_to_cache
parameter_list|(
name|path
parameter_list|,
name|verbose
parameter_list|)
value|add_file_to_index(&the_index, (path), (verbose))
end_define
begin_define
DECL|macro|refresh_cache
define|#
directive|define
name|refresh_cache
parameter_list|(
name|flags
parameter_list|)
value|refresh_index(&the_index, flags)
end_define
begin_define
DECL|macro|ce_match_stat
define|#
directive|define
name|ce_match_stat
parameter_list|(
name|ce
parameter_list|,
name|st
parameter_list|,
name|really
parameter_list|)
value|ie_match_stat(&the_index, (ce), (st), (really))
end_define
begin_define
DECL|macro|ce_modified
define|#
directive|define
name|ce_modified
parameter_list|(
name|ce
parameter_list|,
name|st
parameter_list|,
name|really
parameter_list|)
value|ie_modified(&the_index, (ce), (st), (really))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_enum
DECL|enum|object_type
enum|enum
name|object_type
block|{
DECL|enumerator|OBJ_BAD
name|OBJ_BAD
init|=
operator|-
literal|1
block|,
DECL|enumerator|OBJ_NONE
name|OBJ_NONE
init|=
literal|0
block|,
DECL|enumerator|OBJ_COMMIT
name|OBJ_COMMIT
init|=
literal|1
block|,
DECL|enumerator|OBJ_TREE
name|OBJ_TREE
init|=
literal|2
block|,
DECL|enumerator|OBJ_BLOB
name|OBJ_BLOB
init|=
literal|3
block|,
DECL|enumerator|OBJ_TAG
name|OBJ_TAG
init|=
literal|4
block|,
comment|/* 5 for future expansion */
DECL|enumerator|OBJ_OFS_DELTA
name|OBJ_OFS_DELTA
init|=
literal|6
block|,
DECL|enumerator|OBJ_REF_DELTA
name|OBJ_REF_DELTA
init|=
literal|7
block|,
DECL|enumerator|OBJ_MAX
name|OBJ_MAX
block|, }
enum|;
end_enum
begin_define
DECL|macro|GIT_DIR_ENVIRONMENT
define|#
directive|define
name|GIT_DIR_ENVIRONMENT
value|"GIT_DIR"
end_define
begin_define
DECL|macro|DEFAULT_GIT_DIR_ENVIRONMENT
define|#
directive|define
name|DEFAULT_GIT_DIR_ENVIRONMENT
value|".git"
end_define
begin_define
DECL|macro|DB_ENVIRONMENT
define|#
directive|define
name|DB_ENVIRONMENT
value|"GIT_OBJECT_DIRECTORY"
end_define
begin_define
DECL|macro|INDEX_ENVIRONMENT
define|#
directive|define
name|INDEX_ENVIRONMENT
value|"GIT_INDEX_FILE"
end_define
begin_define
DECL|macro|GRAFT_ENVIRONMENT
define|#
directive|define
name|GRAFT_ENVIRONMENT
value|"GIT_GRAFT_FILE"
end_define
begin_define
DECL|macro|TEMPLATE_DIR_ENVIRONMENT
define|#
directive|define
name|TEMPLATE_DIR_ENVIRONMENT
value|"GIT_TEMPLATE_DIR"
end_define
begin_define
DECL|macro|CONFIG_ENVIRONMENT
define|#
directive|define
name|CONFIG_ENVIRONMENT
value|"GIT_CONFIG"
end_define
begin_define
DECL|macro|CONFIG_LOCAL_ENVIRONMENT
define|#
directive|define
name|CONFIG_LOCAL_ENVIRONMENT
value|"GIT_CONFIG_LOCAL"
end_define
begin_define
DECL|macro|EXEC_PATH_ENVIRONMENT
define|#
directive|define
name|EXEC_PATH_ENVIRONMENT
value|"GIT_EXEC_PATH"
end_define
begin_define
DECL|macro|GITATTRIBUTES_FILE
define|#
directive|define
name|GITATTRIBUTES_FILE
value|".gitattributes"
end_define
begin_define
DECL|macro|INFOATTRIBUTES_FILE
define|#
directive|define
name|INFOATTRIBUTES_FILE
value|"info/attributes"
end_define
begin_define
DECL|macro|ATTRIBUTE_MACRO_PREFIX
define|#
directive|define
name|ATTRIBUTE_MACRO_PREFIX
value|"[attr]"
end_define
begin_decl_stmt
specifier|extern
name|int
name|is_bare_repository_cfg
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|is_bare_repository
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|is_inside_git_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|get_git_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_object_directory
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_refs_directory
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_index_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_graft_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|ALTERNATE_DB_ENVIRONMENT
define|#
directive|define
name|ALTERNATE_DB_ENVIRONMENT
value|"GIT_ALTERNATE_OBJECT_DIRECTORIES"
end_define
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
modifier|*
name|get_pathspec
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|setup_git_directory_gently
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|setup_git_directory
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|prefix_path
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|prefix_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|verify_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|verify_non_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|alloc_nr
define|#
directive|define
name|alloc_nr
parameter_list|(
name|x
parameter_list|)
value|(((x)+16)*3/2)
end_define
begin_comment
comment|/* Initialize and use the cache information */
end_comment
begin_function_decl
specifier|extern
name|int
name|read_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_index_from
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|int
name|newfd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|discard_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|verify_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_name_pos
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|ADD_CACHE_OK_TO_ADD
define|#
directive|define
name|ADD_CACHE_OK_TO_ADD
value|1
end_define
begin_comment
DECL|macro|ADD_CACHE_OK_TO_ADD
comment|/* Ok to add */
end_comment
begin_define
DECL|macro|ADD_CACHE_OK_TO_REPLACE
define|#
directive|define
name|ADD_CACHE_OK_TO_REPLACE
value|2
end_define
begin_comment
DECL|macro|ADD_CACHE_OK_TO_REPLACE
comment|/* Ok to replace file/directory */
end_comment
begin_define
DECL|macro|ADD_CACHE_SKIP_DFCHECK
define|#
directive|define
name|ADD_CACHE_SKIP_DFCHECK
value|4
end_define
begin_comment
DECL|macro|ADD_CACHE_SKIP_DFCHECK
comment|/* Ok to skip DF conflict checks */
end_comment
begin_function_decl
specifier|extern
name|int
name|add_index_entry
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|int
name|option
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|cache_entry
modifier|*
name|refresh_cache_entry
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|int
name|really
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|remove_index_entry_at
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|remove_file_from_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|add_file_to_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|verbose
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ce_same_name
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|a
parameter_list|,
name|struct
name|cache_entry
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ie_match_stat
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|struct
name|cache_entry
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ie_modified
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|struct
name|cache_entry
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ce_path_match
parameter_list|(
specifier|const
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_fd
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|fd
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|,
name|int
name|write_object
parameter_list|,
name|enum
name|object_type
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_pipe
parameter_list|(
name|int
name|fd
parameter_list|,
name|char
modifier|*
modifier|*
name|return_buf
parameter_list|,
name|unsigned
name|long
modifier|*
name|return_size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_pipe
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|int
name|write_object
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_path
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|,
name|int
name|write_object
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|fill_stat_cache_info
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|REFRESH_REALLY
define|#
directive|define
name|REFRESH_REALLY
value|0x0001
end_define
begin_comment
DECL|macro|REFRESH_REALLY
comment|/* ignore_valid */
end_comment
begin_define
DECL|macro|REFRESH_UNMERGED
define|#
directive|define
name|REFRESH_UNMERGED
value|0x0002
end_define
begin_comment
DECL|macro|REFRESH_UNMERGED
comment|/* allow unmerged */
end_comment
begin_define
DECL|macro|REFRESH_QUIET
define|#
directive|define
name|REFRESH_QUIET
value|0x0004
end_define
begin_comment
DECL|macro|REFRESH_QUIET
comment|/* be quiet about it */
end_comment
begin_define
DECL|macro|REFRESH_IGNORE_MISSING
define|#
directive|define
name|REFRESH_IGNORE_MISSING
value|0x0008
end_define
begin_comment
DECL|macro|REFRESH_IGNORE_MISSING
comment|/* ignore non-existent */
end_comment
begin_function_decl
specifier|extern
name|int
name|refresh_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|lock_file
struct|struct
name|lock_file
block|{
DECL|member|next
name|struct
name|lock_file
modifier|*
name|next
decl_stmt|;
DECL|member|owner
name|pid_t
name|owner
decl_stmt|;
DECL|member|on_list
name|char
name|on_list
decl_stmt|;
DECL|member|filename
name|char
name|filename
index|[
name|PATH_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|int
name|hold_lock_file_for_update
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|commit_lock_file
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hold_locked_index
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|commit_locked_index
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|set_alternate_index_output
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|rollback_lock_file
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|delete_ref
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Environment bits from configuration mechanism */
end_comment
begin_decl_stmt
specifier|extern
name|int
name|use_legacy_headers
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|trust_executable_bit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|has_symlinks
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|assume_unchanged
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|prefer_symlink_refs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|log_all_ref_updates
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|warn_ambiguous_refs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|shared_repository
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|apply_default_whitespace
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|zlib_compression_level
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|size_t
name|packed_git_window_size
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|size_t
name|packed_git_limit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|size_t
name|delta_base_cache_limit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|auto_crlf
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|GIT_REPO_VERSION
define|#
directive|define
name|GIT_REPO_VERSION
value|0
end_define
begin_decl_stmt
specifier|extern
name|int
name|repository_format_version
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|check_repository_format
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|MTIME_CHANGED
define|#
directive|define
name|MTIME_CHANGED
value|0x0001
end_define
begin_define
DECL|macro|CTIME_CHANGED
define|#
directive|define
name|CTIME_CHANGED
value|0x0002
end_define
begin_define
DECL|macro|OWNER_CHANGED
define|#
directive|define
name|OWNER_CHANGED
value|0x0004
end_define
begin_define
DECL|macro|MODE_CHANGED
define|#
directive|define
name|MODE_CHANGED
value|0x0008
end_define
begin_define
DECL|macro|INODE_CHANGED
define|#
directive|define
name|INODE_CHANGED
value|0x0010
end_define
begin_define
DECL|macro|DATA_CHANGED
define|#
directive|define
name|DATA_CHANGED
value|0x0020
end_define
begin_define
DECL|macro|TYPE_CHANGED
define|#
directive|define
name|TYPE_CHANGED
value|0x0040
end_define
begin_comment
comment|/* Return a statically allocated filename matching the sha1 signature */
end_comment
begin_function_decl
specifier|extern
name|char
modifier|*
name|mkpath
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|git_path
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_file_name
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_pack_name
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_pack_index_name
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|find_unique_abbrev
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|unsigned
name|char
name|null_sha1
index|[
literal|20
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|is_null_sha1
specifier|static
specifier|inline
name|int
name|is_null_sha1
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
return|return
operator|!
name|memcmp
argument_list|(
name|sha1
argument_list|,
name|null_sha1
argument_list|,
literal|20
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hashcmp
specifier|static
specifier|inline
name|int
name|hashcmp
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha2
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
name|sha1
argument_list|,
name|sha2
argument_list|,
literal|20
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hashcpy
specifier|static
specifier|inline
name|void
name|hashcpy
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha_dst
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha_src
parameter_list|)
block|{
name|memcpy
argument_list|(
name|sha_dst
argument_list|,
name|sha_src
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hashclr
specifier|static
specifier|inline
name|void
name|hashclr
parameter_list|(
name|unsigned
name|char
modifier|*
name|hash
parameter_list|)
block|{
name|memset
argument_list|(
name|hash
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|int
name|git_mkstemp
parameter_list|(
name|char
modifier|*
name|path
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|template
parameter_list|)
function_decl|;
end_function_decl
begin_enum
DECL|enum|sharedrepo
enum|enum
name|sharedrepo
block|{
DECL|enumerator|PERM_UMASK
name|PERM_UMASK
init|=
literal|0
block|,
DECL|enumerator|PERM_GROUP
name|PERM_GROUP
block|,
DECL|enumerator|PERM_EVERYBODY
name|PERM_EVERYBODY
block|}
enum|;
end_enum
begin_function_decl
name|int
name|git_config_perm
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|adjust_shared_perm
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|safe_create_leading_directories
parameter_list|(
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|enter_repo
parameter_list|(
name|char
modifier|*
name|path
parameter_list|,
name|int
name|strict
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Read and unpack a sha1 file into memory, write memory to a sha1 file */
end_comment
begin_function_decl
specifier|extern
name|int
name|sha1_object_info
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|read_sha1_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|enum
name|object_type
modifier|*
name|type
parameter_list|,
name|unsigned
name|long
modifier|*
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hash_sha1_file
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_sha1_file
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|return_sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|pretend_sha1_file
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|enum
name|object_type
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|check_sha1_signature
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_sha1_from_fd
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|fd
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|size_t
name|bufsize
parameter_list|,
name|size_t
modifier|*
name|bufposn
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_sha1_to_fd
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|move_temp_to_file
parameter_list|(
specifier|const
name|char
modifier|*
name|tmpfile
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_sha1_pack
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|ignore
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_sha1_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|map_sha1_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|legacy_loose_object
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_pack_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_pack_index
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
name|signed
name|char
name|hexval_table
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hexval
specifier|static
specifier|inline
name|unsigned
name|int
name|hexval
parameter_list|(
name|unsigned
name|int
name|c
parameter_list|)
block|{
return|return
name|hexval_table
index|[
name|c
index|]
return|;
block|}
end_function
begin_comment
comment|/* Convert to/from hex/sha1 representation */
end_comment
begin_define
DECL|macro|MINIMUM_ABBREV
define|#
directive|define
name|MINIMUM_ABBREV
value|4
end_define
begin_define
DECL|macro|DEFAULT_ABBREV
define|#
directive|define
name|DEFAULT_ABBREV
value|7
end_define
begin_function_decl
specifier|extern
name|int
name|get_sha1
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_hex
parameter_list|(
specifier|const
name|char
modifier|*
name|hex
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_to_hex
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* static buffer result! */
end_comment
begin_function_decl
specifier|extern
name|int
name|read_ref
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|resolve_ref
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|dwim_ref
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|char
modifier|*
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|dwim_log
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|char
modifier|*
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|create_symref
parameter_list|(
specifier|const
name|char
modifier|*
name|ref
parameter_list|,
specifier|const
name|char
modifier|*
name|refs_heads_master
parameter_list|,
specifier|const
name|char
modifier|*
name|logmsg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|validate_headref
parameter_list|(
specifier|const
name|char
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|base_name_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|name1
parameter_list|,
name|int
name|len1
parameter_list|,
name|int
name|mode1
parameter_list|,
specifier|const
name|char
modifier|*
name|name2
parameter_list|,
name|int
name|len2
parameter_list|,
name|int
name|mode2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|cache_name_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|name1
parameter_list|,
name|int
name|len1
parameter_list|,
specifier|const
name|char
modifier|*
name|name2
parameter_list|,
name|int
name|len2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|read_object_with_reference
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|required_type
parameter_list|,
name|unsigned
name|long
modifier|*
name|size
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1_ret
parameter_list|)
function_decl|;
end_function_decl
begin_enum
DECL|enum|date_mode
DECL|enumerator|DATE_NORMAL
DECL|enumerator|DATE_RELATIVE
DECL|enumerator|DATE_SHORT
enum|enum
name|date_mode
block|{
name|DATE_NORMAL
init|=
literal|0
block|,
name|DATE_RELATIVE
block|,
name|DATE_SHORT
block|}
enum|;
end_enum
begin_function_decl
specifier|const
name|char
modifier|*
name|show_date
parameter_list|(
name|unsigned
name|long
name|time
parameter_list|,
name|int
name|timezone
parameter_list|,
name|enum
name|date_mode
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|show_rfc2822_date
parameter_list|(
name|unsigned
name|long
name|time
parameter_list|,
name|int
name|timezone
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|parse_date
parameter_list|(
specifier|const
name|char
modifier|*
name|date
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsize
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|datestamp
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsize
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|unsigned
name|long
name|approxidate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_author_info
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_committer_info
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|fmt_ident
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|email
parameter_list|,
specifier|const
name|char
modifier|*
name|date_str
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|checkout
struct|struct
name|checkout
block|{
DECL|member|base_dir
specifier|const
name|char
modifier|*
name|base_dir
decl_stmt|;
DECL|member|base_dir_len
name|int
name|base_dir_len
decl_stmt|;
DECL|member|force
name|unsigned
name|force
range|:
literal|1
decl_stmt|,
DECL|member|quiet
name|quiet
range|:
literal|1
decl_stmt|,
DECL|member|not_new
name|not_new
range|:
literal|1
decl_stmt|,
DECL|member|refresh_cache
name|refresh_cache
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|int
name|checkout_entry
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|struct
name|checkout
modifier|*
name|state
parameter_list|,
name|char
modifier|*
name|topath
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|alternate_object_database
specifier|extern
struct|struct
name|alternate_object_database
block|{
DECL|member|next
name|struct
name|alternate_object_database
modifier|*
name|next
decl_stmt|;
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|base
name|char
name|base
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
modifier|*
name|alt_odb_list
struct|;
end_struct
begin_function_decl
specifier|extern
name|void
name|prepare_alt_odb
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|pack_window
struct|struct
name|pack_window
block|{
DECL|member|next
name|struct
name|pack_window
modifier|*
name|next
decl_stmt|;
DECL|member|base
name|unsigned
name|char
modifier|*
name|base
decl_stmt|;
DECL|member|offset
name|off_t
name|offset
decl_stmt|;
DECL|member|len
name|size_t
name|len
decl_stmt|;
DECL|member|last_used
name|unsigned
name|int
name|last_used
decl_stmt|;
DECL|member|inuse_cnt
name|unsigned
name|int
name|inuse_cnt
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|packed_git
specifier|extern
struct|struct
name|packed_git
block|{
DECL|member|next
name|struct
name|packed_git
modifier|*
name|next
decl_stmt|;
DECL|member|windows
name|struct
name|pack_window
modifier|*
name|windows
decl_stmt|;
DECL|member|pack_size
name|off_t
name|pack_size
decl_stmt|;
DECL|member|index_data
specifier|const
name|void
modifier|*
name|index_data
decl_stmt|;
DECL|member|index_size
name|size_t
name|index_size
decl_stmt|;
DECL|member|num_objects
name|uint32_t
name|num_objects
decl_stmt|;
DECL|member|index_version
name|int
name|index_version
decl_stmt|;
DECL|member|mtime
name|time_t
name|mtime
decl_stmt|;
DECL|member|pack_fd
name|int
name|pack_fd
decl_stmt|;
DECL|member|pack_local
name|int
name|pack_local
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
comment|/* something like ".git/objects/pack/xxxxx.pack" */
DECL|member|pack_name
name|char
name|pack_name
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
modifier|*
name|packed_git
struct|;
end_struct
begin_struct
DECL|struct|pack_entry
struct|struct
name|pack_entry
block|{
DECL|member|offset
name|off_t
name|offset
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|p
name|struct
name|packed_git
modifier|*
name|p
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|ref
struct|struct
name|ref
block|{
DECL|member|next
name|struct
name|ref
modifier|*
name|next
decl_stmt|;
DECL|member|old_sha1
name|unsigned
name|char
name|old_sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|new_sha1
name|unsigned
name|char
name|new_sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|force
name|unsigned
name|char
name|force
decl_stmt|;
DECL|member|peer_ref
name|struct
name|ref
modifier|*
name|peer_ref
decl_stmt|;
comment|/* when renaming */
DECL|member|name
name|char
name|name
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
struct|;
end_struct
begin_define
DECL|macro|REF_NORMAL
define|#
directive|define
name|REF_NORMAL
value|(1u<< 0)
end_define
begin_define
DECL|macro|REF_HEADS
define|#
directive|define
name|REF_HEADS
value|(1u<< 1)
end_define
begin_define
DECL|macro|REF_TAGS
define|#
directive|define
name|REF_TAGS
value|(1u<< 2)
end_define
begin_function_decl
specifier|extern
name|pid_t
name|git_connect
parameter_list|(
name|int
name|fd
index|[
literal|2
index|]
parameter_list|,
name|char
modifier|*
name|url
parameter_list|,
specifier|const
name|char
modifier|*
name|prog
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|finish_connect
parameter_list|(
name|pid_t
name|pid
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|path_match
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|nr
parameter_list|,
name|char
modifier|*
modifier|*
name|match
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|match_refs
parameter_list|(
name|struct
name|ref
modifier|*
name|src
parameter_list|,
name|struct
name|ref
modifier|*
name|dst
parameter_list|,
name|struct
name|ref
modifier|*
modifier|*
modifier|*
name|dst_tail
parameter_list|,
name|int
name|nr_refspec
parameter_list|,
name|char
modifier|*
modifier|*
name|refspec
parameter_list|,
name|int
name|all
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_ack
parameter_list|(
name|int
name|fd
parameter_list|,
name|unsigned
name|char
modifier|*
name|result_sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|ref
modifier|*
modifier|*
name|get_remote_heads
parameter_list|(
name|int
name|in
parameter_list|,
name|struct
name|ref
modifier|*
modifier|*
name|list
parameter_list|,
name|int
name|nr_match
parameter_list|,
name|char
modifier|*
modifier|*
name|match
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|server_supports
parameter_list|(
specifier|const
name|char
modifier|*
name|feature
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|parse_pack_index
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|parse_pack_index_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|idx_path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|prepare_packed_git
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|reprepare_packed_git
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|install_packed_git
parameter_list|(
name|struct
name|packed_git
modifier|*
name|pack
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|find_sha1_pack
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|struct
name|packed_git
modifier|*
name|packs
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|pack_report
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|char
modifier|*
name|use_pack
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|,
name|off_t
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|unuse_pack
parameter_list|(
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|add_packed_git
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|unsigned
name|char
modifier|*
name|nth_packed_object_sha1
parameter_list|(
specifier|const
name|struct
name|packed_git
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|off_t
name|find_pack_entry_one
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|struct
name|packed_git
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|unpack_entry
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|off_t
parameter_list|,
name|enum
name|object_type
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|long
name|unpack_object_header_gently
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
name|enum
name|object_type
modifier|*
name|type
parameter_list|,
name|unsigned
name|long
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|long
name|get_size_from_delta
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|,
name|off_t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|packed_object_info_detail
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|off_t
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Dumb servers support */
end_comment
begin_function_decl
specifier|extern
name|int
name|update_server_info
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|typedef|config_fn_t
typedef|typedef
name|int
function_decl|(
modifier|*
name|config_fn_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
specifier|extern
name|int
name|git_default_config
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_from_file
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config
parameter_list|(
name|config_fn_t
name|fn
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_int
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_bool
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_set
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_set_multivar
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_rename_section
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|check_repository_format_version
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|MAX_GITNAME
define|#
directive|define
name|MAX_GITNAME
value|(1000)
end_define
begin_decl_stmt
specifier|extern
name|char
name|git_default_email
index|[
name|MAX_GITNAME
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|char
name|git_default_name
index|[
name|MAX_GITNAME
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_commit_encoding
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_log_output_encoding
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|copy_fd
parameter_list|(
name|int
name|ifd
parameter_list|,
name|int
name|ofd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_in_full
parameter_list|(
name|int
name|fd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_in_full
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|write_or_die
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_or_whine
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_or_whine_pipe
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* pager.c */
end_comment
begin_function_decl
specifier|extern
name|void
name|setup_pager
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
name|int
name|pager_in_use
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|pager_use_color
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* base85 */
end_comment
begin_function_decl
name|int
name|decode_85
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|line
parameter_list|,
name|int
name|linelen
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|encode_85
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|bytes
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* alloc.c */
end_comment
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_blob_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_tree_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_commit_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_tag_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_object_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|alloc_report
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* trace.c */
end_comment
begin_function_decl
specifier|extern
name|int
name|nfasprintf
parameter_list|(
name|char
modifier|*
modifier|*
name|str
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|nfvasprintf
parameter_list|(
name|char
modifier|*
modifier|*
name|str
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|va_list
name|va
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|trace_printf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|trace_argv_printf
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|argv
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* convert.c */
end_comment
begin_function_decl
specifier|extern
name|char
modifier|*
name|convert_to_git
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|unsigned
name|long
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|convert_to_working_tree
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|unsigned
name|long
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* match-trees.c */
end_comment
begin_function_decl
name|void
name|shift_tree
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* CACHE_H */
end_comment
end_unit
