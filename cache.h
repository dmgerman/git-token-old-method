begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|CACHE_H
end_ifndef
begin_define
DECL|macro|CACHE_H
define|#
directive|define
name|CACHE_H
end_define
begin_include
include|#
directive|include
file|"git-compat-util.h"
end_include
begin_include
include|#
directive|include
file|"strbuf.h"
end_include
begin_include
include|#
directive|include
file|"hash.h"
end_include
begin_include
include|#
directive|include
file|"advice.h"
end_include
begin_include
include|#
directive|include
file|"gettext.h"
end_include
begin_include
include|#
directive|include
file|"convert.h"
end_include
begin_include
include|#
directive|include
include|SHA1_HEADER
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|git_SHA_CTX
end_ifndef
begin_define
DECL|macro|git_SHA_CTX
define|#
directive|define
name|git_SHA_CTX
value|SHA_CTX
end_define
begin_define
DECL|macro|git_SHA1_Init
define|#
directive|define
name|git_SHA1_Init
value|SHA1_Init
end_define
begin_define
DECL|macro|git_SHA1_Update
define|#
directive|define
name|git_SHA1_Update
value|SHA1_Update
end_define
begin_define
DECL|macro|git_SHA1_Final
define|#
directive|define
name|git_SHA1_Final
value|SHA1_Final
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<zlib.h>
end_include
begin_typedef
DECL|struct|git_zstream
typedef|typedef
struct|struct
name|git_zstream
block|{
DECL|member|z
name|z_stream
name|z
decl_stmt|;
DECL|member|avail_in
name|unsigned
name|long
name|avail_in
decl_stmt|;
DECL|member|avail_out
name|unsigned
name|long
name|avail_out
decl_stmt|;
DECL|member|total_in
name|unsigned
name|long
name|total_in
decl_stmt|;
DECL|member|total_out
name|unsigned
name|long
name|total_out
decl_stmt|;
DECL|member|next_in
name|unsigned
name|char
modifier|*
name|next_in
decl_stmt|;
DECL|member|next_out
name|unsigned
name|char
modifier|*
name|next_out
decl_stmt|;
block|}
DECL|typedef|git_zstream
name|git_zstream
typedef|;
end_typedef
begin_function_decl
name|void
name|git_inflate_init
parameter_list|(
name|git_zstream
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|git_inflate_init_gzip_only
parameter_list|(
name|git_zstream
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|git_inflate_end
parameter_list|(
name|git_zstream
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|git_inflate
parameter_list|(
name|git_zstream
modifier|*
parameter_list|,
name|int
name|flush
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|git_deflate_init
parameter_list|(
name|git_zstream
modifier|*
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|git_deflate_init_gzip
parameter_list|(
name|git_zstream
modifier|*
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|git_deflate_init_raw
parameter_list|(
name|git_zstream
modifier|*
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|git_deflate_end
parameter_list|(
name|git_zstream
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|git_deflate_abort
parameter_list|(
name|git_zstream
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|git_deflate_end_gently
parameter_list|(
name|git_zstream
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|git_deflate
parameter_list|(
name|git_zstream
modifier|*
parameter_list|,
name|int
name|flush
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|unsigned
name|long
name|git_deflate_bound
parameter_list|(
name|git_zstream
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|defined
argument_list|(
name|DT_UNKNOWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_D_TYPE_IN_DIRENT
argument_list|)
end_if
begin_define
DECL|macro|DTYPE
define|#
directive|define
name|DTYPE
parameter_list|(
name|de
parameter_list|)
value|((de)->d_type)
end_define
begin_else
else|#
directive|else
end_else
begin_undef
DECL|macro|DT_UNKNOWN
undef|#
directive|undef
name|DT_UNKNOWN
end_undef
begin_undef
DECL|macro|DT_DIR
undef|#
directive|undef
name|DT_DIR
end_undef
begin_undef
DECL|macro|DT_REG
undef|#
directive|undef
name|DT_REG
end_undef
begin_undef
DECL|macro|DT_LNK
undef|#
directive|undef
name|DT_LNK
end_undef
begin_define
DECL|macro|DT_UNKNOWN
define|#
directive|define
name|DT_UNKNOWN
value|0
end_define
begin_define
DECL|macro|DT_DIR
define|#
directive|define
name|DT_DIR
value|1
end_define
begin_define
DECL|macro|DT_REG
define|#
directive|define
name|DT_REG
value|2
end_define
begin_define
DECL|macro|DT_LNK
define|#
directive|define
name|DT_LNK
value|3
end_define
begin_define
DECL|macro|DTYPE
define|#
directive|define
name|DTYPE
parameter_list|(
name|de
parameter_list|)
value|DT_UNKNOWN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* unknown mode (impossible combination S_IFIFO|S_IFCHR) */
end_comment
begin_define
DECL|macro|S_IFINVALID
define|#
directive|define
name|S_IFINVALID
value|0030000
end_define
begin_comment
comment|/*  * A "directory link" is a link to another git directory.  *  * The value 0160000 is not normally a valid mode, and  * also just happens to be S_IFDIR + S_IFLNK  *  * NOTE! We *really* shouldn't depend on the S_IFxxx macros  * always having the same values everywhere. We should use  * our internal git values for these things, and then we can  * translate that to the OS-specific value. It just so  * happens that everybody shares the same bit representation  * in the UNIX world (and apparently wider too..)  */
end_comment
begin_define
DECL|macro|S_IFGITLINK
define|#
directive|define
name|S_IFGITLINK
value|0160000
end_define
begin_define
DECL|macro|S_ISGITLINK
define|#
directive|define
name|S_ISGITLINK
parameter_list|(
name|m
parameter_list|)
value|(((m)& S_IFMT) == S_IFGITLINK)
end_define
begin_comment
comment|/*  * Intensive research over the course of many years has shown that  * port 9418 is totally unused by anything else. Or  *  *	Your search - "port 9418" - did not match any documents.  *  * as www.google.com puts it.  *  * This port has been properly assigned for git use by IANA:  * git (Assigned-9418) [I06-050728-0001].  *  *	git  9418/tcp   git pack transfer service  *	git  9418/udp   git pack transfer service  *  * with Linus Torvalds<torvalds@osdl.org> as the point of  * contact. September 2005.  *  * See http://www.iana.org/assignments/port-numbers  */
end_comment
begin_define
DECL|macro|DEFAULT_GIT_PORT
define|#
directive|define
name|DEFAULT_GIT_PORT
value|9418
end_define
begin_comment
comment|/*  * Basic data structures for the directory cache  */
end_comment
begin_define
DECL|macro|CACHE_SIGNATURE
define|#
directive|define
name|CACHE_SIGNATURE
value|0x44495243
end_define
begin_comment
DECL|macro|CACHE_SIGNATURE
comment|/* "DIRC" */
end_comment
begin_struct
DECL|struct|cache_header
struct|struct
name|cache_header
block|{
DECL|member|hdr_signature
name|unsigned
name|int
name|hdr_signature
decl_stmt|;
DECL|member|hdr_version
name|unsigned
name|int
name|hdr_version
decl_stmt|;
DECL|member|hdr_entries
name|unsigned
name|int
name|hdr_entries
decl_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|INDEX_FORMAT_LB
define|#
directive|define
name|INDEX_FORMAT_LB
value|2
end_define
begin_define
DECL|macro|INDEX_FORMAT_UB
define|#
directive|define
name|INDEX_FORMAT_UB
value|4
end_define
begin_comment
comment|/*  * The "cache_time" is just the low 32 bits of the  * time. It doesn't matter if it overflows - we only  * check it for equality in the 32 bits we save.  */
end_comment
begin_struct
DECL|struct|cache_time
struct|struct
name|cache_time
block|{
DECL|member|sec
name|unsigned
name|int
name|sec
decl_stmt|;
DECL|member|nsec
name|unsigned
name|int
name|nsec
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|stat_data
struct|struct
name|stat_data
block|{
DECL|member|sd_ctime
name|struct
name|cache_time
name|sd_ctime
decl_stmt|;
DECL|member|sd_mtime
name|struct
name|cache_time
name|sd_mtime
decl_stmt|;
DECL|member|sd_dev
name|unsigned
name|int
name|sd_dev
decl_stmt|;
DECL|member|sd_ino
name|unsigned
name|int
name|sd_ino
decl_stmt|;
DECL|member|sd_uid
name|unsigned
name|int
name|sd_uid
decl_stmt|;
DECL|member|sd_gid
name|unsigned
name|int
name|sd_gid
decl_stmt|;
DECL|member|sd_size
name|unsigned
name|int
name|sd_size
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|cache_entry
struct|struct
name|cache_entry
block|{
DECL|member|ce_stat_data
name|struct
name|stat_data
name|ce_stat_data
decl_stmt|;
DECL|member|ce_mode
name|unsigned
name|int
name|ce_mode
decl_stmt|;
DECL|member|ce_flags
name|unsigned
name|int
name|ce_flags
decl_stmt|;
DECL|member|ce_namelen
name|unsigned
name|int
name|ce_namelen
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|next
name|struct
name|cache_entry
modifier|*
name|next
decl_stmt|;
DECL|member|name
name|char
name|name
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
struct|;
end_struct
begin_define
DECL|macro|CE_STAGEMASK
define|#
directive|define
name|CE_STAGEMASK
value|(0x3000)
end_define
begin_define
DECL|macro|CE_EXTENDED
define|#
directive|define
name|CE_EXTENDED
value|(0x4000)
end_define
begin_define
DECL|macro|CE_VALID
define|#
directive|define
name|CE_VALID
value|(0x8000)
end_define
begin_define
DECL|macro|CE_STAGESHIFT
define|#
directive|define
name|CE_STAGESHIFT
value|12
end_define
begin_comment
comment|/*  * Range 0xFFFF0000 in ce_flags is divided into  * two parts: in-memory flags and on-disk ones.  * Flags in CE_EXTENDED_FLAGS will get saved on-disk  * if you want to save a new flag, add it in  * CE_EXTENDED_FLAGS  *  * In-memory only flags  */
end_comment
begin_define
DECL|macro|CE_UPDATE
define|#
directive|define
name|CE_UPDATE
value|(1<< 16)
end_define
begin_define
DECL|macro|CE_REMOVE
define|#
directive|define
name|CE_REMOVE
value|(1<< 17)
end_define
begin_define
DECL|macro|CE_UPTODATE
define|#
directive|define
name|CE_UPTODATE
value|(1<< 18)
end_define
begin_define
DECL|macro|CE_ADDED
define|#
directive|define
name|CE_ADDED
value|(1<< 19)
end_define
begin_define
DECL|macro|CE_HASHED
define|#
directive|define
name|CE_HASHED
value|(1<< 20)
end_define
begin_define
DECL|macro|CE_UNHASHED
define|#
directive|define
name|CE_UNHASHED
value|(1<< 21)
end_define
begin_define
DECL|macro|CE_WT_REMOVE
define|#
directive|define
name|CE_WT_REMOVE
value|(1<< 22)
end_define
begin_comment
DECL|macro|CE_WT_REMOVE
comment|/* remove in work directory */
end_comment
begin_define
DECL|macro|CE_CONFLICTED
define|#
directive|define
name|CE_CONFLICTED
value|(1<< 23)
end_define
begin_define
DECL|macro|CE_UNPACKED
define|#
directive|define
name|CE_UNPACKED
value|(1<< 24)
end_define
begin_define
DECL|macro|CE_NEW_SKIP_WORKTREE
define|#
directive|define
name|CE_NEW_SKIP_WORKTREE
value|(1<< 25)
end_define
begin_comment
comment|/* used to temporarily mark paths matched by pathspecs */
end_comment
begin_define
DECL|macro|CE_MATCHED
define|#
directive|define
name|CE_MATCHED
value|(1<< 26)
end_define
begin_comment
comment|/*  * Extended on-disk flags  */
end_comment
begin_define
DECL|macro|CE_INTENT_TO_ADD
define|#
directive|define
name|CE_INTENT_TO_ADD
value|(1<< 29)
end_define
begin_define
DECL|macro|CE_SKIP_WORKTREE
define|#
directive|define
name|CE_SKIP_WORKTREE
value|(1<< 30)
end_define
begin_comment
comment|/* CE_EXTENDED2 is for future extension */
end_comment
begin_define
DECL|macro|CE_EXTENDED2
define|#
directive|define
name|CE_EXTENDED2
value|(1<< 31)
end_define
begin_define
DECL|macro|CE_EXTENDED_FLAGS
define|#
directive|define
name|CE_EXTENDED_FLAGS
value|(CE_INTENT_TO_ADD | CE_SKIP_WORKTREE)
end_define
begin_comment
comment|/*  * Safeguard to avoid saving wrong flags:  *  - CE_EXTENDED2 won't get saved until its semantic is known  *  - Bits in 0x0000FFFF have been saved in ce_flags already  *  - Bits in 0x003F0000 are currently in-memory flags  */
end_comment
begin_if
if|#
directive|if
name|CE_EXTENDED_FLAGS
operator|&
literal|0x803FFFFF
end_if
begin_error
error|#
directive|error
literal|"CE_EXTENDED_FLAGS out of range"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*  * Copy the sha1 and stat state of a cache entry from one to  * another. But we never change the name, or the hash state!  */
end_comment
begin_define
DECL|macro|CE_STATE_MASK
define|#
directive|define
name|CE_STATE_MASK
value|(CE_HASHED | CE_UNHASHED)
end_define
begin_function
DECL|function|copy_cache_entry
specifier|static
specifier|inline
name|void
name|copy_cache_entry
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|cache_entry
modifier|*
name|src
parameter_list|)
block|{
name|unsigned
name|int
name|state
init|=
name|dst
operator|->
name|ce_flags
operator|&
name|CE_STATE_MASK
decl_stmt|;
comment|/* Don't copy hash chain and name */
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|offsetof
argument_list|(
expr|struct
name|cache_entry
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Restore the hash state */
name|dst
operator|->
name|ce_flags
operator|=
operator|(
name|dst
operator|->
name|ce_flags
operator|&
operator|~
name|CE_STATE_MASK
operator|)
operator||
name|state
expr_stmt|;
block|}
end_function
begin_function
DECL|function|create_ce_flags
specifier|static
specifier|inline
name|unsigned
name|create_ce_flags
parameter_list|(
name|unsigned
name|stage
parameter_list|)
block|{
return|return
operator|(
name|stage
operator|<<
name|CE_STAGESHIFT
operator|)
return|;
block|}
end_function
begin_define
DECL|macro|ce_namelen
define|#
directive|define
name|ce_namelen
parameter_list|(
name|ce
parameter_list|)
value|((ce)->ce_namelen)
end_define
begin_define
DECL|macro|ce_size
define|#
directive|define
name|ce_size
parameter_list|(
name|ce
parameter_list|)
value|cache_entry_size(ce_namelen(ce))
end_define
begin_define
DECL|macro|ce_stage
define|#
directive|define
name|ce_stage
parameter_list|(
name|ce
parameter_list|)
value|((CE_STAGEMASK& (ce)->ce_flags)>> CE_STAGESHIFT)
end_define
begin_define
DECL|macro|ce_uptodate
define|#
directive|define
name|ce_uptodate
parameter_list|(
name|ce
parameter_list|)
value|((ce)->ce_flags& CE_UPTODATE)
end_define
begin_define
DECL|macro|ce_skip_worktree
define|#
directive|define
name|ce_skip_worktree
parameter_list|(
name|ce
parameter_list|)
value|((ce)->ce_flags& CE_SKIP_WORKTREE)
end_define
begin_define
DECL|macro|ce_mark_uptodate
define|#
directive|define
name|ce_mark_uptodate
parameter_list|(
name|ce
parameter_list|)
value|((ce)->ce_flags |= CE_UPTODATE)
end_define
begin_define
DECL|macro|ce_permissions
define|#
directive|define
name|ce_permissions
parameter_list|(
name|mode
parameter_list|)
value|(((mode)& 0100) ? 0755 : 0644)
end_define
begin_function
DECL|function|create_ce_mode
specifier|static
specifier|inline
name|unsigned
name|int
name|create_ce_mode
parameter_list|(
name|unsigned
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|S_ISLNK
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|S_IFLNK
return|;
if|if
condition|(
name|S_ISDIR
argument_list|(
name|mode
argument_list|)
operator|||
name|S_ISGITLINK
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|S_IFGITLINK
return|;
return|return
name|S_IFREG
operator||
name|ce_permissions
argument_list|(
name|mode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ce_mode_from_stat
specifier|static
specifier|inline
name|unsigned
name|int
name|ce_mode_from_stat
parameter_list|(
specifier|const
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|unsigned
name|int
name|mode
parameter_list|)
block|{
specifier|extern
name|int
name|trust_executable_bit
decl_stmt|,
name|has_symlinks
decl_stmt|;
if|if
condition|(
operator|!
name|has_symlinks
operator|&&
name|S_ISREG
argument_list|(
name|mode
argument_list|)
operator|&&
name|ce
operator|&&
name|S_ISLNK
argument_list|(
name|ce
operator|->
name|ce_mode
argument_list|)
condition|)
return|return
name|ce
operator|->
name|ce_mode
return|;
if|if
condition|(
operator|!
name|trust_executable_bit
operator|&&
name|S_ISREG
argument_list|(
name|mode
argument_list|)
condition|)
block|{
if|if
condition|(
name|ce
operator|&&
name|S_ISREG
argument_list|(
name|ce
operator|->
name|ce_mode
argument_list|)
condition|)
return|return
name|ce
operator|->
name|ce_mode
return|;
return|return
name|create_ce_mode
argument_list|(
literal|0666
argument_list|)
return|;
block|}
return|return
name|create_ce_mode
argument_list|(
name|mode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ce_to_dtype
specifier|static
specifier|inline
name|int
name|ce_to_dtype
parameter_list|(
specifier|const
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|)
block|{
name|unsigned
name|ce_mode
init|=
name|ntohl
argument_list|(
name|ce
operator|->
name|ce_mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|S_ISREG
argument_list|(
name|ce_mode
argument_list|)
condition|)
return|return
name|DT_REG
return|;
elseif|else
if|if
condition|(
name|S_ISDIR
argument_list|(
name|ce_mode
argument_list|)
operator|||
name|S_ISGITLINK
argument_list|(
name|ce_mode
argument_list|)
condition|)
return|return
name|DT_DIR
return|;
elseif|else
if|if
condition|(
name|S_ISLNK
argument_list|(
name|ce_mode
argument_list|)
condition|)
return|return
name|DT_LNK
return|;
else|else
return|return
name|DT_UNKNOWN
return|;
block|}
end_function
begin_function
DECL|function|canon_mode
specifier|static
specifier|inline
name|unsigned
name|int
name|canon_mode
parameter_list|(
name|unsigned
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|S_ISREG
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|S_IFREG
operator||
name|ce_permissions
argument_list|(
name|mode
argument_list|)
return|;
if|if
condition|(
name|S_ISLNK
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|S_IFLNK
return|;
if|if
condition|(
name|S_ISDIR
argument_list|(
name|mode
argument_list|)
condition|)
return|return
name|S_IFDIR
return|;
return|return
name|S_IFGITLINK
return|;
block|}
end_function
begin_define
DECL|macro|cache_entry_size
define|#
directive|define
name|cache_entry_size
parameter_list|(
name|len
parameter_list|)
value|(offsetof(struct cache_entry,name) + (len) + 1)
end_define
begin_struct
DECL|struct|index_state
struct|struct
name|index_state
block|{
DECL|member|cache
name|struct
name|cache_entry
modifier|*
modifier|*
name|cache
decl_stmt|;
DECL|member|version
name|unsigned
name|int
name|version
decl_stmt|;
DECL|member|cache_nr
DECL|member|cache_alloc
DECL|member|cache_changed
name|unsigned
name|int
name|cache_nr
decl_stmt|,
name|cache_alloc
decl_stmt|,
name|cache_changed
decl_stmt|;
DECL|member|resolve_undo
name|struct
name|string_list
modifier|*
name|resolve_undo
decl_stmt|;
DECL|member|cache_tree
name|struct
name|cache_tree
modifier|*
name|cache_tree
decl_stmt|;
DECL|member|timestamp
name|struct
name|cache_time
name|timestamp
decl_stmt|;
DECL|member|name_hash_initialized
name|unsigned
name|name_hash_initialized
range|:
literal|1
decl_stmt|,
DECL|member|initialized
name|initialized
range|:
literal|1
decl_stmt|;
DECL|member|name_hash
name|struct
name|hash_table
name|name_hash
decl_stmt|;
DECL|member|dir_hash
name|struct
name|hash_table
name|dir_hash
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|struct
name|index_state
name|the_index
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* Name hashing */
end_comment
begin_function_decl
specifier|extern
name|void
name|add_name_hash
parameter_list|(
name|struct
name|index_state
modifier|*
name|istate
parameter_list|,
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|remove_name_hash
parameter_list|(
name|struct
name|index_state
modifier|*
name|istate
parameter_list|,
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|free_name_hash
parameter_list|(
name|struct
name|index_state
modifier|*
name|istate
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|NO_THE_INDEX_COMPATIBILITY_MACROS
end_ifndef
begin_define
DECL|macro|active_cache
define|#
directive|define
name|active_cache
value|(the_index.cache)
end_define
begin_define
DECL|macro|active_nr
define|#
directive|define
name|active_nr
value|(the_index.cache_nr)
end_define
begin_define
DECL|macro|active_alloc
define|#
directive|define
name|active_alloc
value|(the_index.cache_alloc)
end_define
begin_define
DECL|macro|active_cache_changed
define|#
directive|define
name|active_cache_changed
value|(the_index.cache_changed)
end_define
begin_define
DECL|macro|active_cache_tree
define|#
directive|define
name|active_cache_tree
value|(the_index.cache_tree)
end_define
begin_define
DECL|macro|read_cache
define|#
directive|define
name|read_cache
parameter_list|()
value|read_index(&the_index)
end_define
begin_define
DECL|macro|read_cache_from
define|#
directive|define
name|read_cache_from
parameter_list|(
name|path
parameter_list|)
value|read_index_from(&the_index, (path))
end_define
begin_define
DECL|macro|read_cache_preload
define|#
directive|define
name|read_cache_preload
parameter_list|(
name|pathspec
parameter_list|)
value|read_index_preload(&the_index, (pathspec))
end_define
begin_define
DECL|macro|is_cache_unborn
define|#
directive|define
name|is_cache_unborn
parameter_list|()
value|is_index_unborn(&the_index)
end_define
begin_define
DECL|macro|read_cache_unmerged
define|#
directive|define
name|read_cache_unmerged
parameter_list|()
value|read_index_unmerged(&the_index)
end_define
begin_define
DECL|macro|write_cache
define|#
directive|define
name|write_cache
parameter_list|(
name|newfd
parameter_list|,
name|cache
parameter_list|,
name|entries
parameter_list|)
value|write_index(&the_index, (newfd))
end_define
begin_define
DECL|macro|discard_cache
define|#
directive|define
name|discard_cache
parameter_list|()
value|discard_index(&the_index)
end_define
begin_define
DECL|macro|unmerged_cache
define|#
directive|define
name|unmerged_cache
parameter_list|()
value|unmerged_index(&the_index)
end_define
begin_define
DECL|macro|cache_name_pos
define|#
directive|define
name|cache_name_pos
parameter_list|(
name|name
parameter_list|,
name|namelen
parameter_list|)
value|index_name_pos(&the_index,(name),(namelen))
end_define
begin_define
DECL|macro|add_cache_entry
define|#
directive|define
name|add_cache_entry
parameter_list|(
name|ce
parameter_list|,
name|option
parameter_list|)
value|add_index_entry(&the_index, (ce), (option))
end_define
begin_define
DECL|macro|rename_cache_entry_at
define|#
directive|define
name|rename_cache_entry_at
parameter_list|(
name|pos
parameter_list|,
name|new_name
parameter_list|)
value|rename_index_entry_at(&the_index, (pos), (new_name))
end_define
begin_define
DECL|macro|remove_cache_entry_at
define|#
directive|define
name|remove_cache_entry_at
parameter_list|(
name|pos
parameter_list|)
value|remove_index_entry_at(&the_index, (pos))
end_define
begin_define
DECL|macro|remove_file_from_cache
define|#
directive|define
name|remove_file_from_cache
parameter_list|(
name|path
parameter_list|)
value|remove_file_from_index(&the_index, (path))
end_define
begin_define
DECL|macro|add_to_cache
define|#
directive|define
name|add_to_cache
parameter_list|(
name|path
parameter_list|,
name|st
parameter_list|,
name|flags
parameter_list|)
value|add_to_index(&the_index, (path), (st), (flags))
end_define
begin_define
DECL|macro|add_file_to_cache
define|#
directive|define
name|add_file_to_cache
parameter_list|(
name|path
parameter_list|,
name|flags
parameter_list|)
value|add_file_to_index(&the_index, (path), (flags))
end_define
begin_define
DECL|macro|refresh_cache
define|#
directive|define
name|refresh_cache
parameter_list|(
name|flags
parameter_list|)
value|refresh_index(&the_index, (flags), NULL, NULL, NULL)
end_define
begin_define
DECL|macro|ce_match_stat
define|#
directive|define
name|ce_match_stat
parameter_list|(
name|ce
parameter_list|,
name|st
parameter_list|,
name|options
parameter_list|)
value|ie_match_stat(&the_index, (ce), (st), (options))
end_define
begin_define
DECL|macro|ce_modified
define|#
directive|define
name|ce_modified
parameter_list|(
name|ce
parameter_list|,
name|st
parameter_list|,
name|options
parameter_list|)
value|ie_modified(&the_index, (ce), (st), (options))
end_define
begin_define
DECL|macro|cache_name_exists
define|#
directive|define
name|cache_name_exists
parameter_list|(
name|name
parameter_list|,
name|namelen
parameter_list|,
name|igncase
parameter_list|)
value|index_name_exists(&the_index, (name), (namelen), (igncase))
end_define
begin_define
DECL|macro|cache_name_is_other
define|#
directive|define
name|cache_name_is_other
parameter_list|(
name|name
parameter_list|,
name|namelen
parameter_list|)
value|index_name_is_other(&the_index, (name), (namelen))
end_define
begin_define
DECL|macro|resolve_undo_clear
define|#
directive|define
name|resolve_undo_clear
parameter_list|()
value|resolve_undo_clear_index(&the_index)
end_define
begin_define
DECL|macro|unmerge_cache_entry_at
define|#
directive|define
name|unmerge_cache_entry_at
parameter_list|(
name|at
parameter_list|)
value|unmerge_index_entry_at(&the_index, at)
end_define
begin_define
DECL|macro|unmerge_cache
define|#
directive|define
name|unmerge_cache
parameter_list|(
name|pathspec
parameter_list|)
value|unmerge_index(&the_index, pathspec)
end_define
begin_define
DECL|macro|read_blob_data_from_cache
define|#
directive|define
name|read_blob_data_from_cache
parameter_list|(
name|path
parameter_list|,
name|sz
parameter_list|)
value|read_blob_data_from_index(&the_index, (path), (sz))
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_enum
DECL|enum|object_type
enum|enum
name|object_type
block|{
DECL|enumerator|OBJ_BAD
name|OBJ_BAD
init|=
operator|-
literal|1
block|,
DECL|enumerator|OBJ_NONE
name|OBJ_NONE
init|=
literal|0
block|,
DECL|enumerator|OBJ_COMMIT
name|OBJ_COMMIT
init|=
literal|1
block|,
DECL|enumerator|OBJ_TREE
name|OBJ_TREE
init|=
literal|2
block|,
DECL|enumerator|OBJ_BLOB
name|OBJ_BLOB
init|=
literal|3
block|,
DECL|enumerator|OBJ_TAG
name|OBJ_TAG
init|=
literal|4
block|,
comment|/* 5 for future expansion */
DECL|enumerator|OBJ_OFS_DELTA
name|OBJ_OFS_DELTA
init|=
literal|6
block|,
DECL|enumerator|OBJ_REF_DELTA
name|OBJ_REF_DELTA
init|=
literal|7
block|,
DECL|enumerator|OBJ_ANY
name|OBJ_ANY
block|,
DECL|enumerator|OBJ_MAX
name|OBJ_MAX
block|}
enum|;
end_enum
begin_function
DECL|function|object_type
specifier|static
specifier|inline
name|enum
name|object_type
name|object_type
parameter_list|(
name|unsigned
name|int
name|mode
parameter_list|)
block|{
return|return
name|S_ISDIR
argument_list|(
name|mode
argument_list|)
condition|?
name|OBJ_TREE
else|:
name|S_ISGITLINK
argument_list|(
name|mode
argument_list|)
condition|?
name|OBJ_COMMIT
else|:
name|OBJ_BLOB
return|;
block|}
end_function
begin_comment
comment|/* Double-check local_repo_env below if you add to this list. */
end_comment
begin_define
DECL|macro|GIT_DIR_ENVIRONMENT
define|#
directive|define
name|GIT_DIR_ENVIRONMENT
value|"GIT_DIR"
end_define
begin_define
DECL|macro|GIT_NAMESPACE_ENVIRONMENT
define|#
directive|define
name|GIT_NAMESPACE_ENVIRONMENT
value|"GIT_NAMESPACE"
end_define
begin_define
DECL|macro|GIT_WORK_TREE_ENVIRONMENT
define|#
directive|define
name|GIT_WORK_TREE_ENVIRONMENT
value|"GIT_WORK_TREE"
end_define
begin_define
DECL|macro|GIT_PREFIX_ENVIRONMENT
define|#
directive|define
name|GIT_PREFIX_ENVIRONMENT
value|"GIT_PREFIX"
end_define
begin_define
DECL|macro|DEFAULT_GIT_DIR_ENVIRONMENT
define|#
directive|define
name|DEFAULT_GIT_DIR_ENVIRONMENT
value|".git"
end_define
begin_define
DECL|macro|DB_ENVIRONMENT
define|#
directive|define
name|DB_ENVIRONMENT
value|"GIT_OBJECT_DIRECTORY"
end_define
begin_define
DECL|macro|INDEX_ENVIRONMENT
define|#
directive|define
name|INDEX_ENVIRONMENT
value|"GIT_INDEX_FILE"
end_define
begin_define
DECL|macro|GRAFT_ENVIRONMENT
define|#
directive|define
name|GRAFT_ENVIRONMENT
value|"GIT_GRAFT_FILE"
end_define
begin_define
DECL|macro|TEMPLATE_DIR_ENVIRONMENT
define|#
directive|define
name|TEMPLATE_DIR_ENVIRONMENT
value|"GIT_TEMPLATE_DIR"
end_define
begin_define
DECL|macro|CONFIG_ENVIRONMENT
define|#
directive|define
name|CONFIG_ENVIRONMENT
value|"GIT_CONFIG"
end_define
begin_define
DECL|macro|CONFIG_DATA_ENVIRONMENT
define|#
directive|define
name|CONFIG_DATA_ENVIRONMENT
value|"GIT_CONFIG_PARAMETERS"
end_define
begin_define
DECL|macro|EXEC_PATH_ENVIRONMENT
define|#
directive|define
name|EXEC_PATH_ENVIRONMENT
value|"GIT_EXEC_PATH"
end_define
begin_define
DECL|macro|CEILING_DIRECTORIES_ENVIRONMENT
define|#
directive|define
name|CEILING_DIRECTORIES_ENVIRONMENT
value|"GIT_CEILING_DIRECTORIES"
end_define
begin_define
DECL|macro|NO_REPLACE_OBJECTS_ENVIRONMENT
define|#
directive|define
name|NO_REPLACE_OBJECTS_ENVIRONMENT
value|"GIT_NO_REPLACE_OBJECTS"
end_define
begin_define
DECL|macro|GITATTRIBUTES_FILE
define|#
directive|define
name|GITATTRIBUTES_FILE
value|".gitattributes"
end_define
begin_define
DECL|macro|INFOATTRIBUTES_FILE
define|#
directive|define
name|INFOATTRIBUTES_FILE
value|"info/attributes"
end_define
begin_define
DECL|macro|ATTRIBUTE_MACRO_PREFIX
define|#
directive|define
name|ATTRIBUTE_MACRO_PREFIX
value|"[attr]"
end_define
begin_define
DECL|macro|GIT_NOTES_REF_ENVIRONMENT
define|#
directive|define
name|GIT_NOTES_REF_ENVIRONMENT
value|"GIT_NOTES_REF"
end_define
begin_define
DECL|macro|GIT_NOTES_DEFAULT_REF
define|#
directive|define
name|GIT_NOTES_DEFAULT_REF
value|"refs/notes/commits"
end_define
begin_define
DECL|macro|GIT_NOTES_DISPLAY_REF_ENVIRONMENT
define|#
directive|define
name|GIT_NOTES_DISPLAY_REF_ENVIRONMENT
value|"GIT_NOTES_DISPLAY_REF"
end_define
begin_define
DECL|macro|GIT_NOTES_REWRITE_REF_ENVIRONMENT
define|#
directive|define
name|GIT_NOTES_REWRITE_REF_ENVIRONMENT
value|"GIT_NOTES_REWRITE_REF"
end_define
begin_define
DECL|macro|GIT_NOTES_REWRITE_MODE_ENVIRONMENT
define|#
directive|define
name|GIT_NOTES_REWRITE_MODE_ENVIRONMENT
value|"GIT_NOTES_REWRITE_MODE"
end_define
begin_define
DECL|macro|GIT_LITERAL_PATHSPECS_ENVIRONMENT
define|#
directive|define
name|GIT_LITERAL_PATHSPECS_ENVIRONMENT
value|"GIT_LITERAL_PATHSPECS"
end_define
begin_comment
comment|/*  * This environment variable is expected to contain a boolean indicating  * whether we should or should not treat:  *  *   GIT_DIR=foo.git git ...  *  * as if GIT_WORK_TREE=. was given. It's not expected that users will make use  * of this, but we use it internally to communicate to sub-processes that we  * are in a bare repo. If not set, defaults to true.  */
end_comment
begin_define
DECL|macro|GIT_IMPLICIT_WORK_TREE_ENVIRONMENT
define|#
directive|define
name|GIT_IMPLICIT_WORK_TREE_ENVIRONMENT
value|"GIT_IMPLICIT_WORK_TREE"
end_define
begin_comment
comment|/*  * Repository-local GIT_* environment variables; these will be cleared  * when git spawns a sub-process that runs inside another repository.  * The array is NULL-terminated, which makes it easy to pass in the "env"  * parameter of a run-command invocation, or to do a simple walk.  */
end_comment
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|local_repo_env
index|[]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|is_bare_repository_cfg
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|is_bare_repository
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|is_inside_git_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
name|char
modifier|*
name|git_work_tree_cfg
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|is_inside_work_tree
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|have_git_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|get_git_dir
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|is_git_directory
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_object_directory
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_index_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|get_graft_file
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|set_git_dir
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|get_git_namespace
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|strip_namespace
parameter_list|(
specifier|const
name|char
modifier|*
name|namespaced_ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|get_git_work_tree
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|read_gitfile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|resolve_gitdir
parameter_list|(
specifier|const
name|char
modifier|*
name|suspect
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|set_git_work_tree
parameter_list|(
specifier|const
name|char
modifier|*
name|tree
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|ALTERNATE_DB_ENVIRONMENT
define|#
directive|define
name|ALTERNATE_DB_ENVIRONMENT
value|"GIT_ALTERNATE_OBJECT_DIRECTORIES"
end_define
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
modifier|*
name|get_pathspec
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|setup_work_tree
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|setup_git_directory_gently
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|setup_git_directory
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|prefix_path
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|prefix_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|check_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|verify_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|diagnose_misspelt_rev
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|verify_non_filename
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|path_inside_repo
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|INIT_DB_QUIET
define|#
directive|define
name|INIT_DB_QUIET
value|0x0001
end_define
begin_function_decl
specifier|extern
name|int
name|set_git_dir_init
parameter_list|(
specifier|const
name|char
modifier|*
name|git_dir
parameter_list|,
specifier|const
name|char
modifier|*
name|real_git_dir
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|init_db
parameter_list|(
specifier|const
name|char
modifier|*
name|template_dir
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|sanitize_stdfds
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|alloc_nr
define|#
directive|define
name|alloc_nr
parameter_list|(
name|x
parameter_list|)
value|(((x)+16)*3/2)
end_define
begin_comment
comment|/*  * Realloc the buffer pointed at by variable 'x' so that it can hold  * at least 'nr' entries; the number of entries currently allocated  * is 'alloc', using the standard growing factor alloc_nr() macro.  *  * DO NOT USE any expression with side-effect for 'x', 'nr', or 'alloc'.  */
end_comment
begin_define
DECL|macro|ALLOC_GROW
define|#
directive|define
name|ALLOC_GROW
parameter_list|(
name|x
parameter_list|,
name|nr
parameter_list|,
name|alloc
parameter_list|)
define|\
value|do { \ 		if ((nr)> alloc) { \ 			if (alloc_nr(alloc)< (nr)) \ 				alloc = (nr); \ 			else \ 				alloc = alloc_nr(alloc); \ 			x = xrealloc((x), alloc * sizeof(*(x))); \ 		} \ 	} while (0)
end_define
begin_comment
comment|/* Initialize and use the cache information */
end_comment
begin_function_decl
specifier|extern
name|int
name|read_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_index_preload
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_index_from
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|is_index_unborn
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_index_unmerged
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|int
name|newfd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|discard_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|unmerged_index
parameter_list|(
specifier|const
name|struct
name|index_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|verify_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|cache_entry
modifier|*
name|index_name_exists
parameter_list|(
name|struct
name|index_state
modifier|*
name|istate
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|,
name|int
name|igncase
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_name_pos
parameter_list|(
specifier|const
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|ADD_CACHE_OK_TO_ADD
define|#
directive|define
name|ADD_CACHE_OK_TO_ADD
value|1
end_define
begin_comment
DECL|macro|ADD_CACHE_OK_TO_ADD
comment|/* Ok to add */
end_comment
begin_define
DECL|macro|ADD_CACHE_OK_TO_REPLACE
define|#
directive|define
name|ADD_CACHE_OK_TO_REPLACE
value|2
end_define
begin_comment
DECL|macro|ADD_CACHE_OK_TO_REPLACE
comment|/* Ok to replace file/directory */
end_comment
begin_define
DECL|macro|ADD_CACHE_SKIP_DFCHECK
define|#
directive|define
name|ADD_CACHE_SKIP_DFCHECK
value|4
end_define
begin_comment
DECL|macro|ADD_CACHE_SKIP_DFCHECK
comment|/* Ok to skip DF conflict checks */
end_comment
begin_define
DECL|macro|ADD_CACHE_JUST_APPEND
define|#
directive|define
name|ADD_CACHE_JUST_APPEND
value|8
end_define
begin_comment
DECL|macro|ADD_CACHE_JUST_APPEND
comment|/* Append only; tree.c::read_tree() */
end_comment
begin_define
DECL|macro|ADD_CACHE_NEW_ONLY
define|#
directive|define
name|ADD_CACHE_NEW_ONLY
value|16
end_define
begin_comment
DECL|macro|ADD_CACHE_NEW_ONLY
comment|/* Do not replace existing ones */
end_comment
begin_function_decl
specifier|extern
name|int
name|add_index_entry
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|int
name|option
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|rename_index_entry_at
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|int
name|pos
parameter_list|,
specifier|const
name|char
modifier|*
name|new_name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|remove_index_entry_at
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|remove_marked_cache_entries
parameter_list|(
name|struct
name|index_state
modifier|*
name|istate
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|remove_file_from_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|ADD_CACHE_VERBOSE
define|#
directive|define
name|ADD_CACHE_VERBOSE
value|1
end_define
begin_define
DECL|macro|ADD_CACHE_PRETEND
define|#
directive|define
name|ADD_CACHE_PRETEND
value|2
end_define
begin_define
DECL|macro|ADD_CACHE_IGNORE_ERRORS
define|#
directive|define
name|ADD_CACHE_IGNORE_ERRORS
value|4
end_define
begin_define
DECL|macro|ADD_CACHE_IGNORE_REMOVAL
define|#
directive|define
name|ADD_CACHE_IGNORE_REMOVAL
value|8
end_define
begin_define
DECL|macro|ADD_CACHE_INTENT
define|#
directive|define
name|ADD_CACHE_INTENT
value|16
end_define
begin_define
DECL|macro|ADD_CACHE_IMPLICIT_DOT
define|#
directive|define
name|ADD_CACHE_IMPLICIT_DOT
value|32
end_define
begin_comment
DECL|macro|ADD_CACHE_IMPLICIT_DOT
comment|/* internal to "git add -u/-A" */
end_comment
begin_function_decl
specifier|extern
name|int
name|add_to_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|add_file_to_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|cache_entry
modifier|*
name|make_cache_entry
parameter_list|(
name|unsigned
name|int
name|mode
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|stage
parameter_list|,
name|int
name|refresh
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ce_same_name
parameter_list|(
specifier|const
name|struct
name|cache_entry
modifier|*
name|a
parameter_list|,
specifier|const
name|struct
name|cache_entry
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_name_is_other
parameter_list|(
specifier|const
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|read_blob_data_from_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* do stat comparison even if CE_VALID is true */
end_comment
begin_define
DECL|macro|CE_MATCH_IGNORE_VALID
define|#
directive|define
name|CE_MATCH_IGNORE_VALID
value|01
end_define
begin_comment
comment|/* do not check the contents but report dirty on racily-clean entries */
end_comment
begin_define
DECL|macro|CE_MATCH_RACY_IS_DIRTY
define|#
directive|define
name|CE_MATCH_RACY_IS_DIRTY
value|02
end_define
begin_comment
comment|/* do stat comparison even if CE_SKIP_WORKTREE is true */
end_comment
begin_define
DECL|macro|CE_MATCH_IGNORE_SKIP_WORKTREE
define|#
directive|define
name|CE_MATCH_IGNORE_SKIP_WORKTREE
value|04
end_define
begin_function_decl
specifier|extern
name|int
name|ie_match_stat
parameter_list|(
specifier|const
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|struct
name|cache_entry
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ie_modified
parameter_list|(
specifier|const
name|struct
name|index_state
modifier|*
parameter_list|,
specifier|const
name|struct
name|cache_entry
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|PATHSPEC_ONESTAR
define|#
directive|define
name|PATHSPEC_ONESTAR
value|1
end_define
begin_comment
DECL|macro|PATHSPEC_ONESTAR
comment|/* the pathspec pattern sastisfies GFNM_ONESTAR */
end_comment
begin_struct
DECL|struct|pathspec
struct|struct
name|pathspec
block|{
DECL|member|raw
specifier|const
name|char
modifier|*
modifier|*
name|raw
decl_stmt|;
comment|/* get_pathspec() result, not freed by free_pathspec() */
DECL|member|nr
name|int
name|nr
decl_stmt|;
DECL|member|has_wildcard
name|unsigned
name|int
name|has_wildcard
range|:
literal|1
decl_stmt|;
DECL|member|recursive
name|unsigned
name|int
name|recursive
range|:
literal|1
decl_stmt|;
DECL|member|max_depth
name|int
name|max_depth
decl_stmt|;
DECL|struct|pathspec_item
struct|struct
name|pathspec_item
block|{
DECL|member|match
specifier|const
name|char
modifier|*
name|match
decl_stmt|;
DECL|member|len
name|int
name|len
decl_stmt|;
DECL|member|nowildcard_len
name|int
name|nowildcard_len
decl_stmt|;
DECL|member|flags
name|int
name|flags
decl_stmt|;
block|}
DECL|member|items
modifier|*
name|items
struct|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|int
name|init_pathspec
parameter_list|(
name|struct
name|pathspec
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|free_pathspec
parameter_list|(
name|struct
name|pathspec
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ce_path_match
parameter_list|(
specifier|const
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
specifier|const
name|struct
name|pathspec
modifier|*
name|pathspec
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|limit_pathspec_to_literal
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|HASH_WRITE_OBJECT
define|#
directive|define
name|HASH_WRITE_OBJECT
value|1
end_define
begin_define
DECL|macro|HASH_FORMAT_CHECK
define|#
directive|define
name|HASH_FORMAT_CHECK
value|2
end_define
begin_function_decl
specifier|extern
name|int
name|index_fd
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|fd
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|,
name|enum
name|object_type
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|unsigned
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|index_path
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|,
name|unsigned
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Record to sd the data from st that we use to check whether a file  * might have changed.  */
end_comment
begin_function_decl
specifier|extern
name|void
name|fill_stat_data
parameter_list|(
name|struct
name|stat_data
modifier|*
name|sd
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Return 0 if st is consistent with a file not having been changed  * since sd was filled.  If there are differences, return a  * combination of MTIME_CHANGED, CTIME_CHANGED, OWNER_CHANGED,  * INODE_CHANGED, and DATA_CHANGED.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|match_stat_data
parameter_list|(
specifier|const
name|struct
name|stat_data
modifier|*
name|sd
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|fill_stat_cache_info
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
name|struct
name|stat
modifier|*
name|st
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|REFRESH_REALLY
define|#
directive|define
name|REFRESH_REALLY
value|0x0001
end_define
begin_comment
DECL|macro|REFRESH_REALLY
comment|/* ignore_valid */
end_comment
begin_define
DECL|macro|REFRESH_UNMERGED
define|#
directive|define
name|REFRESH_UNMERGED
value|0x0002
end_define
begin_comment
DECL|macro|REFRESH_UNMERGED
comment|/* allow unmerged */
end_comment
begin_define
DECL|macro|REFRESH_QUIET
define|#
directive|define
name|REFRESH_QUIET
value|0x0004
end_define
begin_comment
DECL|macro|REFRESH_QUIET
comment|/* be quiet about it */
end_comment
begin_define
DECL|macro|REFRESH_IGNORE_MISSING
define|#
directive|define
name|REFRESH_IGNORE_MISSING
value|0x0008
end_define
begin_comment
DECL|macro|REFRESH_IGNORE_MISSING
comment|/* ignore non-existent */
end_comment
begin_define
DECL|macro|REFRESH_IGNORE_SUBMODULES
define|#
directive|define
name|REFRESH_IGNORE_SUBMODULES
value|0x0010
end_define
begin_comment
DECL|macro|REFRESH_IGNORE_SUBMODULES
comment|/* ignore submodules */
end_comment
begin_define
DECL|macro|REFRESH_IN_PORCELAIN
define|#
directive|define
name|REFRESH_IN_PORCELAIN
value|0x0020
end_define
begin_comment
DECL|macro|REFRESH_IN_PORCELAIN
comment|/* user friendly output, not "needs update" */
end_comment
begin_function_decl
specifier|extern
name|int
name|refresh_index
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|,
name|char
modifier|*
name|seen
parameter_list|,
specifier|const
name|char
modifier|*
name|header_msg
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|lock_file
struct|struct
name|lock_file
block|{
DECL|member|next
name|struct
name|lock_file
modifier|*
name|next
decl_stmt|;
DECL|member|fd
name|int
name|fd
decl_stmt|;
DECL|member|owner
name|pid_t
name|owner
decl_stmt|;
DECL|member|on_list
name|char
name|on_list
decl_stmt|;
DECL|member|filename
name|char
name|filename
index|[
name|PATH_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|LOCK_DIE_ON_ERROR
define|#
directive|define
name|LOCK_DIE_ON_ERROR
value|1
end_define
begin_define
DECL|macro|LOCK_NODEREF
define|#
directive|define
name|LOCK_NODEREF
value|2
end_define
begin_function_decl
specifier|extern
name|int
name|unable_to_lock_error
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|err
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|NORETURN
name|void
name|unable_to_lock_index_die
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|err
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hold_lock_file_for_update
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hold_lock_file_for_append
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|commit_lock_file
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|update_index_if_able
parameter_list|(
name|struct
name|index_state
modifier|*
parameter_list|,
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hold_locked_index
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|commit_locked_index
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|set_alternate_index_output
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|close_lock_file
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|rollback_lock_file
parameter_list|(
name|struct
name|lock_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|delete_ref
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|delopt
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Environment bits from configuration mechanism */
end_comment
begin_decl_stmt
specifier|extern
name|int
name|trust_executable_bit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|trust_ctime
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|check_stat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|quote_path_fully
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|has_symlinks
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|minimum_abbrev
decl_stmt|,
name|default_abbrev
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|ignore_case
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|assume_unchanged
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|prefer_symlink_refs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|log_all_ref_updates
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|warn_ambiguous_refs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|shared_repository
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|apply_default_whitespace
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|apply_default_ignorewhitespace
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_attributes_file
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|zlib_compression_level
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|core_compression_level
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|core_compression_seen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|size_t
name|packed_git_window_size
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|size_t
name|packed_git_limit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|size_t
name|delta_base_cache_limit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|unsigned
name|long
name|big_file_threshold
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|unsigned
name|long
name|pack_size_limit_cfg
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|read_replace_refs
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|fsync_object_files
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|core_preload_index
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|core_apply_sparse_checkout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|precomposed_unicode
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*  * The character that begins a commented line in user-editable file  * that is subject to stripspace.  */
end_comment
begin_decl_stmt
specifier|extern
name|char
name|comment_line_char
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|branch_track
enum|enum
name|branch_track
block|{
DECL|enumerator|BRANCH_TRACK_UNSPECIFIED
name|BRANCH_TRACK_UNSPECIFIED
init|=
operator|-
literal|1
block|,
DECL|enumerator|BRANCH_TRACK_NEVER
name|BRANCH_TRACK_NEVER
init|=
literal|0
block|,
DECL|enumerator|BRANCH_TRACK_REMOTE
name|BRANCH_TRACK_REMOTE
block|,
DECL|enumerator|BRANCH_TRACK_ALWAYS
name|BRANCH_TRACK_ALWAYS
block|,
DECL|enumerator|BRANCH_TRACK_EXPLICIT
name|BRANCH_TRACK_EXPLICIT
block|,
DECL|enumerator|BRANCH_TRACK_OVERRIDE
name|BRANCH_TRACK_OVERRIDE
block|}
enum|;
end_enum
begin_enum
DECL|enum|rebase_setup_type
enum|enum
name|rebase_setup_type
block|{
DECL|enumerator|AUTOREBASE_NEVER
name|AUTOREBASE_NEVER
init|=
literal|0
block|,
DECL|enumerator|AUTOREBASE_LOCAL
name|AUTOREBASE_LOCAL
block|,
DECL|enumerator|AUTOREBASE_REMOTE
name|AUTOREBASE_REMOTE
block|,
DECL|enumerator|AUTOREBASE_ALWAYS
name|AUTOREBASE_ALWAYS
block|}
enum|;
end_enum
begin_enum
DECL|enum|push_default_type
enum|enum
name|push_default_type
block|{
DECL|enumerator|PUSH_DEFAULT_NOTHING
name|PUSH_DEFAULT_NOTHING
init|=
literal|0
block|,
DECL|enumerator|PUSH_DEFAULT_MATCHING
name|PUSH_DEFAULT_MATCHING
block|,
DECL|enumerator|PUSH_DEFAULT_SIMPLE
name|PUSH_DEFAULT_SIMPLE
block|,
DECL|enumerator|PUSH_DEFAULT_UPSTREAM
name|PUSH_DEFAULT_UPSTREAM
block|,
DECL|enumerator|PUSH_DEFAULT_CURRENT
name|PUSH_DEFAULT_CURRENT
block|,
DECL|enumerator|PUSH_DEFAULT_UNSPECIFIED
name|PUSH_DEFAULT_UNSPECIFIED
block|}
enum|;
end_enum
begin_decl_stmt
specifier|extern
name|enum
name|branch_track
name|git_branch_track
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|enum
name|rebase_setup_type
name|autorebase
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|enum
name|push_default_type
name|push_default
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|object_creation_mode
enum|enum
name|object_creation_mode
block|{
DECL|enumerator|OBJECT_CREATION_USES_HARDLINKS
name|OBJECT_CREATION_USES_HARDLINKS
init|=
literal|0
block|,
DECL|enumerator|OBJECT_CREATION_USES_RENAMES
name|OBJECT_CREATION_USES_RENAMES
init|=
literal|1
block|}
enum|;
end_enum
begin_decl_stmt
specifier|extern
name|enum
name|object_creation_mode
name|object_creation_mode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|char
modifier|*
name|notes_ref_name
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|int
name|grafts_replace_parents
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|GIT_REPO_VERSION
define|#
directive|define
name|GIT_REPO_VERSION
value|0
end_define
begin_decl_stmt
specifier|extern
name|int
name|repository_format_version
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|check_repository_format
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|MTIME_CHANGED
define|#
directive|define
name|MTIME_CHANGED
value|0x0001
end_define
begin_define
DECL|macro|CTIME_CHANGED
define|#
directive|define
name|CTIME_CHANGED
value|0x0002
end_define
begin_define
DECL|macro|OWNER_CHANGED
define|#
directive|define
name|OWNER_CHANGED
value|0x0004
end_define
begin_define
DECL|macro|MODE_CHANGED
define|#
directive|define
name|MODE_CHANGED
value|0x0008
end_define
begin_define
DECL|macro|INODE_CHANGED
define|#
directive|define
name|INODE_CHANGED
value|0x0010
end_define
begin_define
DECL|macro|DATA_CHANGED
define|#
directive|define
name|DATA_CHANGED
value|0x0020
end_define
begin_define
DECL|macro|TYPE_CHANGED
define|#
directive|define
name|TYPE_CHANGED
value|0x0040
end_define
begin_function_decl
specifier|extern
name|char
modifier|*
name|mksnpath
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|3
operator|,
function_decl|4
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|git_snpath
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|3
operator|,
function_decl|4
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|git_pathdup
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|mkpathdup
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_comment
comment|/* Return a statically allocated filename matching the sha1 signature */
end_comment
begin_function_decl
specifier|extern
name|char
modifier|*
name|mkpath
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|git_path
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|git_path_submodule
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|2
operator|,
function_decl|3
end_function_decl
begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_file_name
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_pack_name
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_pack_index_name
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|find_unique_abbrev
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|unsigned
name|char
name|null_sha1
index|[
literal|20
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hashcmp
specifier|static
specifier|inline
name|int
name|hashcmp
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha2
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
operator|,
name|sha1
operator|++
operator|,
name|sha2
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|sha1
operator|!=
operator|*
name|sha2
condition|)
return|return
operator|*
name|sha1
operator|-
operator|*
name|sha2
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|is_null_sha1
specifier|static
specifier|inline
name|int
name|is_null_sha1
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
return|return
operator|!
name|hashcmp
argument_list|(
name|sha1
argument_list|,
name|null_sha1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hashcpy
specifier|static
specifier|inline
name|void
name|hashcpy
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha_dst
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|sha_src
parameter_list|)
block|{
name|memcpy
argument_list|(
name|sha_dst
argument_list|,
name|sha_src
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hashclr
specifier|static
specifier|inline
name|void
name|hashclr
parameter_list|(
name|unsigned
name|char
modifier|*
name|hash
parameter_list|)
block|{
name|memset
argument_list|(
name|hash
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|EMPTY_TREE_SHA1_HEX
define|#
directive|define
name|EMPTY_TREE_SHA1_HEX
define|\
value|"4b825dc642cb6eb9a060e54bf8d69288fbee4904"
end_define
begin_define
DECL|macro|EMPTY_TREE_SHA1_BIN_LITERAL
define|#
directive|define
name|EMPTY_TREE_SHA1_BIN_LITERAL
define|\
value|"\x4b\x82\x5d\xc6\x42\xcb\x6e\xb9\xa0\x60" \ 	 "\xe5\x4b\xf8\xd6\x92\x88\xfb\xee\x49\x04"
end_define
begin_define
DECL|macro|EMPTY_TREE_SHA1_BIN
define|#
directive|define
name|EMPTY_TREE_SHA1_BIN
define|\
value|((const unsigned char *) EMPTY_TREE_SHA1_BIN_LITERAL)
end_define
begin_define
DECL|macro|EMPTY_BLOB_SHA1_HEX
define|#
directive|define
name|EMPTY_BLOB_SHA1_HEX
define|\
value|"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"
end_define
begin_define
DECL|macro|EMPTY_BLOB_SHA1_BIN_LITERAL
define|#
directive|define
name|EMPTY_BLOB_SHA1_BIN_LITERAL
define|\
value|"\xe6\x9d\xe2\x9b\xb2\xd1\xd6\x43\x4b\x8b" \ 	"\x29\xae\x77\x5a\xd8\xc2\xe4\x8c\x53\x91"
end_define
begin_define
DECL|macro|EMPTY_BLOB_SHA1_BIN
define|#
directive|define
name|EMPTY_BLOB_SHA1_BIN
define|\
value|((const unsigned char *) EMPTY_BLOB_SHA1_BIN_LITERAL)
end_define
begin_function
DECL|function|is_empty_blob_sha1
specifier|static
specifier|inline
name|int
name|is_empty_blob_sha1
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
return|return
operator|!
name|hashcmp
argument_list|(
name|sha1
argument_list|,
name|EMPTY_BLOB_SHA1_BIN
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|int
name|git_mkstemp
parameter_list|(
name|char
modifier|*
name|path
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|template
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|git_mkstemps
parameter_list|(
name|char
modifier|*
name|path
parameter_list|,
name|size_t
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|template
parameter_list|,
name|int
name|suffix_len
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* set default permissions by passing mode arguments to open(2) */
end_comment
begin_function_decl
name|int
name|git_mkstemps_mode
parameter_list|(
name|char
modifier|*
name|pattern
parameter_list|,
name|int
name|suffix_len
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|git_mkstemp_mode
parameter_list|(
name|char
modifier|*
name|pattern
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * NOTE NOTE NOTE!!  *  * PERM_UMASK, OLD_PERM_GROUP and OLD_PERM_EVERYBODY enumerations must  * not be changed. Old repositories have core.sharedrepository written in  * numeric format, and therefore these values are preserved for compatibility  * reasons.  */
end_comment
begin_enum
DECL|enum|sharedrepo
enum|enum
name|sharedrepo
block|{
DECL|enumerator|PERM_UMASK
name|PERM_UMASK
init|=
literal|0
block|,
DECL|enumerator|OLD_PERM_GROUP
name|OLD_PERM_GROUP
init|=
literal|1
block|,
DECL|enumerator|OLD_PERM_EVERYBODY
name|OLD_PERM_EVERYBODY
init|=
literal|2
block|,
DECL|enumerator|PERM_GROUP
name|PERM_GROUP
init|=
literal|0660
block|,
DECL|enumerator|PERM_EVERYBODY
name|PERM_EVERYBODY
init|=
literal|0664
block|}
enum|;
end_enum
begin_function_decl
name|int
name|git_config_perm
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|adjust_shared_perm
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|safe_create_leading_directories
parameter_list|(
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|safe_create_leading_directories_const
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|mkdir_in_gitdir
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|home_config_paths
parameter_list|(
name|char
modifier|*
modifier|*
name|global
parameter_list|,
name|char
modifier|*
modifier|*
name|xdg
parameter_list|,
name|char
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|expand_user_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|enter_repo
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|strict
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|is_absolute_path
specifier|static
specifier|inline
name|int
name|is_absolute_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
block|{
return|return
name|is_dir_sep
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|)
operator|||
name|has_dos_drive_prefix
argument_list|(
name|path
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|int
name|is_directory
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|real_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|real_path_if_valid
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|absolute_path
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|char
modifier|*
name|relative_path
parameter_list|(
specifier|const
name|char
modifier|*
name|in
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|struct
name|strbuf
modifier|*
name|sb
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|normalize_path_copy
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|longest_ancestor_length
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|struct
name|string_list
modifier|*
name|prefixes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|strip_path_suffix
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|suffix
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|daemon_avoid_alias
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|offset_1st_component
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* object replacement */
end_comment
begin_define
DECL|macro|READ_SHA1_FILE_REPLACE
define|#
directive|define
name|READ_SHA1_FILE_REPLACE
value|1
end_define
begin_function_decl
specifier|extern
name|void
modifier|*
name|read_sha1_file_extended
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|enum
name|object_type
modifier|*
name|type
parameter_list|,
name|unsigned
name|long
modifier|*
name|size
parameter_list|,
name|unsigned
name|flag
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|read_sha1_file
specifier|static
specifier|inline
name|void
modifier|*
name|read_sha1_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|enum
name|object_type
modifier|*
name|type
parameter_list|,
name|unsigned
name|long
modifier|*
name|size
parameter_list|)
block|{
return|return
name|read_sha1_file_extended
argument_list|(
name|sha1
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|READ_SHA1_FILE_REPLACE
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|extern
specifier|const
name|unsigned
name|char
modifier|*
name|do_lookup_replace_object
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|lookup_replace_object
specifier|static
specifier|inline
specifier|const
name|unsigned
name|char
modifier|*
name|lookup_replace_object
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
block|{
if|if
condition|(
operator|!
name|read_replace_refs
condition|)
return|return
name|sha1
return|;
return|return
name|do_lookup_replace_object
argument_list|(
name|sha1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/* Read and unpack a sha1 file into memory, write memory to a sha1 file */
end_comment
begin_function_decl
specifier|extern
name|int
name|sha1_object_info
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|hash_sha1_file
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_sha1_file
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|unsigned
name|char
modifier|*
name|return_sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|pretend_sha1_file
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|enum
name|object_type
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|force_object_loose
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|time_t
name|mtime
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|map_sha1_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|unsigned
name|long
modifier|*
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|unpack_sha1_header
parameter_list|(
name|git_zstream
modifier|*
name|stream
parameter_list|,
name|unsigned
name|char
modifier|*
name|map
parameter_list|,
name|unsigned
name|long
name|mapsize
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|unsigned
name|long
name|bufsiz
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|parse_sha1_header
parameter_list|(
specifier|const
name|char
modifier|*
name|hdr
parameter_list|,
name|unsigned
name|long
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* global flag to enable extra checks when accessing packed objects */
end_comment
begin_decl_stmt
specifier|extern
name|int
name|do_check_packed_object_crc
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|check_sha1_signature
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|move_temp_to_file
parameter_list|(
specifier|const
name|char
modifier|*
name|tmpfile
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_sha1_pack
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_sha1_file
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_loose_object_nonlocal
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_pack_index
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|assert_sha1_type
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|enum
name|object_type
name|expect
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|signed
name|char
name|hexval_table
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hexval
specifier|static
specifier|inline
name|unsigned
name|int
name|hexval
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
return|return
name|hexval_table
index|[
name|c
index|]
return|;
block|}
end_function
begin_comment
comment|/* Convert to/from hex/sha1 representation */
end_comment
begin_define
DECL|macro|MINIMUM_ABBREV
define|#
directive|define
name|MINIMUM_ABBREV
value|minimum_abbrev
end_define
begin_define
DECL|macro|DEFAULT_ABBREV
define|#
directive|define
name|DEFAULT_ABBREV
value|default_abbrev
end_define
begin_struct
DECL|struct|object_context
struct|struct
name|object_context
block|{
DECL|member|tree
name|unsigned
name|char
name|tree
index|[
literal|20
index|]
decl_stmt|;
DECL|member|path
name|char
name|path
index|[
name|PATH_MAX
index|]
decl_stmt|;
DECL|member|mode
name|unsigned
name|mode
decl_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|GET_SHA1_QUIETLY
define|#
directive|define
name|GET_SHA1_QUIETLY
value|01
end_define
begin_define
DECL|macro|GET_SHA1_COMMIT
define|#
directive|define
name|GET_SHA1_COMMIT
value|02
end_define
begin_define
DECL|macro|GET_SHA1_COMMITTISH
define|#
directive|define
name|GET_SHA1_COMMITTISH
value|04
end_define
begin_define
DECL|macro|GET_SHA1_TREE
define|#
directive|define
name|GET_SHA1_TREE
value|010
end_define
begin_define
DECL|macro|GET_SHA1_TREEISH
define|#
directive|define
name|GET_SHA1_TREEISH
value|020
end_define
begin_define
DECL|macro|GET_SHA1_BLOB
define|#
directive|define
name|GET_SHA1_BLOB
value|040
end_define
begin_define
DECL|macro|GET_SHA1_ONLY_TO_DIE
define|#
directive|define
name|GET_SHA1_ONLY_TO_DIE
value|04000
end_define
begin_function_decl
specifier|extern
name|int
name|get_sha1
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_commit
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_committish
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_tree
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_treeish
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_blob
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|maybe_die_on_misspelt_object_name
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_with_context
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|flags
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|struct
name|object_context
modifier|*
name|orc
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|typedef|each_abbrev_fn
typedef|typedef
name|int
name|each_abbrev_fn
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
specifier|extern
name|int
name|for_each_abbrev
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|each_abbrev_fn
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Try to read a SHA1 in hexadecimal format from the 40 characters  * starting at hex.  Write the 20-byte result to sha1 in binary form.  * Return 0 on success.  Reading stops if a NUL is encountered in the  * input, so it is safe to pass this function an arbitrary  * null-terminated string.  */
end_comment
begin_function_decl
specifier|extern
name|int
name|get_sha1_hex
parameter_list|(
specifier|const
name|char
modifier|*
name|hex
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|sha1_to_hex
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* static buffer result! */
end_comment
begin_function_decl
specifier|extern
name|int
name|read_ref_full
parameter_list|(
specifier|const
name|char
modifier|*
name|refname
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|reading
parameter_list|,
name|int
modifier|*
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|read_ref
parameter_list|(
specifier|const
name|char
modifier|*
name|refname
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Resolve a reference, recursively following symbolic refererences.  *  * Store the referred-to object's name in sha1 and return the name of  * the non-symbolic reference that ultimately pointed at it.  The  * return value, if not NULL, is a pointer into either a static buffer  * or the input ref.  *  * If the reference cannot be resolved to an object, the behavior  * depends on the "reading" argument:  *  * - If reading is set, return NULL.  *  * - If reading is not set, clear sha1 and return the name of the last  *   reference name in the chain, which will either be a non-symbolic  *   reference or an undefined reference.  If this is a prelude to  *   "writing" to the ref, the return value is the name of the ref  *   that will actually be created or changed.  *  * If flag is non-NULL, set the value that it points to the  * combination of REF_ISPACKED (if the reference was found among the  * packed references) and REF_ISSYMREF (if the initial reference was a  * symbolic reference).  *  * If ref is not a properly-formatted, normalized reference, return  * NULL.  If more than MAXDEPTH recursive symbolic lookups are needed,  * give up and return NULL.  *  * errno is sometimes set on errors, but not always.  */
end_comment
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|resolve_ref_unsafe
parameter_list|(
specifier|const
name|char
modifier|*
name|ref
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|reading
parameter_list|,
name|int
modifier|*
name|flag
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|resolve_refdup
parameter_list|(
specifier|const
name|char
modifier|*
name|ref
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|int
name|reading
parameter_list|,
name|int
modifier|*
name|flag
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|dwim_ref
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|char
modifier|*
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|dwim_log
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|char
modifier|*
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|interpret_branch_name
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|struct
name|strbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|get_sha1_mb
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|refname_match
parameter_list|(
specifier|const
name|char
modifier|*
name|abbrev_name
parameter_list|,
specifier|const
name|char
modifier|*
name|full_name
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|rules
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|ref_rev_parse_rules
index|[]
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|ref_fetch_rules
define|#
directive|define
name|ref_fetch_rules
value|ref_rev_parse_rules
end_define
begin_function_decl
specifier|extern
name|int
name|create_symref
parameter_list|(
specifier|const
name|char
modifier|*
name|ref
parameter_list|,
specifier|const
name|char
modifier|*
name|refs_heads_master
parameter_list|,
specifier|const
name|char
modifier|*
name|logmsg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|validate_headref
parameter_list|(
specifier|const
name|char
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|base_name_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|name1
parameter_list|,
name|int
name|len1
parameter_list|,
name|int
name|mode1
parameter_list|,
specifier|const
name|char
modifier|*
name|name2
parameter_list|,
name|int
name|len2
parameter_list|,
name|int
name|mode2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|df_name_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|name1
parameter_list|,
name|int
name|len1
parameter_list|,
name|int
name|mode1
parameter_list|,
specifier|const
name|char
modifier|*
name|name2
parameter_list|,
name|int
name|len2
parameter_list|,
name|int
name|mode2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|cache_name_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|name1
parameter_list|,
name|int
name|len1
parameter_list|,
specifier|const
name|char
modifier|*
name|name2
parameter_list|,
name|int
name|len2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|cache_name_stage_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|name1
parameter_list|,
name|int
name|len1
parameter_list|,
name|int
name|stage1
parameter_list|,
specifier|const
name|char
modifier|*
name|name2
parameter_list|,
name|int
name|len2
parameter_list|,
name|int
name|stage2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|read_object_with_reference
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|required_type
parameter_list|,
name|unsigned
name|long
modifier|*
name|size
parameter_list|,
name|unsigned
name|char
modifier|*
name|sha1_ret
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|object
modifier|*
name|peel_to_type
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|,
name|struct
name|object
modifier|*
name|o
parameter_list|,
name|enum
name|object_type
parameter_list|)
function_decl|;
end_function_decl
begin_enum
DECL|enum|date_mode
enum|enum
name|date_mode
block|{
DECL|enumerator|DATE_NORMAL
name|DATE_NORMAL
init|=
literal|0
block|,
DECL|enumerator|DATE_RELATIVE
name|DATE_RELATIVE
block|,
DECL|enumerator|DATE_SHORT
name|DATE_SHORT
block|,
DECL|enumerator|DATE_LOCAL
name|DATE_LOCAL
block|,
DECL|enumerator|DATE_ISO8601
name|DATE_ISO8601
block|,
DECL|enumerator|DATE_RFC2822
name|DATE_RFC2822
block|,
DECL|enumerator|DATE_RAW
name|DATE_RAW
block|}
enum|;
end_enum
begin_function_decl
specifier|const
name|char
modifier|*
name|show_date
parameter_list|(
name|unsigned
name|long
name|time
parameter_list|,
name|int
name|timezone
parameter_list|,
name|enum
name|date_mode
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|show_date_relative
parameter_list|(
name|unsigned
name|long
name|time
parameter_list|,
name|int
name|tz
parameter_list|,
specifier|const
name|struct
name|timeval
modifier|*
name|now
parameter_list|,
name|struct
name|strbuf
modifier|*
name|timebuf
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|parse_date
parameter_list|(
specifier|const
name|char
modifier|*
name|date
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsize
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|parse_date_basic
parameter_list|(
specifier|const
name|char
modifier|*
name|date
parameter_list|,
name|unsigned
name|long
modifier|*
name|timestamp
parameter_list|,
name|int
modifier|*
name|offset
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|parse_expiry_date
parameter_list|(
specifier|const
name|char
modifier|*
name|date
parameter_list|,
name|unsigned
name|long
modifier|*
name|timestamp
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|datestamp
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsize
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|approxidate
define|#
directive|define
name|approxidate
parameter_list|(
name|s
parameter_list|)
value|approxidate_careful((s), NULL)
end_define
begin_function_decl
name|unsigned
name|long
name|approxidate_careful
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|unsigned
name|long
name|approxidate_relative
parameter_list|(
specifier|const
name|char
modifier|*
name|date
parameter_list|,
specifier|const
name|struct
name|timeval
modifier|*
name|now
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|enum
name|date_mode
name|parse_date_format
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|IDENT_STRICT
define|#
directive|define
name|IDENT_STRICT
value|1
end_define
begin_define
DECL|macro|IDENT_NO_DATE
define|#
directive|define
name|IDENT_NO_DATE
value|2
end_define
begin_define
DECL|macro|IDENT_NO_NAME
define|#
directive|define
name|IDENT_NO_NAME
value|4
end_define
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_author_info
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_committer_info
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|fmt_ident
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|email
parameter_list|,
specifier|const
name|char
modifier|*
name|date_str
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|fmt_name
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|email
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|ident_default_email
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_editor
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_pager
parameter_list|(
name|int
name|stdout_is_tty
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_ident_config
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|ident_split
struct|struct
name|ident_split
block|{
DECL|member|name_begin
specifier|const
name|char
modifier|*
name|name_begin
decl_stmt|;
DECL|member|name_end
specifier|const
name|char
modifier|*
name|name_end
decl_stmt|;
DECL|member|mail_begin
specifier|const
name|char
modifier|*
name|mail_begin
decl_stmt|;
DECL|member|mail_end
specifier|const
name|char
modifier|*
name|mail_end
decl_stmt|;
DECL|member|date_begin
specifier|const
name|char
modifier|*
name|date_begin
decl_stmt|;
DECL|member|date_end
specifier|const
name|char
modifier|*
name|date_end
decl_stmt|;
DECL|member|tz_begin
specifier|const
name|char
modifier|*
name|tz_begin
decl_stmt|;
DECL|member|tz_end
specifier|const
name|char
modifier|*
name|tz_end
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|/*  * Signals an success with 0, but time part of the result may be NULL  * if the input lacks timestamp and zone  */
end_comment
begin_function_decl
specifier|extern
name|int
name|split_ident_line
parameter_list|(
name|struct
name|ident_split
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|checkout
struct|struct
name|checkout
block|{
DECL|member|base_dir
specifier|const
name|char
modifier|*
name|base_dir
decl_stmt|;
DECL|member|base_dir_len
name|int
name|base_dir_len
decl_stmt|;
DECL|member|force
name|unsigned
name|force
range|:
literal|1
decl_stmt|,
DECL|member|quiet
name|quiet
range|:
literal|1
decl_stmt|,
DECL|member|not_new
name|not_new
range|:
literal|1
decl_stmt|,
DECL|member|refresh_cache
name|refresh_cache
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|int
name|checkout_entry
parameter_list|(
name|struct
name|cache_entry
modifier|*
name|ce
parameter_list|,
specifier|const
name|struct
name|checkout
modifier|*
name|state
parameter_list|,
name|char
modifier|*
name|topath
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|cache_def
struct|struct
name|cache_def
block|{
DECL|member|path
name|char
name|path
index|[
name|PATH_MAX
operator|+
literal|1
index|]
decl_stmt|;
DECL|member|len
name|int
name|len
decl_stmt|;
DECL|member|flags
name|int
name|flags
decl_stmt|;
DECL|member|track_flags
name|int
name|track_flags
decl_stmt|;
DECL|member|prefix_len_stat_func
name|int
name|prefix_len_stat_func
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|int
name|has_symlink_leading_path
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|threaded_has_symlink_leading_path
parameter_list|(
name|struct
name|cache_def
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|check_leading_path
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|has_dirs_only_path
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|prefix_len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|schedule_dir_for_removal
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|remove_scheduled_dirs
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|alternate_object_database
specifier|extern
struct|struct
name|alternate_object_database
block|{
DECL|member|next
name|struct
name|alternate_object_database
modifier|*
name|next
decl_stmt|;
DECL|member|name
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|base
name|char
name|base
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
modifier|*
name|alt_odb_list
struct|;
end_struct
begin_function_decl
specifier|extern
name|void
name|prepare_alt_odb
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|read_info_alternates
parameter_list|(
specifier|const
name|char
modifier|*
name|relative_base
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|add_to_alternates_file
parameter_list|(
specifier|const
name|char
modifier|*
name|reference
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|typedef|alt_odb_fn
typedef|typedef
name|int
name|alt_odb_fn
parameter_list|(
name|struct
name|alternate_object_database
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
specifier|extern
name|void
name|foreach_alt_odb
parameter_list|(
name|alt_odb_fn
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|pack_window
struct|struct
name|pack_window
block|{
DECL|member|next
name|struct
name|pack_window
modifier|*
name|next
decl_stmt|;
DECL|member|base
name|unsigned
name|char
modifier|*
name|base
decl_stmt|;
DECL|member|offset
name|off_t
name|offset
decl_stmt|;
DECL|member|len
name|size_t
name|len
decl_stmt|;
DECL|member|last_used
name|unsigned
name|int
name|last_used
decl_stmt|;
DECL|member|inuse_cnt
name|unsigned
name|int
name|inuse_cnt
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|packed_git
specifier|extern
struct|struct
name|packed_git
block|{
DECL|member|next
name|struct
name|packed_git
modifier|*
name|next
decl_stmt|;
DECL|member|windows
name|struct
name|pack_window
modifier|*
name|windows
decl_stmt|;
DECL|member|pack_size
name|off_t
name|pack_size
decl_stmt|;
DECL|member|index_data
specifier|const
name|void
modifier|*
name|index_data
decl_stmt|;
DECL|member|index_size
name|size_t
name|index_size
decl_stmt|;
DECL|member|num_objects
name|uint32_t
name|num_objects
decl_stmt|;
DECL|member|num_bad_objects
name|uint32_t
name|num_bad_objects
decl_stmt|;
DECL|member|bad_object_sha1
name|unsigned
name|char
modifier|*
name|bad_object_sha1
decl_stmt|;
DECL|member|index_version
name|int
name|index_version
decl_stmt|;
DECL|member|mtime
name|time_t
name|mtime
decl_stmt|;
DECL|member|pack_fd
name|int
name|pack_fd
decl_stmt|;
DECL|member|pack_local
name|unsigned
name|pack_local
range|:
literal|1
decl_stmt|,
DECL|member|pack_keep
name|pack_keep
range|:
literal|1
decl_stmt|,
DECL|member|do_not_close
name|do_not_close
range|:
literal|1
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
comment|/* something like ".git/objects/pack/xxxxx.pack" */
DECL|member|pack_name
name|char
name|pack_name
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
modifier|*
name|packed_git
struct|;
end_struct
begin_struct
DECL|struct|pack_entry
struct|struct
name|pack_entry
block|{
DECL|member|offset
name|off_t
name|offset
decl_stmt|;
DECL|member|sha1
name|unsigned
name|char
name|sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|p
name|struct
name|packed_git
modifier|*
name|p
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|ref
struct|struct
name|ref
block|{
DECL|member|next
name|struct
name|ref
modifier|*
name|next
decl_stmt|;
DECL|member|old_sha1
name|unsigned
name|char
name|old_sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|new_sha1
name|unsigned
name|char
name|new_sha1
index|[
literal|20
index|]
decl_stmt|;
DECL|member|symref
name|char
modifier|*
name|symref
decl_stmt|;
name|unsigned
name|int
DECL|member|force
name|force
range|:
literal|1
decl_stmt|,
DECL|member|forced_update
name|forced_update
range|:
literal|1
decl_stmt|,
DECL|member|deletion
name|deletion
range|:
literal|1
decl_stmt|,
DECL|member|matched
name|matched
range|:
literal|1
decl_stmt|;
comment|/* 	 * Order is important here, as we write to FETCH_HEAD 	 * in numeric order. And the default NOT_FOR_MERGE 	 * should be 0, so that xcalloc'd structures get it 	 * by default. 	 */
enum|enum
block|{
DECL|enumerator|FETCH_HEAD_MERGE
name|FETCH_HEAD_MERGE
init|=
operator|-
literal|1
block|,
DECL|enumerator|FETCH_HEAD_NOT_FOR_MERGE
name|FETCH_HEAD_NOT_FOR_MERGE
init|=
literal|0
block|,
DECL|enumerator|FETCH_HEAD_IGNORE
name|FETCH_HEAD_IGNORE
init|=
literal|1
block|}
DECL|member|fetch_head_status
name|fetch_head_status
enum|;
enum|enum
block|{
DECL|enumerator|REF_STATUS_NONE
name|REF_STATUS_NONE
init|=
literal|0
block|,
DECL|enumerator|REF_STATUS_OK
name|REF_STATUS_OK
block|,
DECL|enumerator|REF_STATUS_REJECT_NONFASTFORWARD
name|REF_STATUS_REJECT_NONFASTFORWARD
block|,
DECL|enumerator|REF_STATUS_REJECT_ALREADY_EXISTS
name|REF_STATUS_REJECT_ALREADY_EXISTS
block|,
DECL|enumerator|REF_STATUS_REJECT_NODELETE
name|REF_STATUS_REJECT_NODELETE
block|,
DECL|enumerator|REF_STATUS_REJECT_FETCH_FIRST
name|REF_STATUS_REJECT_FETCH_FIRST
block|,
DECL|enumerator|REF_STATUS_REJECT_NEEDS_FORCE
name|REF_STATUS_REJECT_NEEDS_FORCE
block|,
DECL|enumerator|REF_STATUS_UPTODATE
name|REF_STATUS_UPTODATE
block|,
DECL|enumerator|REF_STATUS_REMOTE_REJECT
name|REF_STATUS_REMOTE_REJECT
block|,
DECL|enumerator|REF_STATUS_EXPECTING_REPORT
name|REF_STATUS_EXPECTING_REPORT
block|}
DECL|member|status
name|status
enum|;
DECL|member|remote_status
name|char
modifier|*
name|remote_status
decl_stmt|;
DECL|member|peer_ref
name|struct
name|ref
modifier|*
name|peer_ref
decl_stmt|;
comment|/* when renaming */
DECL|member|name
name|char
name|name
index|[
name|FLEX_ARRAY
index|]
decl_stmt|;
comment|/* more */
block|}
struct|;
end_struct
begin_define
DECL|macro|REF_NORMAL
define|#
directive|define
name|REF_NORMAL
value|(1u<< 0)
end_define
begin_define
DECL|macro|REF_HEADS
define|#
directive|define
name|REF_HEADS
value|(1u<< 1)
end_define
begin_define
DECL|macro|REF_TAGS
define|#
directive|define
name|REF_TAGS
value|(1u<< 2)
end_define
begin_function_decl
specifier|extern
name|struct
name|ref
modifier|*
name|find_ref_by_name
parameter_list|(
specifier|const
name|struct
name|ref
modifier|*
name|list
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|CONNECT_VERBOSE
define|#
directive|define
name|CONNECT_VERBOSE
value|(1u<< 0)
end_define
begin_function_decl
specifier|extern
name|struct
name|child_process
modifier|*
name|git_connect
parameter_list|(
name|int
name|fd
index|[
literal|2
index|]
parameter_list|,
specifier|const
name|char
modifier|*
name|url
parameter_list|,
specifier|const
name|char
modifier|*
name|prog
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|finish_connect
parameter_list|(
name|struct
name|child_process
modifier|*
name|conn
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_connection_is_socket
parameter_list|(
name|struct
name|child_process
modifier|*
name|conn
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|extra_have_objects
struct|struct
name|extra_have_objects
block|{
DECL|member|nr
DECL|member|alloc
name|int
name|nr
decl_stmt|,
name|alloc
decl_stmt|;
DECL|member|array
name|unsigned
name|char
argument_list|(
operator|*
name|array
argument_list|)
decl|[20]
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|struct
name|ref
modifier|*
modifier|*
name|get_remote_heads
parameter_list|(
name|int
name|in
parameter_list|,
name|char
modifier|*
name|src_buf
parameter_list|,
name|size_t
name|src_len
parameter_list|,
name|struct
name|ref
modifier|*
modifier|*
name|list
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|,
name|struct
name|extra_have_objects
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|server_supports
parameter_list|(
specifier|const
name|char
modifier|*
name|feature
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|parse_feature_request
parameter_list|(
specifier|const
name|char
modifier|*
name|features
parameter_list|,
specifier|const
name|char
modifier|*
name|feature
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|server_feature_value
parameter_list|(
specifier|const
name|char
modifier|*
name|feature
parameter_list|,
name|int
modifier|*
name|len_ret
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|parse_feature_value
parameter_list|(
specifier|const
name|char
modifier|*
name|feature_list
parameter_list|,
specifier|const
name|char
modifier|*
name|feature
parameter_list|,
name|int
modifier|*
name|len_ret
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|parse_pack_index
parameter_list|(
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
specifier|const
name|char
modifier|*
name|idx_path
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* A hook for count-objects to report invalid files in pack directory */
end_comment
begin_function_decl
specifier|extern
name|void
function_decl|(
modifier|*
name|report_garbage
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|desc
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|prepare_packed_git
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|reprepare_packed_git
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|install_packed_git
parameter_list|(
name|struct
name|packed_git
modifier|*
name|pack
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|find_sha1_pack
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|sha1
parameter_list|,
name|struct
name|packed_git
modifier|*
name|packs
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|pack_report
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|open_pack_index
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|close_pack_index
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|char
modifier|*
name|use_pack
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|,
name|off_t
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|close_pack_windows
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|unuse_pack
parameter_list|(
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|free_pack_by_name
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|clear_delta_base_cache
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|struct
name|packed_git
modifier|*
name|add_packed_git
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|unsigned
name|char
modifier|*
name|nth_packed_object_sha1
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|off_t
name|nth_packed_object_offset
parameter_list|(
specifier|const
name|struct
name|packed_git
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|off_t
name|find_pack_entry_one
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|struct
name|packed_git
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|is_pack_valid
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|unpack_entry
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|off_t
parameter_list|,
name|enum
name|object_type
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|long
name|unpack_object_header_buffer
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|,
name|enum
name|object_type
modifier|*
name|type
parameter_list|,
name|unsigned
name|long
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|long
name|get_size_from_delta
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|,
name|off_t
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|unpack_object_header
parameter_list|(
name|struct
name|packed_git
modifier|*
parameter_list|,
name|struct
name|pack_window
modifier|*
modifier|*
parameter_list|,
name|off_t
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|object_info
struct|struct
name|object_info
block|{
comment|/* Request */
DECL|member|sizep
name|unsigned
name|long
modifier|*
name|sizep
decl_stmt|;
DECL|member|disk_sizep
name|unsigned
name|long
modifier|*
name|disk_sizep
decl_stmt|;
comment|/* Response */
enum|enum
block|{
DECL|enumerator|OI_CACHED
name|OI_CACHED
block|,
DECL|enumerator|OI_LOOSE
name|OI_LOOSE
block|,
DECL|enumerator|OI_PACKED
name|OI_PACKED
block|,
DECL|enumerator|OI_DBCACHED
name|OI_DBCACHED
block|}
DECL|member|whence
name|whence
enum|;
union|union
block|{
comment|/* 		 * struct { 		 * 	... Nothing to expose in this case 		 * } cached; 		 * struct { 		 * 	... Nothing to expose in this case 		 * } loose; 		 */
struct|struct
block|{
DECL|member|pack
name|struct
name|packed_git
modifier|*
name|pack
decl_stmt|;
DECL|member|offset
name|off_t
name|offset
decl_stmt|;
DECL|member|is_delta
name|unsigned
name|int
name|is_delta
decl_stmt|;
block|}
DECL|member|packed
name|packed
struct|;
block|}
DECL|member|u
name|u
union|;
block|}
struct|;
end_struct
begin_function_decl
specifier|extern
name|int
name|sha1_object_info_extended
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|struct
name|object_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Dumb servers support */
end_comment
begin_function_decl
specifier|extern
name|int
name|update_server_info
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* git_config_parse_key() returns these negated: */
end_comment
begin_define
DECL|macro|CONFIG_INVALID_KEY
define|#
directive|define
name|CONFIG_INVALID_KEY
value|1
end_define
begin_define
DECL|macro|CONFIG_NO_SECTION_OR_NAME
define|#
directive|define
name|CONFIG_NO_SECTION_OR_NAME
value|2
end_define
begin_comment
comment|/* git_config_set(), git_config_set_multivar() return the above or these: */
end_comment
begin_define
DECL|macro|CONFIG_NO_LOCK
define|#
directive|define
name|CONFIG_NO_LOCK
value|-1
end_define
begin_define
DECL|macro|CONFIG_INVALID_FILE
define|#
directive|define
name|CONFIG_INVALID_FILE
value|3
end_define
begin_define
DECL|macro|CONFIG_NO_WRITE
define|#
directive|define
name|CONFIG_NO_WRITE
value|4
end_define
begin_define
DECL|macro|CONFIG_NOTHING_SET
define|#
directive|define
name|CONFIG_NOTHING_SET
value|5
end_define
begin_define
DECL|macro|CONFIG_INVALID_PATTERN
define|#
directive|define
name|CONFIG_INVALID_PATTERN
value|6
end_define
begin_define
DECL|macro|CONFIG_GENERIC_ERROR
define|#
directive|define
name|CONFIG_GENERIC_ERROR
value|7
end_define
begin_typedef
DECL|typedef|config_fn_t
typedef|typedef
name|int
function_decl|(
modifier|*
name|config_fn_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
specifier|extern
name|int
name|git_default_config
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_from_file
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_from_buf
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|git_config_push_parameter
parameter_list|(
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_from_parameters
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_with_options
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|blob_ref
parameter_list|,
name|int
name|respect_includes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_early
parameter_list|(
name|config_fn_t
name|fn
parameter_list|,
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|repo_config
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_parse_ulong
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_int
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|long
name|git_config_ulong
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_bool_or_int
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_bool
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_maybe_bool
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_string
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_pathname
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_set_in_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_set
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_parse_key
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_set_multivar
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_set_multivar_in_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_rename_section
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_rename_section_in_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|git_etc_gitconfig
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|check_repository_format_version
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|,
name|void
modifier|*
name|cb
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_env_bool
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_system
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|config_error_nonbool
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__clang__
argument_list|)
end_if
begin_define
DECL|macro|config_error_nonbool
define|#
directive|define
name|config_error_nonbool
parameter_list|(
name|s
parameter_list|)
value|(config_error_nonbool(s), -1)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|get_log_output_encoding
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|get_commit_output_encoding
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|git_config_parse_parameter
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|config_fn_t
name|fn
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|config_include_data
struct|struct
name|config_include_data
block|{
DECL|member|depth
name|int
name|depth
decl_stmt|;
DECL|member|fn
name|config_fn_t
name|fn
decl_stmt|;
DECL|member|data
name|void
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct
begin_define
DECL|macro|CONFIG_INCLUDE_INIT
define|#
directive|define
name|CONFIG_INCLUDE_INIT
value|{ 0 }
end_define
begin_function_decl
specifier|extern
name|int
name|git_config_include
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Match and parse a config key of the form:  *  *   section.(subsection.)?key  *  * (i.e., what gets handed to a config_fn_t). The caller provides the section;  * we return -1 if it does not match, 0 otherwise. The subsection and key  * out-parameters are filled by the function (and subsection is NULL if it is  * missing).  */
end_comment
begin_function_decl
specifier|extern
name|int
name|parse_config_key
parameter_list|(
specifier|const
name|char
modifier|*
name|var
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|subsection
parameter_list|,
name|int
modifier|*
name|subsection_len
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|committer_ident_sufficiently_given
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|author_ident_sufficiently_given
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_commit_encoding
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_log_output_encoding
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_mailmap_file
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|git_mailmap_blob
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* IO helper functions */
end_comment
begin_function_decl
specifier|extern
name|void
name|maybe_flush_or_die
parameter_list|(
name|FILE
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|copy_fd
parameter_list|(
name|int
name|ifd
parameter_list|,
name|int
name|ofd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|copy_file
parameter_list|(
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|copy_file_with_time
parameter_list|(
specifier|const
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|write_or_die
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_or_whine
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|write_or_whine_pipe
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|fsync_or_die
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|ssize_t
name|read_in_full
parameter_list|(
name|int
name|fd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|ssize_t
name|write_in_full
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|write_str_in_full
specifier|static
specifier|inline
name|ssize_t
name|write_str_in_full
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
return|return
name|write_in_full
argument_list|(
name|fd
argument_list|,
name|str
argument_list|,
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/* pager.c */
end_comment
begin_function_decl
specifier|extern
name|void
name|setup_pager
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|pager_program
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|pager_in_use
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
name|int
name|pager_use_color
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|int
name|term_columns
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|decimal_width
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|check_pager_config
parameter_list|(
specifier|const
name|char
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|editor_program
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|askpass_program
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|excludes_file
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* base85 */
end_comment
begin_function_decl
name|int
name|decode_85
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|line
parameter_list|,
name|int
name|linelen
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|encode_85
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|bytes
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* alloc.c */
end_comment
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_blob_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_tree_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_commit_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_tag_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
modifier|*
name|alloc_object_node
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|alloc_report
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* trace.c */
end_comment
begin_macro
name|__attribute__
argument_list|(
argument|(format (printf,
literal|1
argument|,
literal|2
argument|))
argument_list|)
end_macro
begin_function_decl
specifier|extern
name|void
name|trace_printf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|__attribute__
argument_list|(
argument|(format (printf,
literal|2
argument|,
literal|3
argument|))
argument_list|)
end_macro
begin_function_decl
specifier|extern
name|void
name|trace_argv_printf
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|trace_repo_setup
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|trace_want
parameter_list|(
specifier|const
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|trace_strbuf
parameter_list|(
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|struct
name|strbuf
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|packet_trace_identity
parameter_list|(
specifier|const
name|char
modifier|*
name|prog
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* add */
end_comment
begin_comment
comment|/*  * return 0 if success, 1 - if addition of a file failed and  * ADD_FILES_IGNORE_ERRORS was specified in flags  */
end_comment
begin_function_decl
name|int
name|add_files_to_cache
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* diff.c */
end_comment
begin_decl_stmt
specifier|extern
name|int
name|diff_auto_refresh_index
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* match-trees.c */
end_comment
begin_function_decl
name|void
name|shift_tree
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|shift_tree_by
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * whitespace rules.  * used by both diff and apply  * last two digits are tab width  */
end_comment
begin_define
DECL|macro|WS_BLANK_AT_EOL
define|#
directive|define
name|WS_BLANK_AT_EOL
value|0100
end_define
begin_define
DECL|macro|WS_SPACE_BEFORE_TAB
define|#
directive|define
name|WS_SPACE_BEFORE_TAB
value|0200
end_define
begin_define
DECL|macro|WS_INDENT_WITH_NON_TAB
define|#
directive|define
name|WS_INDENT_WITH_NON_TAB
value|0400
end_define
begin_define
DECL|macro|WS_CR_AT_EOL
define|#
directive|define
name|WS_CR_AT_EOL
value|01000
end_define
begin_define
DECL|macro|WS_BLANK_AT_EOF
define|#
directive|define
name|WS_BLANK_AT_EOF
value|02000
end_define
begin_define
DECL|macro|WS_TAB_IN_INDENT
define|#
directive|define
name|WS_TAB_IN_INDENT
value|04000
end_define
begin_define
DECL|macro|WS_TRAILING_SPACE
define|#
directive|define
name|WS_TRAILING_SPACE
value|(WS_BLANK_AT_EOL|WS_BLANK_AT_EOF)
end_define
begin_define
DECL|macro|WS_DEFAULT_RULE
define|#
directive|define
name|WS_DEFAULT_RULE
value|(WS_TRAILING_SPACE|WS_SPACE_BEFORE_TAB|8)
end_define
begin_define
DECL|macro|WS_TAB_WIDTH_MASK
define|#
directive|define
name|WS_TAB_WIDTH_MASK
value|077
end_define
begin_decl_stmt
specifier|extern
name|unsigned
name|whitespace_rule_cfg
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|extern
name|unsigned
name|whitespace_rule
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|parse_whitespace_rule
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|ws_check
parameter_list|(
specifier|const
name|char
modifier|*
name|line
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|ws_rule
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|ws_check_emit
parameter_list|(
specifier|const
name|char
modifier|*
name|line
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|ws_rule
parameter_list|,
name|FILE
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|set
parameter_list|,
specifier|const
name|char
modifier|*
name|reset
parameter_list|,
specifier|const
name|char
modifier|*
name|ws
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|char
modifier|*
name|whitespace_error_string
parameter_list|(
name|unsigned
name|ws
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|ws_fix_copy
parameter_list|(
name|struct
name|strbuf
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|unsigned
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|int
name|ws_blank_line
parameter_list|(
specifier|const
name|char
modifier|*
name|line
parameter_list|,
name|int
name|len
parameter_list|,
name|unsigned
name|ws_rule
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|ws_tab_width
define|#
directive|define
name|ws_tab_width
parameter_list|(
name|rule
parameter_list|)
value|((rule)& WS_TAB_WIDTH_MASK)
end_define
begin_comment
comment|/* ls-files */
end_comment
begin_function_decl
name|int
name|report_path_error
parameter_list|(
specifier|const
name|char
modifier|*
name|ps_matched
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|pathspec
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|overlay_tree_on_cache
parameter_list|(
specifier|const
name|char
modifier|*
name|tree_name
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|char
modifier|*
name|alias_lookup
parameter_list|(
specifier|const
name|char
modifier|*
name|alias
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|split_cmdline
parameter_list|(
name|char
modifier|*
name|cmdline
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* Takes a negative value returned by split_cmdline */
end_comment
begin_function_decl
specifier|const
name|char
modifier|*
name|split_cmdline_strerror
parameter_list|(
name|int
name|cmdline_errno
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/* git.c */
end_comment
begin_struct
DECL|struct|startup_info
struct|struct
name|startup_info
block|{
DECL|member|have_repository
name|int
name|have_repository
decl_stmt|;
DECL|member|prefix
specifier|const
name|char
modifier|*
name|prefix
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
specifier|extern
name|struct
name|startup_info
modifier|*
name|startup_info
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* merge.c */
end_comment
begin_struct_decl
struct_decl|struct
name|commit_list
struct_decl|;
end_struct_decl
begin_function_decl
name|int
name|try_merge_command
parameter_list|(
specifier|const
name|char
modifier|*
name|strategy
parameter_list|,
name|size_t
name|xopts_nr
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|xopts
parameter_list|,
name|struct
name|commit_list
modifier|*
name|common
parameter_list|,
specifier|const
name|char
modifier|*
name|head_arg
parameter_list|,
name|struct
name|commit_list
modifier|*
name|remotes
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|checkout_fast_forward
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|from
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|to
parameter_list|,
name|int
name|overwrite_ignore
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|int
name|sane_execvp
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|char
modifier|*
specifier|const
name|argv
index|[]
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * A struct to encapsulate the concept of whether a file has changed  * since we last checked it. This uses criteria similar to those used  * for the index.  */
end_comment
begin_struct
DECL|struct|stat_validity
struct|struct
name|stat_validity
block|{
DECL|member|sd
name|struct
name|stat_data
modifier|*
name|sd
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
name|void
name|stat_validity_clear
parameter_list|(
name|struct
name|stat_validity
modifier|*
name|sv
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Returns 1 if the path is a regular file (or a symlink to a regular  * file) and matches the saved stat_validity, 0 otherwise.  A missing  * or inaccessible file is considered a match if the struct was just  * initialized, or if the previous update found an inaccessible file.  */
end_comment
begin_function_decl
name|int
name|stat_validity_check
parameter_list|(
name|struct
name|stat_validity
modifier|*
name|sv
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*  * Update the stat_validity from a file opened at descriptor fd. If  * the file is missing, inaccessible, or not a regular file, then  * future calls to stat_validity_check will match iff one of those  * conditions continues to be true.  */
end_comment
begin_function_decl
name|void
name|stat_validity_update
parameter_list|(
name|struct
name|stat_validity
modifier|*
name|sv
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* CACHE_H */
end_comment
end_unit
