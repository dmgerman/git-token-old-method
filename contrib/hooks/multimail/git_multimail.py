begin_unit
comment|'#! /usr/bin/env python2'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2012,2013 Michael Haggerty'
nl|'\n'
comment|'# Derived from contrib/hooks/post-receive-email, which is'
nl|'\n'
comment|'# Copyright (c) 2007 Andy Parkins'
nl|'\n'
comment|'# and also includes contributions by other authors.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This file is part of git-multimail.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# git-multimail is free software: you can redistribute it and/or'
nl|'\n'
comment|'# modify it under the terms of the GNU General Public License version'
nl|'\n'
comment|'# 2 as published by the Free Software Foundation.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This program is distributed in the hope that it will be useful, but'
nl|'\n'
comment|'# WITHOUT ANY WARRANTY; without even the implied warranty of'
nl|'\n'
comment|'# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU'
nl|'\n'
comment|'# General Public License for more details.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# You should have received a copy of the GNU General Public License'
nl|'\n'
comment|'# along with this program.  If not, see'
nl|'\n'
comment|'# <http://www.gnu.org/licenses/>.'
nl|'\n'
nl|'\n'
string|'"""Generate notification emails for pushes to a git repository.\n\nThis hook sends emails describing changes introduced by pushes to a\ngit repository.  For each reference that was changed, it emits one\nReferenceChange email summarizing how the reference was changed,\nfollowed by one Revision email for each new commit that was introduced\nby the reference change.\n\nEach commit is announced in exactly one Revision email.  If the same\ncommit is merged into another branch in the same or a later push, then\nthe ReferenceChange email will list the commit\'s SHA1 and its one-line\nsummary, but no new Revision email will be generated.\n\nThis script is designed to be used as a "post-receive" hook in a git\nrepository (see githooks(5)).  It can also be used as an "update"\nscript, but this usage is not completely reliable and is deprecated.\n\nTo help with debugging, this script accepts a --stdout option, which\ncauses the emails to be written to standard output rather than sent\nusing sendmail.\n\nSee the accompanying README file for the complete documentation.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'bisect'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'shlex'
newline|'\n'
name|'import'
name|'optparse'
newline|'\n'
name|'import'
name|'smtplib'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'email'
op|'.'
name|'utils'
name|'import'
name|'make_msgid'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'utils'
name|'import'
name|'getaddresses'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'utils'
name|'import'
name|'formataddr'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'header'
name|'import'
name|'Header'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
comment|'# Prior to Python 2.5, the email module used different names:'
nl|'\n'
indent|'    '
name|'from'
name|'email'
op|'.'
name|'Utils'
name|'import'
name|'make_msgid'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'Utils'
name|'import'
name|'getaddresses'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'Utils'
name|'import'
name|'formataddr'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'Header'
name|'import'
name|'Header'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|DEBUG
dedent|''
name|'DEBUG'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|ZEROS
name|'ZEROS'
op|'='
string|"'0'"
op|'*'
number|'40'
newline|'\n'
DECL|variable|LOGBEGIN
name|'LOGBEGIN'
op|'='
string|"'- Log -----------------------------------------------------------------\\n'"
newline|'\n'
DECL|variable|LOGEND
name|'LOGEND'
op|'='
string|"'-----------------------------------------------------------------------\\n'"
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# It is assumed in many places that the encoding is uniformly UTF-8,'
nl|'\n'
comment|'# so changing these constants is unsupported.  But define them here'
nl|'\n'
comment|'# anyway, to make it easier to find (at least most of) the places'
nl|'\n'
comment|'# where the encoding is important.'
nl|'\n'
op|'('
name|'ENCODING'
op|','
name|'CHARSET'
op|')'
op|'='
op|'('
string|"'UTF-8'"
op|','
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|REF_CREATED_SUBJECT_TEMPLATE
name|'REF_CREATED_SUBJECT_TEMPLATE'
op|'='
op|'('
nl|'\n'
string|"'%(emailprefix)s%(refname_type)s %(short_refname)s created'"
nl|'\n'
string|"' (now %(newrev_short)s)'"
nl|'\n'
op|')'
newline|'\n'
DECL|variable|REF_UPDATED_SUBJECT_TEMPLATE
name|'REF_UPDATED_SUBJECT_TEMPLATE'
op|'='
op|'('
nl|'\n'
string|"'%(emailprefix)s%(refname_type)s %(short_refname)s updated'"
nl|'\n'
string|"' (%(oldrev_short)s -> %(newrev_short)s)'"
nl|'\n'
op|')'
newline|'\n'
DECL|variable|REF_DELETED_SUBJECT_TEMPLATE
name|'REF_DELETED_SUBJECT_TEMPLATE'
op|'='
op|'('
nl|'\n'
string|"'%(emailprefix)s%(refname_type)s %(short_refname)s deleted'"
nl|'\n'
string|"' (was %(oldrev_short)s)'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'REFCHANGE_HEADER_TEMPLATE'
op|'='
string|'"""\\\nTo: %(recipients)s\nSubject: %(subject)s\nMIME-Version: 1.0\nContent-Type: text/plain; charset=%(charset)s\nContent-Transfer-Encoding: 8bit\nMessage-ID: %(msgid)s\nFrom: %(fromaddr)s\nReply-To: %(reply_to)s\nX-Git-Repo: %(repo_shortname)s\nX-Git-Refname: %(refname)s\nX-Git-Reftype: %(refname_type)s\nX-Git-Oldrev: %(oldrev)s\nX-Git-Newrev: %(newrev)s\nAuto-Submitted: auto-generated\n"""'
newline|'\n'
nl|'\n'
name|'REFCHANGE_INTRO_TEMPLATE'
op|'='
string|'"""\\\nThis is an automated email from the git hooks/post-receive script.\n\n%(pusher)s pushed a change to %(refname_type)s %(short_refname)s\nin repository %(repo_shortname)s.\n\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'FOOTER_TEMPLATE'
op|'='
string|'"""\\\n\n-- \\n\\\nTo stop receiving notification emails like this one, please contact\n%(administrator)s.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'REWIND_ONLY_TEMPLATE'
op|'='
string|'"""\\\nThis update removed existing revisions from the reference, leaving the\nreference pointing at a previous point in the repository history.\n\n * -- * -- N   %(refname)s (%(newrev_short)s)\n            \\\\\n             O -- O -- O   (%(oldrev_short)s)\n\nAny revisions marked "omits" are not gone; other references still\nrefer to them.  Any revisions marked "discards" are gone forever.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'NON_FF_TEMPLATE'
op|'='
string|'"""\\\nThis update added new revisions after undoing existing revisions.\nThat is to say, some revisions that were in the old version of the\n%(refname_type)s are not in the new version.  This situation occurs\nwhen a user --force pushes a change and generates a repository\ncontaining something like this:\n\n * -- * -- B -- O -- O -- O   (%(oldrev_short)s)\n            \\\\\n             N -- N -- N   %(refname)s (%(newrev_short)s)\n\nYou should already have received notification emails for all of the O\nrevisions, and so the following emails describe only the N revisions\nfrom the common base, B.\n\nAny revisions marked "omits" are not gone; other references still\nrefer to them.  Any revisions marked "discards" are gone forever.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'NO_NEW_REVISIONS_TEMPLATE'
op|'='
string|'"""\\\nNo new revisions were added by this update.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'DISCARDED_REVISIONS_TEMPLATE'
op|'='
string|'"""\\\nThis change permanently discards the following revisions:\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'NO_DISCARDED_REVISIONS_TEMPLATE'
op|'='
string|'"""\\\nThe revisions that were on this %(refname_type)s are still contained in\nother references; therefore, this change does not discard any commits\nfrom the repository.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'NEW_REVISIONS_TEMPLATE'
op|'='
string|'"""\\\nThe %(tot)s revisions listed above as "new" are entirely new to this\nrepository and will be described in separate emails.  The revisions\nlisted as "adds" were already present in the repository and have only\nbeen added to this reference.\n\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'TAG_CREATED_TEMPLATE'
op|'='
string|'"""\\\n        at  %(newrev_short)-9s (%(newrev_type)s)\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'TAG_UPDATED_TEMPLATE'
op|'='
string|'"""\\\n*** WARNING: tag %(short_refname)s was modified! ***\n\n      from  %(oldrev_short)-9s (%(oldrev_type)s)\n        to  %(newrev_short)-9s (%(newrev_type)s)\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'TAG_DELETED_TEMPLATE'
op|'='
string|'"""\\\n*** WARNING: tag %(short_refname)s was deleted! ***\n\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The template used in summary tables.  It looks best if this uses the'
nl|'\n'
comment|'# same alignment as TAG_CREATED_TEMPLATE and TAG_UPDATED_TEMPLATE.'
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|'='
string|'"""\\\n%(action)10s  %(rev_short)-9s %(text)s\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'NON_COMMIT_UPDATE_TEMPLATE'
op|'='
string|'"""\\\nThis is an unusual reference change because the reference did not\nrefer to a commit either before or after the change.  We do not know\nhow to provide full information about this reference change.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'REVISION_HEADER_TEMPLATE'
op|'='
string|'"""\\\nTo: %(recipients)s\nSubject: %(emailprefix)s%(num)02d/%(tot)02d: %(oneline)s\nMIME-Version: 1.0\nContent-Type: text/plain; charset=%(charset)s\nContent-Transfer-Encoding: 8bit\nFrom: %(fromaddr)s\nReply-To: %(reply_to)s\nIn-Reply-To: %(reply_to_msgid)s\nReferences: %(reply_to_msgid)s\nX-Git-Repo: %(repo_shortname)s\nX-Git-Refname: %(refname)s\nX-Git-Reftype: %(refname_type)s\nX-Git-Rev: %(rev)s\nAuto-Submitted: auto-generated\n"""'
newline|'\n'
nl|'\n'
name|'REVISION_INTRO_TEMPLATE'
op|'='
string|'"""\\\nThis is an automated email from the git hooks/post-receive script.\n\n%(pusher)s pushed a commit to %(refname_type)s %(short_refname)s\nin repository %(repo_shortname)s.\n\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|REVISION_FOOTER_TEMPLATE
name|'REVISION_FOOTER_TEMPLATE'
op|'='
name|'FOOTER_TEMPLATE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandError
name|'class'
name|'CommandError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'retcode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cmd'
op|'='
name|'cmd'
newline|'\n'
name|'self'
op|'.'
name|'retcode'
op|'='
name|'retcode'
newline|'\n'
name|'Exception'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
nl|'\n'
string|'\'Command "%s" failed with retcode %s\''
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|','
name|'retcode'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigurationException
dedent|''
dedent|''
name|'class'
name|'ConfigurationException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_git_output
dedent|''
name|'def'
name|'read_git_output'
op|'('
name|'args'
op|','
name|'input'
op|'='
name|'None'
op|','
name|'keepends'
op|'='
name|'False'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read the output of a Git command."""'
newline|'\n'
nl|'\n'
name|'return'
name|'read_output'
op|'('
nl|'\n'
op|'['
string|"'git'"
op|','
string|"'-c'"
op|','
string|"'i18n.logoutputencoding=%s'"
op|'%'
op|'('
name|'ENCODING'
op|','
op|')'
op|']'
op|'+'
name|'args'
op|','
nl|'\n'
name|'input'
op|'='
name|'input'
op|','
name|'keepends'
op|'='
name|'keepends'
op|','
op|'**'
name|'kw'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_output
dedent|''
name|'def'
name|'read_output'
op|'('
name|'cmd'
op|','
name|'input'
op|'='
name|'None'
op|','
name|'keepends'
op|'='
name|'False'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'input'
op|':'
newline|'\n'
indent|'        '
name|'stdin'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'stdin'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
nl|'\n'
name|'cmd'
op|','
name|'stdin'
op|'='
name|'stdin'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
name|'stderr'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
op|'**'
name|'kw'
nl|'\n'
op|')'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'p'
op|'.'
name|'communicate'
op|'('
name|'input'
op|')'
newline|'\n'
name|'retcode'
op|'='
name|'p'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'retcode'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'CommandError'
op|'('
name|'cmd'
op|','
name|'retcode'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'keepends'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|'='
name|'out'
op|'.'
name|'rstrip'
op|'('
string|"'\\n\\r'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'out'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_git_lines
dedent|''
name|'def'
name|'read_git_lines'
op|'('
name|'args'
op|','
name|'keepends'
op|'='
name|'False'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the lines output by Git command.\n\n    Return as single lines, with newlines stripped off."""'
newline|'\n'
nl|'\n'
name|'return'
name|'read_git_output'
op|'('
name|'args'
op|','
name|'keepends'
op|'='
name|'True'
op|','
op|'**'
name|'kw'
op|')'
op|'.'
name|'splitlines'
op|'('
name|'keepends'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Config
dedent|''
name|'class'
name|'Config'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'section'
op|','
name|'git_config'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Represent a section of the git configuration.\n\n        If git_config is specified, it is passed to "git config" in\n        the GIT_CONFIG environment variable, meaning that "git config"\n        will read the specified path rather than the Git default\n        config paths."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'section'
op|'='
name|'section'
newline|'\n'
name|'if'
name|'git_config'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'env'
op|'['
string|"'GIT_CONFIG'"
op|']'
op|'='
name|'git_config'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'env'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_split
name|'def'
name|'_split'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Split NUL-terminated values."""'
newline|'\n'
nl|'\n'
name|'words'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
string|"'\\0'"
op|')'
newline|'\n'
name|'assert'
name|'words'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"''"
newline|'\n'
name|'return'
name|'words'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
name|'self'
op|'.'
name|'_split'
op|'('
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'config'"
op|','
string|"'--get'"
op|','
string|"'--null'"
op|','
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'section'
op|','
name|'name'
op|')'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'env'
op|','
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'values'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'return'
name|'values'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|get_bool
dedent|''
dedent|''
name|'def'
name|'get_bool'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'config'"
op|','
string|"'--get'"
op|','
string|"'--bool'"
op|','
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'section'
op|','
name|'name'
op|')'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'env'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'return'
name|'value'
op|'=='
string|"'true'"
newline|'\n'
nl|'\n'
DECL|member|get_all
dedent|''
name|'def'
name|'get_all'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read a (possibly multivalued) setting from the configuration.\n\n        Return the result as a list of values, or default if the name\n        is unset."""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_split'
op|'('
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'config'"
op|','
string|"'--get-all'"
op|','
string|"'--null'"
op|','
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'section'
op|','
name|'name'
op|')'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'env'
op|','
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'retcode'
op|'=='
number|'1'
op|':'
newline|'\n'
comment|'# "the section or key is invalid"; i.e., there is no'
nl|'\n'
comment|'# value for the specified key.'
nl|'\n'
indent|'                '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|get_recipients
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_recipients'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read a recipients list from the configuration.\n\n        Return the result as a comma-separated list of email\n        addresses, or default if the option is unset.  If the setting\n        has multiple values, concatenate them with comma separators."""'
newline|'\n'
nl|'\n'
name|'lines'
op|'='
name|'self'
op|'.'
name|'get_all'
op|'('
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
newline|'\n'
name|'if'
name|'lines'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'return'
string|"', '"
op|'.'
name|'join'
op|'('
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'line'
name|'in'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'config'"
op|','
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'section'
op|','
name|'name'
op|')'
op|','
name|'value'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'env'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add
dedent|''
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'config'"
op|','
string|"'--add'"
op|','
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'section'
op|','
name|'name'
op|')'
op|','
name|'value'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'env'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|has_key
dedent|''
name|'def'
name|'has_key'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_all'
op|'('
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|unset_all
dedent|''
name|'def'
name|'unset_all'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'config'"
op|','
string|"'--unset-all'"
op|','
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'section'
op|','
name|'name'
op|')'
op|']'
op|','
nl|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'env'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'retcode'
op|'=='
number|'5'
op|':'
newline|'\n'
comment|"# The name doesn't exist, which is what we wanted anyway..."
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|set_recipients
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_recipients'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unset_all'
op|'('
name|'name'
op|')'
newline|'\n'
name|'for'
name|'pair'
name|'in'
name|'getaddresses'
op|'('
op|'['
name|'value'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'add'
op|'('
name|'name'
op|','
name|'formataddr'
op|'('
name|'pair'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_summaries
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_summaries'
op|'('
op|'*'
name|'log_args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a brief summary for each revision requested.\n\n    log_args are strings that will be passed directly to "git log" as\n    revision selectors.  Iterate over (sha1_short, subject) for each\n    commit specified by log_args (subject is the first line of the\n    commit message as a string without EOLs)."""'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
op|'['
nl|'\n'
string|"'log'"
op|','
string|"'--abbrev'"
op|','
string|"'--format=%h %s'"
op|','
nl|'\n'
op|']'
op|'+'
name|'list'
op|'('
name|'log_args'
op|')'
op|'+'
op|'['
string|"'--'"
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'read_git_lines'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'tuple'
op|'('
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|limit_lines
dedent|''
dedent|''
name|'def'
name|'limit_lines'
op|'('
name|'lines'
op|','
name|'max_lines'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
op|'('
name|'index'
op|','
name|'line'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'index'
op|'<'
name|'max_lines'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'index'
op|'>='
name|'max_lines'
op|':'
newline|'\n'
indent|'        '
name|'yield'
string|"'... %d lines suppressed ...\\n'"
op|'%'
op|'('
name|'index'
op|'+'
number|'1'
op|'-'
name|'max_lines'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|limit_linelength
dedent|''
dedent|''
name|'def'
name|'limit_linelength'
op|'('
name|'lines'
op|','
name|'max_linelength'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
comment|"# Don't forget that lines always include a trailing newline."
nl|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'>'
name|'max_linelength'
op|'+'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'line'
op|'['
op|':'
name|'max_linelength'
op|'-'
number|'7'
op|']'
op|'+'
string|"' [...]\\n'"
newline|'\n'
dedent|''
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommitSet
dedent|''
dedent|''
name|'class'
name|'CommitSet'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A (constant) set of object names.\n\n    The set should be initialized with full SHA1 object names.  The\n    __contains__() method returns True iff its argument is an\n    abbreviation of any the names in the set."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_names'
op|'='
name|'sorted'
op|'('
name|'names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'_names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'sha1_abbrev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return True iff this set contains sha1_abbrev (which might be abbreviated)."""'
newline|'\n'
nl|'\n'
name|'i'
op|'='
name|'bisect'
op|'.'
name|'bisect_left'
op|'('
name|'self'
op|'.'
name|'_names'
op|','
name|'sha1_abbrev'
op|')'
newline|'\n'
name|'return'
name|'i'
op|'<'
name|'len'
op|'('
name|'self'
op|')'
name|'and'
name|'self'
op|'.'
name|'_names'
op|'['
name|'i'
op|']'
op|'.'
name|'startswith'
op|'('
name|'sha1_abbrev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitObject
dedent|''
dedent|''
name|'class'
name|'GitObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'sha1'
op|','
name|'type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sha1'
op|'=='
name|'ZEROS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sha1'
op|'='
name|'self'
op|'.'
name|'type'
op|'='
name|'self'
op|'.'
name|'commit_sha1'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sha1'
op|'='
name|'sha1'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'type'
name|'or'
name|'read_git_output'
op|'('
op|'['
string|"'cat-file'"
op|','
string|"'-t'"
op|','
name|'self'
op|'.'
name|'sha1'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'type'
op|'=='
string|"'commit'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'commit_sha1'
op|'='
name|'self'
op|'.'
name|'sha1'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'type'
op|'=='
string|"'tag'"
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'commit_sha1'
op|'='
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'rev-parse'"
op|','
string|"'--verify'"
op|','
string|"'%s^0'"
op|'%'
op|'('
name|'self'
op|'.'
name|'sha1'
op|','
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|':'
newline|'\n'
comment|'# Cannot deref tag to determine commit_sha1'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'commit_sha1'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'commit_sha1'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'short'
op|'='
name|'read_git_output'
op|'('
op|'['
string|"'rev-parse'"
op|','
string|"'--short'"
op|','
name|'sha1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_summary
dedent|''
name|'def'
name|'get_summary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return (sha1_short, subject) for this commit."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'sha1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Empty commit has no summary'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'iter'
op|'('
name|'generate_summaries'
op|'('
string|"'--no-walk'"
op|','
name|'self'
op|'.'
name|'sha1'
op|')'
op|')'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'isinstance'
op|'('
name|'other'
op|','
name|'GitObject'
op|')'
name|'and'
name|'self'
op|'.'
name|'sha1'
op|'=='
name|'other'
op|'.'
name|'sha1'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'self'
op|'.'
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__nonzero__
dedent|''
name|'def'
name|'__nonzero__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'sha1'
name|'or'
name|'ZEROS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Change
dedent|''
dedent|''
name|'class'
name|'Change'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Change that has been made to the Git repository.\n\n    Abstract class from which both Revisions and ReferenceChanges are\n    derived.  A Change knows how to generate a notification email\n    describing itself."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'environment'
op|'='
name|'environment'
newline|'\n'
name|'self'
op|'.'
name|'_values'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_compute_values
dedent|''
name|'def'
name|'_compute_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a dictionary {keyword : expansion} for this Change.\n\n        Derived classes overload this method to add more entries to\n        the return value.  This method is used internally by\n        get_values().  The return value should always be a new\n        dictionary."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'environment'
op|'.'
name|'get_values'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_values
dedent|''
name|'def'
name|'get_values'
op|'('
name|'self'
op|','
op|'**'
name|'extra_values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a dictionary {keyword : expansion} for this Change.\n\n        Return a dictionary mapping keywords to the values that they\n        should be expanded to for this Change (used when interpolating\n        template strings).  If any keyword arguments are supplied, add\n        those to the return value as well.  The return value is always\n        a new dictionary."""'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_values'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_values'
op|'='
name|'self'
op|'.'
name|'_compute_values'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
name|'self'
op|'.'
name|'_values'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
name|'extra_values'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'.'
name|'update'
op|'('
name|'extra_values'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|expand
dedent|''
name|'def'
name|'expand'
op|'('
name|'self'
op|','
name|'template'
op|','
op|'**'
name|'extra_values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Expand template.\n\n        Expand the template (which should be a string) using string\n        interpolation of the values for this Change.  If any keyword\n        arguments are provided, also include those in the keywords\n        available for interpolation."""'
newline|'\n'
nl|'\n'
name|'return'
name|'template'
op|'%'
name|'self'
op|'.'
name|'get_values'
op|'('
op|'**'
name|'extra_values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expand_lines
dedent|''
name|'def'
name|'expand_lines'
op|'('
name|'self'
op|','
name|'template'
op|','
op|'**'
name|'extra_values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Break template into lines and expand each line."""'
newline|'\n'
nl|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'get_values'
op|'('
op|'**'
name|'extra_values'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'template'
op|'.'
name|'splitlines'
op|'('
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
op|'%'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|expand_header_lines
dedent|''
dedent|''
name|'def'
name|'expand_header_lines'
op|'('
name|'self'
op|','
name|'template'
op|','
op|'**'
name|'extra_values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Break template into lines and expand each line as an RFC 2822 header.\n\n        Encode values and split up lines that are too long.  Silently\n        skip lines that contain references to unknown variables."""'
newline|'\n'
nl|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'get_values'
op|'('
op|'**'
name|'extra_values'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'template'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'name'
op|','
name|'value'
op|')'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'value'
op|'%'
name|'values'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'DEBUG'
op|':'
newline|'\n'
indent|'                    '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'Warning: unknown variable %r in the following line; line skipped:\\n'"
nl|'\n'
string|"'    %s\\n'"
nl|'\n'
op|'%'
op|'('
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'line'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'h'
op|'='
name|'Header'
op|'('
name|'value'
op|','
name|'header_name'
op|'='
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeDecodeError'
op|':'
newline|'\n'
indent|'                    '
name|'h'
op|'='
name|'Header'
op|'('
name|'value'
op|','
name|'header_name'
op|'='
name|'name'
op|','
name|'charset'
op|'='
name|'CHARSET'
op|','
name|'errors'
op|'='
string|"'replace'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'splitline'
name|'in'
op|'('
string|"'%s: %s\\n'"
op|'%'
op|'('
name|'name'
op|','
name|'h'
op|'.'
name|'encode'
op|'('
op|')'
op|','
op|')'
op|')'
op|'.'
name|'splitlines'
op|'('
name|'True'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'splitline'
newline|'\n'
nl|'\n'
DECL|member|generate_email_header
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_email_header'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the RFC 2822 email headers for this Change, a line at a time.\n\n        The output should not include the trailing blank line."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_email_intro
dedent|''
name|'def'
name|'generate_email_intro'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the email intro for this Change, a line at a time.\n\n        The output will be used as the standard boilerplate at the top\n        of the email body."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_email_body
dedent|''
name|'def'
name|'generate_email_body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the main part of the email body, a line at a time.\n\n        The text in the body might be truncated after a specified\n        number of lines (see multimailhook.emailmaxlines)."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_email_footer
dedent|''
name|'def'
name|'generate_email_footer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the footer of the email, a line at a time.\n\n        The footer is always included, irrespective of\n        multimailhook.emailmaxlines."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_email
dedent|''
name|'def'
name|'generate_email'
op|'('
name|'self'
op|','
name|'push'
op|','
name|'body_filter'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate an email describing this change.\n\n        Iterate over the lines (including the header lines) of an\n        email describing this change.  If body_filter is not None,\n        then use it to filter the lines that are intended for the\n        email body."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'generate_email_header'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'generate_email_intro'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'body'
op|'='
name|'self'
op|'.'
name|'generate_email_body'
op|'('
name|'push'
op|')'
newline|'\n'
name|'if'
name|'body_filter'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'body_filter'
op|'('
name|'body'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'generate_email_footer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Revision
dedent|''
dedent|''
dedent|''
name|'class'
name|'Revision'
op|'('
name|'Change'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Change consisting of a single git commit."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reference_change'
op|','
name|'rev'
op|','
name|'num'
op|','
name|'tot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Change'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'reference_change'
op|'.'
name|'environment'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reference_change'
op|'='
name|'reference_change'
newline|'\n'
name|'self'
op|'.'
name|'rev'
op|'='
name|'rev'
newline|'\n'
name|'self'
op|'.'
name|'change_type'
op|'='
name|'self'
op|'.'
name|'reference_change'
op|'.'
name|'change_type'
newline|'\n'
name|'self'
op|'.'
name|'refname'
op|'='
name|'self'
op|'.'
name|'reference_change'
op|'.'
name|'refname'
newline|'\n'
name|'self'
op|'.'
name|'num'
op|'='
name|'num'
newline|'\n'
name|'self'
op|'.'
name|'tot'
op|'='
name|'tot'
newline|'\n'
name|'self'
op|'.'
name|'author'
op|'='
name|'read_git_output'
op|'('
op|'['
string|"'log'"
op|','
string|"'--no-walk'"
op|','
string|"'--format=%aN <%aE>'"
op|','
name|'self'
op|'.'
name|'rev'
op|'.'
name|'sha1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recipients'
op|'='
name|'self'
op|'.'
name|'environment'
op|'.'
name|'get_revision_recipients'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_compute_values
dedent|''
name|'def'
name|'_compute_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'Change'
op|'.'
name|'_compute_values'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'oneline'
op|'='
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'log'"
op|','
string|"'--format=%s'"
op|','
string|"'--no-walk'"
op|','
name|'self'
op|'.'
name|'rev'
op|'.'
name|'sha1'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'values'
op|'['
string|"'rev'"
op|']'
op|'='
name|'self'
op|'.'
name|'rev'
op|'.'
name|'sha1'
newline|'\n'
name|'values'
op|'['
string|"'rev_short'"
op|']'
op|'='
name|'self'
op|'.'
name|'rev'
op|'.'
name|'short'
newline|'\n'
name|'values'
op|'['
string|"'change_type'"
op|']'
op|'='
name|'self'
op|'.'
name|'change_type'
newline|'\n'
name|'values'
op|'['
string|"'refname'"
op|']'
op|'='
name|'self'
op|'.'
name|'refname'
newline|'\n'
name|'values'
op|'['
string|"'short_refname'"
op|']'
op|'='
name|'self'
op|'.'
name|'reference_change'
op|'.'
name|'short_refname'
newline|'\n'
name|'values'
op|'['
string|"'refname_type'"
op|']'
op|'='
name|'self'
op|'.'
name|'reference_change'
op|'.'
name|'refname_type'
newline|'\n'
name|'values'
op|'['
string|"'reply_to_msgid'"
op|']'
op|'='
name|'self'
op|'.'
name|'reference_change'
op|'.'
name|'msgid'
newline|'\n'
name|'values'
op|'['
string|"'num'"
op|']'
op|'='
name|'self'
op|'.'
name|'num'
newline|'\n'
name|'values'
op|'['
string|"'tot'"
op|']'
op|'='
name|'self'
op|'.'
name|'tot'
newline|'\n'
name|'values'
op|'['
string|"'recipients'"
op|']'
op|'='
name|'self'
op|'.'
name|'recipients'
newline|'\n'
name|'values'
op|'['
string|"'oneline'"
op|']'
op|'='
name|'oneline'
newline|'\n'
name|'values'
op|'['
string|"'author'"
op|']'
op|'='
name|'self'
op|'.'
name|'author'
newline|'\n'
nl|'\n'
name|'reply_to'
op|'='
name|'self'
op|'.'
name|'environment'
op|'.'
name|'get_reply_to_commit'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'reply_to'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'reply_to'"
op|']'
op|'='
name|'reply_to'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|generate_email_header
dedent|''
name|'def'
name|'generate_email_header'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_header_lines'
op|'('
name|'REVISION_HEADER_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_email_intro
dedent|''
dedent|''
name|'def'
name|'generate_email_intro'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'REVISION_INTRO_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_email_body
dedent|''
dedent|''
name|'def'
name|'generate_email_body'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Show this revision."""'
newline|'\n'
nl|'\n'
name|'return'
name|'read_git_lines'
op|'('
nl|'\n'
op|'['
nl|'\n'
string|"'log'"
op|','
string|"'-C'"
op|','
nl|'\n'
string|"'--stat'"
op|','
string|"'-p'"
op|','
string|"'--cc'"
op|','
nl|'\n'
string|"'-1'"
op|','
name|'self'
op|'.'
name|'rev'
op|'.'
name|'sha1'
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_email_footer
dedent|''
name|'def'
name|'generate_email_footer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'REVISION_FOOTER_TEMPLATE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReferenceChange
dedent|''
dedent|''
name|'class'
name|'ReferenceChange'
op|'('
name|'Change'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Change to a Git reference.\n\n    An abstract class representing a create, update, or delete of a\n    Git reference.  Derived classes handle specific types of reference\n    (e.g., tags vs. branches).  These classes generate the main\n    reference change email summarizing the reference change and\n    whether it caused any any commits to be added or removed.\n\n    ReferenceChange objects are usually created using the static\n    create() method, which has the logic to decide which derived class\n    to instantiate."""'
newline|'\n'
nl|'\n'
DECL|variable|REF_RE
name|'REF_RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^refs\\/(?P<area>[^\\/]+)\\/(?P<shortname>.*)$'"
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'environment'
op|','
name|'oldrev'
op|','
name|'newrev'
op|','
name|'refname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a ReferenceChange object representing the change.\n\n        Return an object that represents the type of change that is being\n        made. oldrev and newrev should be SHA1s or ZEROS."""'
newline|'\n'
nl|'\n'
name|'old'
op|'='
name|'GitObject'
op|'('
name|'oldrev'
op|')'
newline|'\n'
name|'new'
op|'='
name|'GitObject'
op|'('
name|'newrev'
op|')'
newline|'\n'
name|'rev'
op|'='
name|'new'
name|'or'
name|'old'
newline|'\n'
nl|'\n'
comment|'# The revision type tells us what type the commit is, combined with'
nl|'\n'
comment|'# the location of the ref we can decide between'
nl|'\n'
comment|'#  - working branch'
nl|'\n'
comment|'#  - tracking branch'
nl|'\n'
comment|'#  - unannotated tag'
nl|'\n'
comment|'#  - annotated tag'
nl|'\n'
name|'m'
op|'='
name|'ReferenceChange'
op|'.'
name|'REF_RE'
op|'.'
name|'match'
op|'('
name|'refname'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'area'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
string|"'area'"
op|')'
newline|'\n'
name|'short_refname'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
string|"'shortname'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'area'
op|'='
string|"''"
newline|'\n'
name|'short_refname'
op|'='
name|'refname'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rev'
op|'.'
name|'type'
op|'=='
string|"'tag'"
op|':'
newline|'\n'
comment|'# Annotated tag:'
nl|'\n'
indent|'            '
name|'klass'
op|'='
name|'AnnotatedTagChange'
newline|'\n'
dedent|''
name|'elif'
name|'rev'
op|'.'
name|'type'
op|'=='
string|"'commit'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'area'
op|'=='
string|"'tags'"
op|':'
newline|'\n'
comment|'# Non-annotated tag:'
nl|'\n'
indent|'                '
name|'klass'
op|'='
name|'NonAnnotatedTagChange'
newline|'\n'
dedent|''
name|'elif'
name|'area'
op|'=='
string|"'heads'"
op|':'
newline|'\n'
comment|'# Branch:'
nl|'\n'
indent|'                '
name|'klass'
op|'='
name|'BranchChange'
newline|'\n'
dedent|''
name|'elif'
name|'area'
op|'=='
string|"'remotes'"
op|':'
newline|'\n'
comment|'# Tracking branch:'
nl|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Push-update of tracking branch %r\\n'"
nl|'\n'
string|"'***  - incomplete email generated.\\n'"
nl|'\n'
op|'%'
op|'('
name|'refname'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'klass'
op|'='
name|'OtherReferenceChange'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Some other reference namespace:'
nl|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Push-update of strange reference %r\\n'"
nl|'\n'
string|"'***  - incomplete email generated.\\n'"
nl|'\n'
op|'%'
op|'('
name|'refname'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'klass'
op|'='
name|'OtherReferenceChange'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Anything else (is there anything else?)'
nl|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Unknown type of update to %r (%s)\\n'"
nl|'\n'
string|"'***  - incomplete email generated.\\n'"
nl|'\n'
op|'%'
op|'('
name|'refname'
op|','
name|'rev'
op|'.'
name|'type'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'klass'
op|'='
name|'OtherReferenceChange'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'klass'
op|'('
nl|'\n'
name|'environment'
op|','
nl|'\n'
name|'refname'
op|'='
name|'refname'
op|','
name|'short_refname'
op|'='
name|'short_refname'
op|','
nl|'\n'
name|'old'
op|'='
name|'old'
op|','
name|'new'
op|'='
name|'new'
op|','
name|'rev'
op|'='
name|'rev'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|','
name|'refname'
op|','
name|'short_refname'
op|','
name|'old'
op|','
name|'new'
op|','
name|'rev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Change'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'change_type'
op|'='
op|'{'
nl|'\n'
op|'('
name|'False'
op|','
name|'True'
op|')'
op|':'
string|"'create'"
op|','
nl|'\n'
op|'('
name|'True'
op|','
name|'True'
op|')'
op|':'
string|"'update'"
op|','
nl|'\n'
op|'('
name|'True'
op|','
name|'False'
op|')'
op|':'
string|"'delete'"
op|','
nl|'\n'
op|'}'
op|'['
name|'bool'
op|'('
name|'old'
op|')'
op|','
name|'bool'
op|'('
name|'new'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'refname'
op|'='
name|'refname'
newline|'\n'
name|'self'
op|'.'
name|'short_refname'
op|'='
name|'short_refname'
newline|'\n'
name|'self'
op|'.'
name|'old'
op|'='
name|'old'
newline|'\n'
name|'self'
op|'.'
name|'new'
op|'='
name|'new'
newline|'\n'
name|'self'
op|'.'
name|'rev'
op|'='
name|'rev'
newline|'\n'
name|'self'
op|'.'
name|'msgid'
op|'='
name|'make_msgid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'diffopts'
op|'='
name|'environment'
op|'.'
name|'diffopts'
newline|'\n'
name|'self'
op|'.'
name|'logopts'
op|'='
name|'environment'
op|'.'
name|'logopts'
newline|'\n'
name|'self'
op|'.'
name|'showlog'
op|'='
name|'environment'
op|'.'
name|'refchange_showlog'
newline|'\n'
nl|'\n'
DECL|member|_compute_values
dedent|''
name|'def'
name|'_compute_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'Change'
op|'.'
name|'_compute_values'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'values'
op|'['
string|"'change_type'"
op|']'
op|'='
name|'self'
op|'.'
name|'change_type'
newline|'\n'
name|'values'
op|'['
string|"'refname_type'"
op|']'
op|'='
name|'self'
op|'.'
name|'refname_type'
newline|'\n'
name|'values'
op|'['
string|"'refname'"
op|']'
op|'='
name|'self'
op|'.'
name|'refname'
newline|'\n'
name|'values'
op|'['
string|"'short_refname'"
op|']'
op|'='
name|'self'
op|'.'
name|'short_refname'
newline|'\n'
name|'values'
op|'['
string|"'msgid'"
op|']'
op|'='
name|'self'
op|'.'
name|'msgid'
newline|'\n'
name|'values'
op|'['
string|"'recipients'"
op|']'
op|'='
name|'self'
op|'.'
name|'recipients'
newline|'\n'
name|'values'
op|'['
string|"'oldrev'"
op|']'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'old'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'oldrev_short'"
op|']'
op|'='
name|'self'
op|'.'
name|'old'
op|'.'
name|'short'
newline|'\n'
name|'values'
op|'['
string|"'newrev'"
op|']'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'new'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'newrev_short'"
op|']'
op|'='
name|'self'
op|'.'
name|'new'
op|'.'
name|'short'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'old'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'oldrev_type'"
op|']'
op|'='
name|'self'
op|'.'
name|'old'
op|'.'
name|'type'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'new'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'newrev_type'"
op|']'
op|'='
name|'self'
op|'.'
name|'new'
op|'.'
name|'type'
newline|'\n'
nl|'\n'
dedent|''
name|'reply_to'
op|'='
name|'self'
op|'.'
name|'environment'
op|'.'
name|'get_reply_to_refchange'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'reply_to'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'reply_to'"
op|']'
op|'='
name|'reply_to'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|get_subject
dedent|''
name|'def'
name|'get_subject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'template'
op|'='
op|'{'
nl|'\n'
string|"'create'"
op|':'
name|'REF_CREATED_SUBJECT_TEMPLATE'
op|','
nl|'\n'
string|"'update'"
op|':'
name|'REF_UPDATED_SUBJECT_TEMPLATE'
op|','
nl|'\n'
string|"'delete'"
op|':'
name|'REF_DELETED_SUBJECT_TEMPLATE'
op|','
nl|'\n'
op|'}'
op|'['
name|'self'
op|'.'
name|'change_type'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'expand'
op|'('
name|'template'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_email_header
dedent|''
name|'def'
name|'generate_email_header'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_header_lines'
op|'('
nl|'\n'
name|'REFCHANGE_HEADER_TEMPLATE'
op|','
name|'subject'
op|'='
name|'self'
op|'.'
name|'get_subject'
op|'('
op|')'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_email_intro
dedent|''
dedent|''
name|'def'
name|'generate_email_intro'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'REFCHANGE_INTRO_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_email_body
dedent|''
dedent|''
name|'def'
name|'generate_email_body'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the appropriate body-generation routine.\n\n        Call one of generate_create_summary() /\n        generate_update_summary() / generate_delete_summary()."""'
newline|'\n'
nl|'\n'
name|'change_summary'
op|'='
op|'{'
nl|'\n'
string|"'create'"
op|':'
name|'self'
op|'.'
name|'generate_create_summary'
op|','
nl|'\n'
string|"'delete'"
op|':'
name|'self'
op|'.'
name|'generate_delete_summary'
op|','
nl|'\n'
string|"'update'"
op|':'
name|'self'
op|'.'
name|'generate_update_summary'
op|','
nl|'\n'
op|'}'
op|'['
name|'self'
op|'.'
name|'change_type'
op|']'
op|'('
name|'push'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'change_summary'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'generate_revision_change_summary'
op|'('
name|'push'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_email_footer
dedent|''
dedent|''
name|'def'
name|'generate_email_footer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'FOOTER_TEMPLATE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_revision_change_log
dedent|''
name|'def'
name|'generate_revision_change_log'
op|'('
name|'self'
op|','
name|'new_commits_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'showlog'
op|':'
newline|'\n'
indent|'            '
name|'yield'
string|"'\\n'"
newline|'\n'
name|'yield'
string|"'Detailed log of new commits:\\n\\n'"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'read_git_lines'
op|'('
nl|'\n'
op|'['
string|"'log'"
op|','
string|"'--no-walk'"
op|']'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'logopts'
nl|'\n'
op|'+'
name|'new_commits_list'
nl|'\n'
op|'+'
op|'['
string|"'--'"
op|']'
op|','
nl|'\n'
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_revision_change_summary
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_revision_change_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a summary of the revisions added/removed by this change."""'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
name|'and'
name|'not'
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|':'
newline|'\n'
comment|'# A new reference was created.  List the new revisions'
nl|'\n'
comment|'# brought by the new reference (i.e., those revisions that'
nl|'\n'
comment|'# were not in the repository before this reference'
nl|'\n'
comment|'# change).'
nl|'\n'
indent|'            '
name|'sha1s'
op|'='
name|'list'
op|'('
name|'push'
op|'.'
name|'get_new_commits'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
name|'sha1s'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'tot'
op|'='
name|'len'
op|'('
name|'sha1s'
op|')'
newline|'\n'
name|'new_revisions'
op|'='
op|'['
nl|'\n'
name|'Revision'
op|'('
name|'self'
op|','
name|'GitObject'
op|'('
name|'sha1'
op|')'
op|','
name|'num'
op|'='
name|'i'
op|'+'
number|'1'
op|','
name|'tot'
op|'='
name|'tot'
op|')'
nl|'\n'
name|'for'
op|'('
name|'i'
op|','
name|'sha1'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'sha1s'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'new_revisions'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
string|"'This %(refname_type)s includes the following new commits:\\n'"
op|')'
newline|'\n'
name|'yield'
string|"'\\n'"
newline|'\n'
name|'for'
name|'r'
name|'in'
name|'new_revisions'
op|':'
newline|'\n'
indent|'                    '
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
op|'='
name|'r'
op|'.'
name|'rev'
op|'.'
name|'get_summary'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'r'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
string|"'new'"
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NEW_REVISIONS_TEMPLATE'
op|','
name|'tot'
op|'='
name|'tot'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'generate_revision_change_log'
op|'('
op|'['
name|'r'
op|'.'
name|'rev'
op|'.'
name|'sha1'
name|'for'
name|'r'
name|'in'
name|'new_revisions'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NO_NEW_REVISIONS_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
name|'and'
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|':'
newline|'\n'
comment|'# A reference was changed to point at a different commit.'
nl|'\n'
comment|'# List the revisions that were removed and/or added *from'
nl|'\n'
comment|'# that reference* by this reference change, along with a'
nl|'\n'
comment|'# diff between the trees for its old and new values.'
nl|'\n'
nl|'\n'
comment|'# List of the revisions that were added to the branch by'
nl|'\n'
comment|'# this update.  Note this list can include revisions that'
nl|'\n'
comment|'# have already had notification emails; we want such'
nl|'\n'
comment|'# revisions in the summary even though we will not send'
nl|'\n'
comment|'# new notification emails for them.'
nl|'\n'
indent|'            '
name|'adds'
op|'='
name|'list'
op|'('
name|'generate_summaries'
op|'('
nl|'\n'
string|"'--topo-order'"
op|','
string|"'--reverse'"
op|','
string|"'%s..%s'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|','
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|','
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# List of the revisions that were removed from the branch'
nl|'\n'
comment|'# by this update.  This will be empty except for'
nl|'\n'
comment|'# non-fast-forward updates.'
nl|'\n'
name|'discards'
op|'='
name|'list'
op|'('
name|'generate_summaries'
op|'('
nl|'\n'
string|"'%s..%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|','
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|','
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'adds'
op|':'
newline|'\n'
indent|'                '
name|'new_commits_list'
op|'='
name|'push'
op|'.'
name|'get_new_commits'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'new_commits_list'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'new_commits'
op|'='
name|'CommitSet'
op|'('
name|'new_commits_list'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'discards'
op|':'
newline|'\n'
indent|'                '
name|'discarded_commits'
op|'='
name|'CommitSet'
op|'('
name|'push'
op|'.'
name|'get_discarded_commits'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'discarded_commits'
op|'='
name|'CommitSet'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'discards'
name|'and'
name|'adds'
op|':'
newline|'\n'
indent|'                '
name|'for'
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
name|'in'
name|'discards'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'sha1'
name|'in'
name|'discarded_commits'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'discards'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'omits'"
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
name|'action'
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
name|'in'
name|'adds'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'sha1'
name|'in'
name|'new_commits'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'new'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'adds'"
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
name|'action'
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NON_FF_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'discards'
op|':'
newline|'\n'
indent|'                '
name|'for'
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
name|'in'
name|'discards'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'sha1'
name|'in'
name|'discarded_commits'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'discards'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'omits'"
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
name|'action'
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'REWIND_ONLY_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'adds'
op|':'
newline|'\n'
indent|'                '
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
op|'='
name|'self'
op|'.'
name|'old'
op|'.'
name|'get_summary'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
string|"'from'"
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'for'
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
name|'in'
name|'adds'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'sha1'
name|'in'
name|'new_commits'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'new'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'action'
op|'='
string|"'adds'"
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
name|'action'
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
nl|'\n'
name|'if'
name|'new_commits'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NEW_REVISIONS_TEMPLATE'
op|','
name|'tot'
op|'='
name|'len'
op|'('
name|'new_commits'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'generate_revision_change_log'
op|'('
name|'new_commits_list'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NO_NEW_REVISIONS_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
comment|'# The diffstat is shown from the old revision to the new'
nl|'\n'
comment|'# revision.  This is to show the truth of what happened in'
nl|'\n'
comment|"# this change.  There's no point showing the stat from the"
nl|'\n'
comment|'# base to the new revision because the base is effectively a'
nl|'\n'
comment|'# random revision at this point - the user will be interested'
nl|'\n'
comment|'# in what this revision changed - including the undoing of'
nl|'\n'
comment|'# previous revisions in the case of non-fast-forward updates.'
nl|'\n'
dedent|''
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
name|'yield'
string|"'Summary of changes:\\n'"
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'read_git_lines'
op|'('
nl|'\n'
op|'['
string|"'diff-tree'"
op|']'
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'diffopts'
nl|'\n'
op|'+'
op|'['
string|"'%s..%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|','
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|','
op|')'
op|']'
op|','
nl|'\n'
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
name|'and'
name|'not'
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|':'
newline|'\n'
comment|'# A reference was deleted.  List the revisions that were'
nl|'\n'
comment|'# removed from the repository by this reference change.'
nl|'\n'
nl|'\n'
indent|'            '
name|'sha1s'
op|'='
name|'list'
op|'('
name|'push'
op|'.'
name|'get_discarded_commits'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
name|'tot'
op|'='
name|'len'
op|'('
name|'sha1s'
op|')'
newline|'\n'
name|'discarded_revisions'
op|'='
op|'['
nl|'\n'
name|'Revision'
op|'('
name|'self'
op|','
name|'GitObject'
op|'('
name|'sha1'
op|')'
op|','
name|'num'
op|'='
name|'i'
op|'+'
number|'1'
op|','
name|'tot'
op|'='
name|'tot'
op|')'
nl|'\n'
name|'for'
op|'('
name|'i'
op|','
name|'sha1'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'sha1s'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'discarded_revisions'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'DISCARDED_REVISIONS_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
dedent|''
name|'yield'
string|"'\\n'"
newline|'\n'
name|'for'
name|'r'
name|'in'
name|'discarded_revisions'
op|':'
newline|'\n'
indent|'                    '
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
op|'='
name|'r'
op|'.'
name|'rev'
op|'.'
name|'get_summary'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'r'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
string|"'discards'"
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NO_DISCARDED_REVISIONS_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'not'
name|'self'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
name|'and'
name|'not'
name|'self'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'NON_COMMIT_UPDATE_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_create_summary
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_create_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for the creation of a reference."""'
newline|'\n'
nl|'\n'
comment|'# This is a new reference and so oldrev is not valid'
nl|'\n'
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
op|'='
name|'self'
op|'.'
name|'new'
op|'.'
name|'get_summary'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
string|"'at'"
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'yield'
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|member|generate_update_summary
dedent|''
name|'def'
name|'generate_update_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for the change of a pre-existing branch."""'
newline|'\n'
nl|'\n'
name|'return'
name|'iter'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_delete_summary
dedent|''
name|'def'
name|'generate_delete_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for the deletion of any type of reference."""'
newline|'\n'
nl|'\n'
op|'('
name|'sha1'
op|','
name|'subject'
op|')'
op|'='
name|'self'
op|'.'
name|'old'
op|'.'
name|'get_summary'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
string|"'was'"
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'sha1'
op|','
name|'text'
op|'='
name|'subject'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'yield'
string|"'\\n'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BranchChange
dedent|''
dedent|''
name|'class'
name|'BranchChange'
op|'('
name|'ReferenceChange'
op|')'
op|':'
newline|'\n'
DECL|variable|refname_type
indent|'    '
name|'refname_type'
op|'='
string|"'branch'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|','
name|'refname'
op|','
name|'short_refname'
op|','
name|'old'
op|','
name|'new'
op|','
name|'rev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ReferenceChange'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
name|'environment'
op|','
nl|'\n'
name|'refname'
op|'='
name|'refname'
op|','
name|'short_refname'
op|'='
name|'short_refname'
op|','
nl|'\n'
name|'old'
op|'='
name|'old'
op|','
name|'new'
op|'='
name|'new'
op|','
name|'rev'
op|'='
name|'rev'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recipients'
op|'='
name|'environment'
op|'.'
name|'get_refchange_recipients'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AnnotatedTagChange
dedent|''
dedent|''
name|'class'
name|'AnnotatedTagChange'
op|'('
name|'ReferenceChange'
op|')'
op|':'
newline|'\n'
DECL|variable|refname_type
indent|'    '
name|'refname_type'
op|'='
string|"'annotated tag'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|','
name|'refname'
op|','
name|'short_refname'
op|','
name|'old'
op|','
name|'new'
op|','
name|'rev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ReferenceChange'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
name|'environment'
op|','
nl|'\n'
name|'refname'
op|'='
name|'refname'
op|','
name|'short_refname'
op|'='
name|'short_refname'
op|','
nl|'\n'
name|'old'
op|'='
name|'old'
op|','
name|'new'
op|'='
name|'new'
op|','
name|'rev'
op|'='
name|'rev'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recipients'
op|'='
name|'environment'
op|'.'
name|'get_announce_recipients'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'show_shortlog'
op|'='
name|'environment'
op|'.'
name|'announce_show_shortlog'
newline|'\n'
nl|'\n'
DECL|variable|ANNOTATED_TAG_FORMAT
dedent|''
name|'ANNOTATED_TAG_FORMAT'
op|'='
op|'('
nl|'\n'
string|"'%(*objectname)\\n'"
nl|'\n'
string|"'%(*objecttype)\\n'"
nl|'\n'
string|"'%(taggername)\\n'"
nl|'\n'
string|"'%(taggerdate)'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_tag
name|'def'
name|'describe_tag'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Describe the new value of an annotated tag."""'
newline|'\n'
nl|'\n'
comment|'# Use git for-each-ref to pull out the individual fields from'
nl|'\n'
comment|'# the tag'
nl|'\n'
op|'['
name|'tagobject'
op|','
name|'tagtype'
op|','
name|'tagger'
op|','
name|'tagged'
op|']'
op|'='
name|'read_git_lines'
op|'('
nl|'\n'
op|'['
string|"'for-each-ref'"
op|','
string|"'--format=%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'ANNOTATED_TAG_FORMAT'
op|','
op|')'
op|','
name|'self'
op|'.'
name|'refname'
op|']'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
nl|'\n'
name|'BRIEF_SUMMARY_TEMPLATE'
op|','
name|'action'
op|'='
string|"'tagging'"
op|','
nl|'\n'
name|'rev_short'
op|'='
name|'tagobject'
op|','
name|'text'
op|'='
string|"'(%s)'"
op|'%'
op|'('
name|'tagtype'
op|','
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'if'
name|'tagtype'
op|'=='
string|"'commit'"
op|':'
newline|'\n'
comment|'# If the tagged object is a commit, then we assume this is a'
nl|'\n'
comment|'# release, and so we calculate which tag this tag is'
nl|'\n'
comment|'# replacing'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'prevtag'
op|'='
name|'read_git_output'
op|'('
op|'['
string|"'describe'"
op|','
string|"'--abbrev=0'"
op|','
string|"'%s^'"
op|'%'
op|'('
name|'self'
op|'.'
name|'new'
op|','
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|':'
newline|'\n'
indent|'                '
name|'prevtag'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'prevtag'
op|':'
newline|'\n'
indent|'                '
name|'yield'
string|"'  replaces  %s\\n'"
op|'%'
op|'('
name|'prevtag'
op|','
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'prevtag'
op|'='
name|'None'
newline|'\n'
name|'yield'
string|"'    length  %s bytes\\n'"
op|'%'
op|'('
name|'read_git_output'
op|'('
op|'['
string|"'cat-file'"
op|','
string|"'-s'"
op|','
name|'tagobject'
op|']'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'yield'
string|"' tagged by  %s\\n'"
op|'%'
op|'('
name|'tagger'
op|','
op|')'
newline|'\n'
name|'yield'
string|"'        on  %s\\n'"
op|'%'
op|'('
name|'tagged'
op|','
op|')'
newline|'\n'
name|'yield'
string|"'\\n'"
newline|'\n'
nl|'\n'
comment|'# Show the content of the tag message; this might contain a'
nl|'\n'
comment|'# change log or release notes so is worth displaying.'
nl|'\n'
name|'yield'
name|'LOGBEGIN'
newline|'\n'
name|'contents'
op|'='
name|'list'
op|'('
name|'read_git_lines'
op|'('
op|'['
string|"'cat-file'"
op|','
string|"'tag'"
op|','
name|'self'
op|'.'
name|'new'
op|'.'
name|'sha1'
op|']'
op|','
name|'keepends'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'contents'
op|'='
name|'contents'
op|'['
name|'contents'
op|'.'
name|'index'
op|'('
string|"'\\n'"
op|')'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'contents'
name|'and'
name|'contents'
op|'['
op|'-'
number|'1'
op|']'
op|'['
op|'-'
number|'1'
op|':'
op|']'
op|'!='
string|"'\\n'"
op|':'
newline|'\n'
indent|'            '
name|'contents'
op|'.'
name|'append'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'contents'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'show_shortlog'
name|'and'
name|'tagtype'
op|'=='
string|"'commit'"
op|':'
newline|'\n'
comment|'# Only commit tags make sense to have rev-list operations'
nl|'\n'
comment|'# performed on them'
nl|'\n'
indent|'            '
name|'yield'
string|"'\\n'"
newline|'\n'
name|'if'
name|'prevtag'
op|':'
newline|'\n'
comment|'# Show changes since the previous release'
nl|'\n'
indent|'                '
name|'revlist'
op|'='
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'rev-list'"
op|','
string|"'--pretty=short'"
op|','
string|"'%s..%s'"
op|'%'
op|'('
name|'prevtag'
op|','
name|'self'
op|'.'
name|'new'
op|','
op|')'
op|']'
op|','
nl|'\n'
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# No previous tag, show all the changes since time'
nl|'\n'
comment|'# began'
nl|'\n'
indent|'                '
name|'revlist'
op|'='
name|'read_git_output'
op|'('
nl|'\n'
op|'['
string|"'rev-list'"
op|','
string|"'--pretty=short'"
op|','
string|"'%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'new'
op|','
op|')'
op|']'
op|','
nl|'\n'
name|'keepends'
op|'='
name|'True'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'read_git_lines'
op|'('
op|'['
string|"'shortlog'"
op|']'
op|','
name|'input'
op|'='
name|'revlist'
op|','
name|'keepends'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'yield'
name|'LOGEND'
newline|'\n'
name|'yield'
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|member|generate_create_summary
dedent|''
name|'def'
name|'generate_create_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for the creation of an annotated tag."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'TAG_CREATED_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'describe_tag'
op|'('
name|'push'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_update_summary
dedent|''
dedent|''
name|'def'
name|'generate_update_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for the update of an annotated tag.\n\n        This is probably a rare event and may not even be allowed."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'TAG_UPDATED_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'describe_tag'
op|'('
name|'push'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_delete_summary
dedent|''
dedent|''
name|'def'
name|'generate_delete_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a non-annotated reference is updated."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'TAG_DELETED_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'expand'
op|'('
string|"'   tag was  %(oldrev_short)s\\n'"
op|')'
newline|'\n'
name|'yield'
string|"'\\n'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonAnnotatedTagChange
dedent|''
dedent|''
name|'class'
name|'NonAnnotatedTagChange'
op|'('
name|'ReferenceChange'
op|')'
op|':'
newline|'\n'
DECL|variable|refname_type
indent|'    '
name|'refname_type'
op|'='
string|"'tag'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|','
name|'refname'
op|','
name|'short_refname'
op|','
name|'old'
op|','
name|'new'
op|','
name|'rev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ReferenceChange'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
name|'environment'
op|','
nl|'\n'
name|'refname'
op|'='
name|'refname'
op|','
name|'short_refname'
op|'='
name|'short_refname'
op|','
nl|'\n'
name|'old'
op|'='
name|'old'
op|','
name|'new'
op|'='
name|'new'
op|','
name|'rev'
op|'='
name|'rev'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recipients'
op|'='
name|'environment'
op|'.'
name|'get_refchange_recipients'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_create_summary
dedent|''
name|'def'
name|'generate_create_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called for the creation of an annotated tag."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'TAG_CREATED_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_update_summary
dedent|''
dedent|''
name|'def'
name|'generate_update_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a non-annotated reference is updated."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'TAG_UPDATED_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
DECL|member|generate_delete_summary
dedent|''
dedent|''
name|'def'
name|'generate_delete_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a non-annotated reference is updated."""'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'expand_lines'
op|'('
name|'TAG_DELETED_TEMPLATE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'ReferenceChange'
op|'.'
name|'generate_delete_summary'
op|'('
name|'self'
op|','
name|'push'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OtherReferenceChange
dedent|''
dedent|''
dedent|''
name|'class'
name|'OtherReferenceChange'
op|'('
name|'ReferenceChange'
op|')'
op|':'
newline|'\n'
DECL|variable|refname_type
indent|'    '
name|'refname_type'
op|'='
string|"'reference'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environment'
op|','
name|'refname'
op|','
name|'short_refname'
op|','
name|'old'
op|','
name|'new'
op|','
name|'rev'
op|')'
op|':'
newline|'\n'
comment|'# We use the full refname as short_refname, because otherwise'
nl|'\n'
comment|'# the full name of the reference would not be obvious from the'
nl|'\n'
comment|'# text of the email.'
nl|'\n'
indent|'        '
name|'ReferenceChange'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
name|'environment'
op|','
nl|'\n'
name|'refname'
op|'='
name|'refname'
op|','
name|'short_refname'
op|'='
name|'refname'
op|','
nl|'\n'
name|'old'
op|'='
name|'old'
op|','
name|'new'
op|'='
name|'new'
op|','
name|'rev'
op|'='
name|'rev'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recipients'
op|'='
name|'environment'
op|'.'
name|'get_refchange_recipients'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Mailer
dedent|''
dedent|''
name|'class'
name|'Mailer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An object that can send emails."""'
newline|'\n'
nl|'\n'
DECL|member|send
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'to_addrs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send an email consisting of lines.\n\n        lines must be an iterable over the lines constituting the\n        header and body of the email.  to_addrs is a list of recipient\n        addresses (can be needed even if lines already contains a\n        "To:" field).  It can be either a string (comma-separated list\n        of email addresses) or a Python list of individual email\n        addresses.\n\n        """'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SendMailer
dedent|''
dedent|''
name|'class'
name|'SendMailer'
op|'('
name|'Mailer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send emails using \'sendmail -t\'."""'
newline|'\n'
nl|'\n'
DECL|variable|SENDMAIL_CANDIDATES
name|'SENDMAIL_CANDIDATES'
op|'='
op|'['
nl|'\n'
string|"'/usr/sbin/sendmail'"
op|','
nl|'\n'
string|"'/usr/lib/sendmail'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|find_sendmail
name|'def'
name|'find_sendmail'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'path'
name|'in'
name|'SendMailer'
op|'.'
name|'SENDMAIL_CANDIDATES'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'os'
op|'.'
name|'access'
op|'('
name|'path'
op|','
name|'os'
op|'.'
name|'X_OK'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'path'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConfigurationException'
op|'('
nl|'\n'
string|"'No sendmail executable found.  '"
nl|'\n'
string|"'Try setting multimailhook.sendmailCommand.'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'command'
op|'='
name|'None'
op|','
name|'envelopesender'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct a SendMailer instance.\n\n        command should be the command and arguments used to invoke\n        sendmail, as a list of strings.  If an envelopesender is\n        provided, it will also be passed to the command, via \'-f\n        envelopesender\'."""'
newline|'\n'
nl|'\n'
name|'if'
name|'command'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
op|'['
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'command'
op|'='
op|'['
name|'self'
op|'.'
name|'find_sendmail'
op|'('
op|')'
op|','
string|"'-t'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'envelopesender'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'command'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-f'"
op|','
name|'envelopesender'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'to_addrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'self'
op|'.'
name|'command'
op|','
name|'stdin'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Cannot execute command: %s\\n'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'command'
op|')'
nl|'\n'
op|'+'
string|"'*** %s\\n'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
nl|'\n'
op|'+'
string|'\'*** Try setting multimailhook.mailer to "smtp"\\n\''
nl|'\n'
string|"'*** to send emails without using the sendmail command.\\n'"
nl|'\n'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'stdin'
op|'.'
name|'writelines'
op|'('
name|'lines'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Error while generating commit email\\n'"
nl|'\n'
string|"'***  - mail sending aborted.\\n'"
nl|'\n'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'terminate'
op|'('
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'retcode'
op|'='
name|'p'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'retcode'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'CommandError'
op|'('
name|'self'
op|'.'
name|'command'
op|','
name|'retcode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SMTPMailer
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'SMTPMailer'
op|'('
name|'Mailer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send emails using Python\'s smtplib."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'envelopesender'
op|','
name|'smtpserver'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'envelopesender'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'fatal: git_multimail: cannot use SMTPMailer without a sender address.\\n'"
nl|'\n'
string|"'please set either multimailhook.envelopeSender or user.email\\n'"
nl|'\n'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'envelopesender'
op|'='
name|'envelopesender'
newline|'\n'
name|'self'
op|'.'
name|'smtpserver'
op|'='
name|'smtpserver'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'smtp'
op|'='
name|'smtplib'
op|'.'
name|'SMTP'
op|'('
name|'self'
op|'.'
name|'smtpserver'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'*** Error establishing SMTP connection to %s***\\n'"
op|'%'
name|'self'
op|'.'
name|'smtpserver'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'*** %s\\n'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'smtp'
op|'.'
name|'quit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'to_addrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
newline|'\n'
comment|'# turn comma-separated list into Python list if needed.'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'to_addrs'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'to_addrs'
op|'='
op|'['
name|'email'
name|'for'
op|'('
name|'name'
op|','
name|'email'
op|')'
name|'in'
name|'getaddresses'
op|'('
op|'['
name|'to_addrs'
op|']'
op|')'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'smtp'
op|'.'
name|'sendmail'
op|'('
name|'self'
op|'.'
name|'envelopesender'
op|','
name|'to_addrs'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'*** Error sending email***\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'*** %s\\n'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'smtp'
op|'.'
name|'quit'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OutputMailer
dedent|''
dedent|''
dedent|''
name|'class'
name|'OutputMailer'
op|'('
name|'Mailer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write emails to an output stream, bracketed by lines of \'=\' characters.\n\n    This is intended for debugging purposes."""'
newline|'\n'
nl|'\n'
name|'SEPARATOR'
op|'='
string|"'='"
op|'*'
number|'75'
op|'+'
string|"'\\n'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'to_addrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'SEPARATOR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'writelines'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'SEPARATOR'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_git_dir
dedent|''
dedent|''
name|'def'
name|'get_git_dir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine GIT_DIR.\n\n    Determine GIT_DIR either from the GIT_DIR environment variable or\n    from the working directory, using Git\'s usual rules."""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'read_git_output'
op|'('
op|'['
string|"'rev-parse'"
op|','
string|"'--git-dir'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'CommandError'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'fatal: git_multimail: not in a git directory\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Environment
dedent|''
dedent|''
name|'class'
name|'Environment'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describes the environment in which the push is occurring.\n\n    An Environment object encapsulates information about the local\n    environment.  For example, it knows how to determine:\n\n    * the name of the repository to which the push occurred\n\n    * what user did the push\n\n    * what users want to be informed about various types of changes.\n\n    An Environment object is expected to have the following methods:\n\n        get_repo_shortname()\n\n            Return a short name for the repository, for display\n            purposes.\n\n        get_repo_path()\n\n            Return the absolute path to the Git repository.\n\n        get_emailprefix()\n\n            Return a string that will be prefixed to every email\'s\n            subject.\n\n        get_pusher()\n\n            Return the username of the person who pushed the changes.\n            This value is used in the email body to indicate who\n            pushed the change.\n\n        get_pusher_email() (may return None)\n\n            Return the email address of the person who pushed the\n            changes.  The value should be a single RFC 2822 email\n            address as a string; e.g., "Joe User <user@example.com>"\n            if available, otherwise "user@example.com".  If set, the\n            value is used as the Reply-To address for refchange\n            emails.  If it is impossible to determine the pusher\'s\n            email, this attribute should be set to None (in which case\n            no Reply-To header will be output).\n\n        get_sender()\n\n            Return the address to be used as the \'From\' email address\n            in the email envelope.\n\n        get_fromaddr()\n\n            Return the \'From\' email address used in the email \'From:\'\n            headers.  (May be a full RFC 2822 email address like \'Joe\n            User <user@example.com>\'.)\n\n        get_administrator()\n\n            Return the name and/or email of the repository\n            administrator.  This value is used in the footer as the\n            person to whom requests to be removed from the\n            notification list should be sent.  Ideally, it should\n            include a valid email address.\n\n        get_reply_to_refchange()\n        get_reply_to_commit()\n\n            Return the address to use in the email "Reply-To" header,\n            as a string.  These can be an RFC 2822 email address, or\n            None to omit the "Reply-To" header.\n            get_reply_to_refchange() is used for refchange emails;\n            get_reply_to_commit() is used for individual commit\n            emails.\n\n    They should also define the following attributes:\n\n        announce_show_shortlog (bool)\n\n            True iff announce emails should include a shortlog.\n\n        refchange_showlog (bool)\n\n            True iff refchanges emails should include a detailed log.\n\n        diffopts (list of strings)\n\n            The options that should be passed to \'git diff\' for the\n            summary email.  The value should be a list of strings\n            representing words to be passed to the command.\n\n        logopts (list of strings)\n\n            Analogous to diffopts, but contains options passed to\n            \'git log\' when generating the detailed log for a set of\n            commits (see refchange_showlog)\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|REPO_NAME_RE
name|'REPO_NAME_RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^(?P<name>.+?)(?:\\.git)$'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'osenv'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'osenv'
op|'='
name|'osenv'
name|'or'
name|'os'
op|'.'
name|'environ'
newline|'\n'
name|'self'
op|'.'
name|'announce_show_shortlog'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'maxcommitemails'
op|'='
number|'500'
newline|'\n'
name|'self'
op|'.'
name|'diffopts'
op|'='
op|'['
string|"'--stat'"
op|','
string|"'--summary'"
op|','
string|"'--find-copies-harder'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'logopts'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'refchange_showlog'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'COMPUTED_KEYS'
op|'='
op|'['
nl|'\n'
string|"'administrator'"
op|','
nl|'\n'
string|"'charset'"
op|','
nl|'\n'
string|"'emailprefix'"
op|','
nl|'\n'
string|"'fromaddr'"
op|','
nl|'\n'
string|"'pusher'"
op|','
nl|'\n'
string|"'pusher_email'"
op|','
nl|'\n'
string|"'repo_path'"
op|','
nl|'\n'
string|"'repo_shortname'"
op|','
nl|'\n'
string|"'sender'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_values'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_repo_shortname
dedent|''
name|'def'
name|'get_repo_shortname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use the last part of the repo path, with ".git" stripped off if present."""'
newline|'\n'
nl|'\n'
name|'basename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'self'
op|'.'
name|'get_repo_path'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'m'
op|'='
name|'self'
op|'.'
name|'REPO_NAME_RE'
op|'.'
name|'match'
op|'('
name|'basename'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'m'
op|'.'
name|'group'
op|'('
string|"'name'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'basename'
newline|'\n'
nl|'\n'
DECL|member|get_pusher
dedent|''
dedent|''
name|'def'
name|'get_pusher'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_pusher_email
dedent|''
name|'def'
name|'get_pusher_email'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_administrator
dedent|''
name|'def'
name|'get_administrator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'the administrator of this repository'"
newline|'\n'
nl|'\n'
DECL|member|get_emailprefix
dedent|''
name|'def'
name|'get_emailprefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|get_repo_path
dedent|''
name|'def'
name|'get_repo_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'read_git_output'
op|'('
op|'['
string|"'rev-parse'"
op|','
string|"'--is-bare-repository'"
op|']'
op|')'
op|'=='
string|"'true'"
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'get_git_dir'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'read_git_output'
op|'('
op|'['
string|"'rev-parse'"
op|','
string|"'--show-toplevel'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_charset
dedent|''
name|'def'
name|'get_charset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CHARSET'
newline|'\n'
nl|'\n'
DECL|member|get_values
dedent|''
name|'def'
name|'get_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a dictionary {keyword : expansion} for this Environment.\n\n        This method is called by Change._compute_values().  The keys\n        in the returned dictionary are available to be used in any of\n        the templates.  The dictionary is created by calling\n        self.get_NAME() for each of the attributes named in\n        COMPUTED_KEYS and recording those that do not return None.\n        The return value is always a new dictionary."""'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_values'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'COMPUTED_KEYS'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'get_%s'"
op|'%'
op|'('
name|'key'
op|','
op|')'
op|')'
op|'('
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_values'
op|'='
name|'values'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_values'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_refchange_recipients
dedent|''
name|'def'
name|'get_refchange_recipients'
op|'('
name|'self'
op|','
name|'refchange'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the recipients for notifications about refchange.\n\n        Return the list of email addresses to which notifications\n        about the specified ReferenceChange should be sent."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_announce_recipients
dedent|''
name|'def'
name|'get_announce_recipients'
op|'('
name|'self'
op|','
name|'annotated_tag_change'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the recipients for notifications about annotated_tag_change.\n\n        Return the list of email addresses to which notifications\n        about the specified AnnotatedTagChange should be sent."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_reply_to_refchange
dedent|''
name|'def'
name|'get_reply_to_refchange'
op|'('
name|'self'
op|','
name|'refchange'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_pusher_email'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_revision_recipients
dedent|''
name|'def'
name|'get_revision_recipients'
op|'('
name|'self'
op|','
name|'revision'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the recipients for messages about revision.\n\n        Return the list of email addresses to which notifications\n        about the specified Revision should be sent.  This method\n        could be overridden, for example, to take into account the\n        contents of the revision when deciding whom to notify about\n        it.  For example, there could be a scheme for users to express\n        interest in particular files or subdirectories, and only\n        receive notification emails for revisions that affecting those\n        files."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_reply_to_commit
dedent|''
name|'def'
name|'get_reply_to_commit'
op|'('
name|'self'
op|','
name|'revision'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'revision'
op|'.'
name|'author'
newline|'\n'
nl|'\n'
DECL|member|filter_body
dedent|''
name|'def'
name|'filter_body'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Filter the lines intended for an email body.\n\n        lines is an iterable over the lines that would go into the\n        email body.  Filter it (e.g., limit the number of lines, the\n        line length, character set, etc.), returning another iterable.\n        See FilterLinesEnvironmentMixin and MaxlinesEnvironmentMixin\n        for classes implementing this functionality."""'
newline|'\n'
nl|'\n'
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigEnvironmentMixin
dedent|''
dedent|''
name|'class'
name|'ConfigEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A mixin that sets self.config to its constructor\'s config argument.\n\n    This class\'s constructor consumes the "config" argument.\n\n    Mixins that need to inspect the config should inherit from this\n    class (1) to make sure that "config" is still in the constructor\n    arguments with its own constructor runs and/or (2) to be sure that\n    self.config is set after construction."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConfigEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'='
name|'config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigOptionsEnvironmentMixin
dedent|''
dedent|''
name|'class'
name|'ConfigOptionsEnvironmentMixin'
op|'('
name|'ConfigEnvironmentMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An Environment that reads most of its information from "git config"."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConfigOptionsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'config'
op|'='
name|'config'
op|','
op|'**'
name|'kw'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'announce_show_shortlog'
op|'='
name|'config'
op|'.'
name|'get_bool'
op|'('
nl|'\n'
string|"'announceshortlog'"
op|','
name|'default'
op|'='
name|'self'
op|'.'
name|'announce_show_shortlog'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'refchange_showlog'
op|'='
name|'config'
op|'.'
name|'get_bool'
op|'('
nl|'\n'
string|"'refchangeshowlog'"
op|','
name|'default'
op|'='
name|'self'
op|'.'
name|'refchange_showlog'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'maxcommitemails'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'maxcommitemails'"
op|')'
newline|'\n'
name|'if'
name|'maxcommitemails'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'maxcommitemails'
op|'='
name|'int'
op|'('
name|'maxcommitemails'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Malformed value for multimailhook.maxCommitEmails: %s\\n'"
op|'%'
name|'maxcommitemails'
nl|'\n'
op|'+'
string|"'*** Expected a number.  Ignoring.\\n'"
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'diffopts'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'diffopts'"
op|')'
newline|'\n'
name|'if'
name|'diffopts'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'diffopts'
op|'='
name|'shlex'
op|'.'
name|'split'
op|'('
name|'diffopts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'logopts'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'logopts'"
op|')'
newline|'\n'
name|'if'
name|'logopts'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logopts'
op|'='
name|'shlex'
op|'.'
name|'split'
op|'('
name|'logopts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reply_to'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'replyTo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__reply_to_refchange'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'replyToRefchange'"
op|','
name|'default'
op|'='
name|'reply_to'
op|')'
newline|'\n'
name|'if'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__reply_to_refchange'
name|'is'
name|'not'
name|'None'
nl|'\n'
name|'and'
name|'self'
op|'.'
name|'__reply_to_refchange'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'author'"
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConfigurationException'
op|'('
nl|'\n'
string|'\'"author" is not an allowed setting for replyToRefchange\''
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__reply_to_commit'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'replyToCommit'"
op|','
name|'default'
op|'='
name|'reply_to'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_administrator
dedent|''
name|'def'
name|'get_administrator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'administrator'"
op|')'
nl|'\n'
name|'or'
name|'self'
op|'.'
name|'get_sender'
op|'('
op|')'
nl|'\n'
name|'or'
name|'super'
op|'('
name|'ConfigOptionsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'get_administrator'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_repo_shortname
dedent|''
name|'def'
name|'get_repo_shortname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'reponame'"
op|')'
nl|'\n'
name|'or'
name|'super'
op|'('
name|'ConfigOptionsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'get_repo_shortname'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_emailprefix
dedent|''
name|'def'
name|'get_emailprefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'emailprefix'
op|'='
name|'self'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'emailprefix'"
op|')'
newline|'\n'
name|'if'
name|'emailprefix'
name|'and'
name|'emailprefix'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'emailprefix'
op|'.'
name|'strip'
op|'('
op|')'
op|'+'
string|"' '"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'[%s] '"
op|'%'
op|'('
name|'self'
op|'.'
name|'get_repo_shortname'
op|'('
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_sender
dedent|''
dedent|''
name|'def'
name|'get_sender'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'envelopesender'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_fromaddr
dedent|''
name|'def'
name|'get_fromaddr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fromaddr'
op|'='
name|'self'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'from'"
op|')'
newline|'\n'
name|'if'
name|'fromaddr'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fromaddr'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'config'
op|'='
name|'Config'
op|'('
string|"'user'"
op|')'
newline|'\n'
name|'fromname'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
name|'default'
op|'='
string|"''"
op|')'
newline|'\n'
name|'fromemail'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'email'"
op|','
name|'default'
op|'='
string|"''"
op|')'
newline|'\n'
name|'if'
name|'fromemail'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'formataddr'
op|'('
op|'['
name|'fromname'
op|','
name|'fromemail'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'get_sender'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_reply_to_refchange
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_reply_to_refchange'
op|'('
name|'self'
op|','
name|'refchange'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'__reply_to_refchange'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'ConfigOptionsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'get_reply_to_refchange'
op|'('
name|'refchange'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__reply_to_refchange'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'pusher'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_pusher_email'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__reply_to_refchange'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__reply_to_refchange'
newline|'\n'
nl|'\n'
DECL|member|get_reply_to_commit
dedent|''
dedent|''
name|'def'
name|'get_reply_to_commit'
op|'('
name|'self'
op|','
name|'revision'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'__reply_to_commit'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'ConfigOptionsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'get_reply_to_commit'
op|'('
name|'revision'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__reply_to_commit'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'author'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'revision'
op|'.'
name|'get_author'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__reply_to_commit'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'pusher'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_pusher_email'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__reply_to_commit'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__reply_to_commit'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilterLinesEnvironmentMixin
dedent|''
dedent|''
dedent|''
name|'class'
name|'FilterLinesEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handle encoding and maximum line length of body lines.\n\n        emailmaxlinelength (int or None)\n\n            The maximum length of any single line in the email body.\n            Longer lines are truncated at that length with \' [...]\'\n            appended.\n\n        strict_utf8 (bool)\n\n            If this field is set to True, then the email body text is\n            expected to be UTF-8.  Any invalid characters are\n            converted to U+FFFD, the Unicode replacement character\n            (encoded as UTF-8, of course).\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'strict_utf8'
op|'='
name|'True'
op|','
name|'emailmaxlinelength'
op|'='
number|'500'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FilterLinesEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__strict_utf8'
op|'='
name|'strict_utf8'
newline|'\n'
name|'self'
op|'.'
name|'__emailmaxlinelength'
op|'='
name|'emailmaxlinelength'
newline|'\n'
nl|'\n'
DECL|member|filter_body
dedent|''
name|'def'
name|'filter_body'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
name|'super'
op|'('
name|'FilterLinesEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'filter_body'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__strict_utf8'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'='
op|'('
name|'line'
op|'.'
name|'decode'
op|'('
name|'ENCODING'
op|','
string|"'replace'"
op|')'
name|'for'
name|'line'
name|'in'
name|'lines'
op|')'
newline|'\n'
comment|'# Limit the line length in Unicode-space to avoid'
nl|'\n'
comment|'# splitting characters:'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'__emailmaxlinelength'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'limit_linelength'
op|'('
name|'lines'
op|','
name|'self'
op|'.'
name|'__emailmaxlinelength'
op|')'
newline|'\n'
dedent|''
name|'lines'
op|'='
op|'('
name|'line'
op|'.'
name|'encode'
op|'('
name|'ENCODING'
op|','
string|"'replace'"
op|')'
name|'for'
name|'line'
name|'in'
name|'lines'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__emailmaxlinelength'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'='
name|'limit_linelength'
op|'('
name|'lines'
op|','
name|'self'
op|'.'
name|'__emailmaxlinelength'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'ConfigFilterLinesEnvironmentMixin'
op|'('
nl|'\n'
name|'ConfigEnvironmentMixin'
op|','
nl|'\n'
name|'FilterLinesEnvironmentMixin'
op|','
nl|'\n'
DECL|class|ConfigFilterLinesEnvironmentMixin
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handle encoding and maximum line length based on config."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'strict_utf8'
op|'='
name|'config'
op|'.'
name|'get_bool'
op|'('
string|"'emailstrictutf8'"
op|','
name|'default'
op|'='
name|'None'
op|')'
newline|'\n'
name|'if'
name|'strict_utf8'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'strict_utf8'"
op|']'
op|'='
name|'strict_utf8'
newline|'\n'
nl|'\n'
dedent|''
name|'emailmaxlinelength'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'emailmaxlinelength'"
op|')'
newline|'\n'
name|'if'
name|'emailmaxlinelength'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'emailmaxlinelength'"
op|']'
op|'='
name|'int'
op|'('
name|'emailmaxlinelength'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'ConfigFilterLinesEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'config'
op|'='
name|'config'
op|','
op|'**'
name|'kw'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MaxlinesEnvironmentMixin
dedent|''
dedent|''
name|'class'
name|'MaxlinesEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Limit the email body to a specified number of lines."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'emailmaxlines'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MaxlinesEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__emailmaxlines'
op|'='
name|'emailmaxlines'
newline|'\n'
nl|'\n'
DECL|member|filter_body
dedent|''
name|'def'
name|'filter_body'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
name|'super'
op|'('
name|'MaxlinesEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'filter_body'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__emailmaxlines'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'='
name|'limit_lines'
op|'('
name|'lines'
op|','
name|'self'
op|'.'
name|'__emailmaxlines'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'ConfigMaxlinesEnvironmentMixin'
op|'('
nl|'\n'
name|'ConfigEnvironmentMixin'
op|','
nl|'\n'
name|'MaxlinesEnvironmentMixin'
op|','
nl|'\n'
DECL|class|ConfigMaxlinesEnvironmentMixin
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Limit the email body to the number of lines specified in config."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'emailmaxlines'
op|'='
name|'int'
op|'('
name|'config'
op|'.'
name|'get'
op|'('
string|"'emailmaxlines'"
op|','
name|'default'
op|'='
string|"'0'"
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ConfigMaxlinesEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'config'
op|'='
name|'config'
op|','
nl|'\n'
name|'emailmaxlines'
op|'='
name|'emailmaxlines'
op|','
nl|'\n'
op|'**'
name|'kw'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PusherDomainEnvironmentMixin
dedent|''
dedent|''
name|'class'
name|'PusherDomainEnvironmentMixin'
op|'('
name|'ConfigEnvironmentMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Deduce pusher_email from pusher by appending an emaildomain."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PusherDomainEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__emaildomain'
op|'='
name|'self'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'emaildomain'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_pusher_email
dedent|''
name|'def'
name|'get_pusher_email'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'__emaildomain'
op|':'
newline|'\n'
comment|"# Derive the pusher's full email address in the default way:"
nl|'\n'
indent|'            '
name|'return'
string|"'%s@%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'get_pusher'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'__emaildomain'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'PusherDomainEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'get_pusher_email'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticRecipientsEnvironmentMixin
dedent|''
dedent|''
dedent|''
name|'class'
name|'StaticRecipientsEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set recipients statically based on constructor parameters."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
nl|'\n'
name|'refchange_recipients'
op|','
name|'announce_recipients'
op|','
name|'revision_recipients'
op|','
nl|'\n'
op|'**'
name|'kw'
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'StaticRecipientsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
comment|'# The recipients for various types of notification emails, as'
nl|'\n'
comment|'# RFC 2822 email addresses separated by commas (or the empty'
nl|'\n'
comment|'# string if no recipients are configured).  Although there is'
nl|'\n'
comment|'# a mechanism to choose the recipient lists based on on the'
nl|'\n'
comment|'# actual *contents* of the change being reported, we only'
nl|'\n'
comment|'# choose based on the *type* of the change.  Therefore we can'
nl|'\n'
comment|'# compute them once and for all:'
nl|'\n'
name|'self'
op|'.'
name|'__refchange_recipients'
op|'='
name|'refchange_recipients'
newline|'\n'
name|'self'
op|'.'
name|'__announce_recipients'
op|'='
name|'announce_recipients'
newline|'\n'
name|'self'
op|'.'
name|'__revision_recipients'
op|'='
name|'revision_recipients'
newline|'\n'
nl|'\n'
DECL|member|get_refchange_recipients
dedent|''
name|'def'
name|'get_refchange_recipients'
op|'('
name|'self'
op|','
name|'refchange'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__refchange_recipients'
newline|'\n'
nl|'\n'
DECL|member|get_announce_recipients
dedent|''
name|'def'
name|'get_announce_recipients'
op|'('
name|'self'
op|','
name|'annotated_tag_change'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__announce_recipients'
newline|'\n'
nl|'\n'
DECL|member|get_revision_recipients
dedent|''
name|'def'
name|'get_revision_recipients'
op|'('
name|'self'
op|','
name|'revision'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__revision_recipients'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'ConfigRecipientsEnvironmentMixin'
op|'('
nl|'\n'
name|'ConfigEnvironmentMixin'
op|','
nl|'\n'
name|'StaticRecipientsEnvironmentMixin'
nl|'\n'
DECL|class|ConfigRecipientsEnvironmentMixin
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine recipients statically based on config."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConfigRecipientsEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'config'
op|'='
name|'config'
op|','
nl|'\n'
name|'refchange_recipients'
op|'='
name|'self'
op|'.'
name|'_get_recipients'
op|'('
nl|'\n'
name|'config'
op|','
string|"'refchangelist'"
op|','
string|"'mailinglist'"
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
name|'announce_recipients'
op|'='
name|'self'
op|'.'
name|'_get_recipients'
op|'('
nl|'\n'
name|'config'
op|','
string|"'announcelist'"
op|','
string|"'refchangelist'"
op|','
string|"'mailinglist'"
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
name|'revision_recipients'
op|'='
name|'self'
op|'.'
name|'_get_recipients'
op|'('
nl|'\n'
name|'config'
op|','
string|"'commitlist'"
op|','
string|"'mailinglist'"
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
op|'**'
name|'kw'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_recipients
dedent|''
name|'def'
name|'_get_recipients'
op|'('
name|'self'
op|','
name|'config'
op|','
op|'*'
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the recipients for a particular type of message.\n\n        Return the list of email addresses to which a particular type\n        of notification email should be sent, by looking at the config\n        value for "multimailhook.$name" for each of names.  Use the\n        value from the first name that is configured.  The return\n        value is a (possibly empty) string containing RFC 2822 email\n        addresses separated by commas.  If no configuration could be\n        found, raise a ConfigurationException."""'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'='
name|'config'
op|'.'
name|'get_recipients'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'retval'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'retval'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'names'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'hint'
op|'='
string|'\'Please set "%s.%s"\''
op|'%'
op|'('
name|'config'
op|'.'
name|'section'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'hint'
op|'='
op|'('
nl|'\n'
string|'\'Please set one of the following:\\n    "%s"\''
nl|'\n'
op|'%'
op|'('
string|'\'"\\n    "\''
op|'.'
name|'join'
op|'('
string|"'%s.%s'"
op|'%'
op|'('
name|'config'
op|'.'
name|'section'
op|','
name|'name'
op|')'
name|'for'
name|'name'
name|'in'
name|'names'
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'ConfigurationException'
op|'('
nl|'\n'
string|"'The list of recipients for %s is not configured.\\n%s'"
op|'%'
op|'('
name|'names'
op|'['
number|'0'
op|']'
op|','
name|'hint'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProjectdescEnvironmentMixin
dedent|''
dedent|''
name|'class'
name|'ProjectdescEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make a "projectdesc" value available for templates.\n\n    By default, it is set to the first line of $GIT_DIR/description\n    (if that file is present and appears to be set meaningfully)."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ProjectdescEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'COMPUTED_KEYS'
op|'+='
op|'['
string|"'projectdesc'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_projectdesc
dedent|''
name|'def'
name|'get_projectdesc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a one-line descripition of the project."""'
newline|'\n'
nl|'\n'
name|'git_dir'
op|'='
name|'get_git_dir'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'projectdesc'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'git_dir'
op|','
string|"'description'"
op|')'
op|')'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'projectdesc'
name|'and'
name|'not'
name|'projectdesc'
op|'.'
name|'startswith'
op|'('
string|"'Unnamed repository'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'projectdesc'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"'UNNAMED PROJECT'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenericEnvironmentMixin
dedent|''
dedent|''
name|'class'
name|'GenericEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
DECL|member|get_pusher
indent|'    '
name|'def'
name|'get_pusher'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'osenv'
op|'.'
name|'get'
op|'('
string|"'USER'"
op|','
string|"'unknown user'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'GenericEnvironment'
op|'('
nl|'\n'
name|'ProjectdescEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigMaxlinesEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigFilterLinesEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigRecipientsEnvironmentMixin'
op|','
nl|'\n'
name|'PusherDomainEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigOptionsEnvironmentMixin'
op|','
nl|'\n'
name|'GenericEnvironmentMixin'
op|','
nl|'\n'
name|'Environment'
op|','
nl|'\n'
DECL|class|GenericEnvironment
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitoliteEnvironmentMixin
dedent|''
name|'class'
name|'GitoliteEnvironmentMixin'
op|'('
name|'Environment'
op|')'
op|':'
newline|'\n'
DECL|member|get_repo_shortname
indent|'    '
name|'def'
name|'get_repo_shortname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# The gitolite environment variable $GL_REPO is a pretty good'
nl|'\n'
comment|"# repo_shortname (though it's probably not as good as a value"
nl|'\n'
comment|'# the user might have explicitly put in his config).'
nl|'\n'
indent|'        '
name|'return'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'osenv'
op|'.'
name|'get'
op|'('
string|"'GL_REPO'"
op|','
name|'None'
op|')'
nl|'\n'
name|'or'
name|'super'
op|'('
name|'GitoliteEnvironmentMixin'
op|','
name|'self'
op|')'
op|'.'
name|'get_repo_shortname'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_pusher
dedent|''
name|'def'
name|'get_pusher'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'osenv'
op|'.'
name|'get'
op|'('
string|"'GL_USER'"
op|','
string|"'unknown user'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'GitoliteEnvironment'
op|'('
nl|'\n'
name|'ProjectdescEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigMaxlinesEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigFilterLinesEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigRecipientsEnvironmentMixin'
op|','
nl|'\n'
name|'PusherDomainEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigOptionsEnvironmentMixin'
op|','
nl|'\n'
name|'GitoliteEnvironmentMixin'
op|','
nl|'\n'
name|'Environment'
op|','
nl|'\n'
DECL|class|GitoliteEnvironment
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Push
dedent|''
name|'class'
name|'Push'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represent an entire push (i.e., a group of ReferenceChanges).\n\n    It is easy to figure out what commits were added to a *branch* by\n    a Reference change:\n\n        git rev-list change.old..change.new\n\n    or removed from a *branch*:\n\n        git rev-list change.new..change.old\n\n    But it is not quite so trivial to determine which entirely new\n    commits were added to the *repository* by a push and which old\n    commits were discarded by a push.  A big part of the job of this\n    class is to figure out these things, and to make sure that new\n    commits are only detailed once even if they were added to multiple\n    references.\n\n    The first step is to determine the "other" references--those\n    unaffected by the current push.  They are computed by\n    Push._compute_other_ref_sha1s() by listing all references then\n    removing any affected by this push.\n\n    The commits contained in the repository before this push were\n\n        git rev-list other1 other2 other3 ... change1.old change2.old ...\n\n    Where "changeN.old" is the old value of one of the references\n    affected by this push.\n\n    The commits contained in the repository after this push are\n\n        git rev-list other1 other2 other3 ... change1.new change2.new ...\n\n    The commits added by this push are the difference between these\n    two sets, which can be written\n\n        git rev-list \\\n            ^other1 ^other2 ... \\\n            ^change1.old ^change2.old ... \\\n            change1.new change2.new ...\n\n    The commits removed by this push can be computed by\n\n        git rev-list \\\n            ^other1 ^other2 ... \\\n            ^change1.new ^change2.new ... \\\n            change1.old change2.old ...\n\n    The last point is that it is possible that other pushes are\n    occurring simultaneously to this one, so reference values can\n    change at any time.  It is impossible to eliminate all race\n    conditions, but we reduce the window of time during which problems\n    can occur by translating reference names to SHA1s as soon as\n    possible and working with SHA1s thereafter (because SHA1s are\n    immutable)."""'
newline|'\n'
nl|'\n'
comment|'# A map {(changeclass, changetype) : integer} specifying the order'
nl|'\n'
comment|'# that reference changes will be processed if multiple reference'
nl|'\n'
comment|'# changes are included in a single push.  The order is significant'
nl|'\n'
comment|'# mostly because new commit notifications are threaded together'
nl|'\n'
comment|'# with the first reference change that includes the commit.  The'
nl|'\n'
comment|'# following order thus causes commits to be grouped with branch'
nl|'\n'
comment|'# changes (as opposed to tag changes) if possible.'
nl|'\n'
DECL|variable|SORT_ORDER
name|'SORT_ORDER'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'('
name|'value'
op|','
name|'i'
op|')'
name|'for'
op|'('
name|'i'
op|','
name|'value'
op|')'
name|'in'
name|'enumerate'
op|'('
op|'['
nl|'\n'
op|'('
name|'BranchChange'
op|','
string|"'update'"
op|')'
op|','
nl|'\n'
op|'('
name|'BranchChange'
op|','
string|"'create'"
op|')'
op|','
nl|'\n'
op|'('
name|'AnnotatedTagChange'
op|','
string|"'update'"
op|')'
op|','
nl|'\n'
op|'('
name|'AnnotatedTagChange'
op|','
string|"'create'"
op|')'
op|','
nl|'\n'
op|'('
name|'NonAnnotatedTagChange'
op|','
string|"'update'"
op|')'
op|','
nl|'\n'
op|'('
name|'NonAnnotatedTagChange'
op|','
string|"'create'"
op|')'
op|','
nl|'\n'
op|'('
name|'BranchChange'
op|','
string|"'delete'"
op|')'
op|','
nl|'\n'
op|'('
name|'AnnotatedTagChange'
op|','
string|"'delete'"
op|')'
op|','
nl|'\n'
op|'('
name|'NonAnnotatedTagChange'
op|','
string|"'delete'"
op|')'
op|','
nl|'\n'
op|'('
name|'OtherReferenceChange'
op|','
string|"'update'"
op|')'
op|','
nl|'\n'
op|'('
name|'OtherReferenceChange'
op|','
string|"'create'"
op|')'
op|','
nl|'\n'
op|'('
name|'OtherReferenceChange'
op|','
string|"'delete'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'changes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'changes'
op|'='
name|'sorted'
op|'('
name|'changes'
op|','
name|'key'
op|'='
name|'self'
op|'.'
name|'_sort_key'
op|')'
newline|'\n'
nl|'\n'
comment|'# The SHA-1s of commits referred to by references unaffected'
nl|'\n'
comment|'# by this push:'
nl|'\n'
name|'other_ref_sha1s'
op|'='
name|'self'
op|'.'
name|'_compute_other_ref_sha1s'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_old_rev_exclusion_spec'
op|'='
name|'self'
op|'.'
name|'_compute_rev_exclusion_spec'
op|'('
nl|'\n'
name|'other_ref_sha1s'
op|'.'
name|'union'
op|'('
nl|'\n'
name|'change'
op|'.'
name|'old'
op|'.'
name|'sha1'
nl|'\n'
name|'for'
name|'change'
name|'in'
name|'self'
op|'.'
name|'changes'
nl|'\n'
name|'if'
name|'change'
op|'.'
name|'old'
op|'.'
name|'type'
name|'in'
op|'['
string|"'commit'"
op|','
string|"'tag'"
op|']'
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_new_rev_exclusion_spec'
op|'='
name|'self'
op|'.'
name|'_compute_rev_exclusion_spec'
op|'('
nl|'\n'
name|'other_ref_sha1s'
op|'.'
name|'union'
op|'('
nl|'\n'
name|'change'
op|'.'
name|'new'
op|'.'
name|'sha1'
nl|'\n'
name|'for'
name|'change'
name|'in'
name|'self'
op|'.'
name|'changes'
nl|'\n'
name|'if'
name|'change'
op|'.'
name|'new'
op|'.'
name|'type'
name|'in'
op|'['
string|"'commit'"
op|','
string|"'tag'"
op|']'
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_sort_key
name|'def'
name|'_sort_key'
op|'('
name|'klass'
op|','
name|'change'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'klass'
op|'.'
name|'SORT_ORDER'
op|'['
name|'change'
op|'.'
name|'__class__'
op|','
name|'change'
op|'.'
name|'change_type'
op|']'
op|','
name|'change'
op|'.'
name|'refname'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|_compute_other_ref_sha1s
dedent|''
name|'def'
name|'_compute_other_ref_sha1s'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the GitObjects referred to by references unaffected by this push."""'
newline|'\n'
nl|'\n'
comment|'# The refnames being changed by this push:'
nl|'\n'
name|'updated_refs'
op|'='
name|'set'
op|'('
nl|'\n'
name|'change'
op|'.'
name|'refname'
nl|'\n'
name|'for'
name|'change'
name|'in'
name|'self'
op|'.'
name|'changes'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# The SHA-1s of commits referred to by all references in this'
nl|'\n'
comment|'# repository *except* updated_refs:'
nl|'\n'
name|'sha1s'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'fmt'
op|'='
op|'('
nl|'\n'
string|"'%(objectname) %(objecttype) %(refname)\\n'"
nl|'\n'
string|"'%(*objectname) %(*objecttype) %(refname)'"
nl|'\n'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'read_git_lines'
op|'('
op|'['
string|"'for-each-ref'"
op|','
string|"'--format=%s'"
op|'%'
op|'('
name|'fmt'
op|','
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'sha1'
op|','
name|'type'
op|','
name|'name'
op|')'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'2'
op|')'
newline|'\n'
name|'if'
name|'sha1'
name|'and'
name|'type'
op|'=='
string|"'commit'"
name|'and'
name|'name'
name|'not'
name|'in'
name|'updated_refs'
op|':'
newline|'\n'
indent|'                '
name|'sha1s'
op|'.'
name|'add'
op|'('
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'sha1s'
newline|'\n'
nl|'\n'
DECL|member|_compute_rev_exclusion_spec
dedent|''
name|'def'
name|'_compute_rev_exclusion_spec'
op|'('
name|'self'
op|','
name|'sha1s'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an exclusion specification for \'git rev-list\'.\n\n        git_objects is an iterable over GitObject instances.  Return a\n        string that can be passed to the standard input of \'git\n        rev-list --stdin\' to exclude all of the commits referred to by\n        git_objects."""'
newline|'\n'
nl|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
nl|'\n'
op|'['
string|"'^%s\\n'"
op|'%'
op|'('
name|'sha1'
op|','
op|')'
name|'for'
name|'sha1'
name|'in'
name|'sorted'
op|'('
name|'sha1s'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_new_commits
dedent|''
name|'def'
name|'get_new_commits'
op|'('
name|'self'
op|','
name|'reference_change'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of commits added by this push.\n\n        Return a list of the object names of commits that were added\n        by the part of this push represented by reference_change.  If\n        reference_change is None, then return a list of *all* commits\n        added by this push."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'reference_change'
op|':'
newline|'\n'
indent|'            '
name|'new_revs'
op|'='
name|'sorted'
op|'('
nl|'\n'
name|'change'
op|'.'
name|'new'
op|'.'
name|'sha1'
nl|'\n'
name|'for'
name|'change'
name|'in'
name|'self'
op|'.'
name|'changes'
nl|'\n'
name|'if'
name|'change'
op|'.'
name|'new'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'reference_change'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_revs'
op|'='
op|'['
name|'reference_change'
op|'.'
name|'new'
op|'.'
name|'commit_sha1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
op|'['
string|"'rev-list'"
op|','
string|"'--stdin'"
op|']'
op|'+'
name|'new_revs'
newline|'\n'
name|'return'
name|'read_git_lines'
op|'('
name|'cmd'
op|','
name|'input'
op|'='
name|'self'
op|'.'
name|'_old_rev_exclusion_spec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_discarded_commits
dedent|''
name|'def'
name|'get_discarded_commits'
op|'('
name|'self'
op|','
name|'reference_change'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of commits discarded by this push.\n\n        Return a list of the object names of commits that were\n        entirely discarded from the repository by the part of this\n        push represented by reference_change."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'reference_change'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'old_revs'
op|'='
op|'['
name|'reference_change'
op|'.'
name|'old'
op|'.'
name|'commit_sha1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
op|'['
string|"'rev-list'"
op|','
string|"'--stdin'"
op|']'
op|'+'
name|'old_revs'
newline|'\n'
name|'return'
name|'read_git_lines'
op|'('
name|'cmd'
op|','
name|'input'
op|'='
name|'self'
op|'.'
name|'_new_rev_exclusion_spec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send_emails
dedent|''
name|'def'
name|'send_emails'
op|'('
name|'self'
op|','
name|'mailer'
op|','
name|'body_filter'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use send all of the notification emails needed for this push.\n\n        Use send all of the notification emails (including reference\n        change emails and commit emails) needed for this push.  Send\n        the emails using mailer.  If body_filter is not None, then use\n        it to filter the lines that are intended for the email\n        body."""'
newline|'\n'
nl|'\n'
comment|'# The sha1s of commits that were introduced by this push.'
nl|'\n'
comment|'# They will be removed from this set as they are processed, to'
nl|'\n'
comment|'# guarantee that one (and only one) email is generated for'
nl|'\n'
comment|'# each new commit.'
nl|'\n'
name|'unhandled_sha1s'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'get_new_commits'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'change'
name|'in'
name|'self'
op|'.'
name|'changes'
op|':'
newline|'\n'
comment|"# Check if we've got anyone to send to"
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'change'
op|'.'
name|'recipients'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** no recipients configured so no email will be sent\\n'"
nl|'\n'
string|"'*** for %r update %s->%s\\n'"
nl|'\n'
op|'%'
op|'('
name|'change'
op|'.'
name|'refname'
op|','
name|'change'
op|'.'
name|'old'
op|'.'
name|'sha1'
op|','
name|'change'
op|'.'
name|'new'
op|'.'
name|'sha1'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'Sending notification emails to: %s\\n'"
op|'%'
op|'('
name|'change'
op|'.'
name|'recipients'
op|','
op|')'
op|')'
newline|'\n'
name|'mailer'
op|'.'
name|'send'
op|'('
name|'change'
op|'.'
name|'generate_email'
op|'('
name|'self'
op|','
name|'body_filter'
op|')'
op|','
name|'change'
op|'.'
name|'recipients'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sha1s'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'sha1'
name|'in'
name|'reversed'
op|'('
name|'list'
op|'('
name|'self'
op|'.'
name|'get_new_commits'
op|'('
name|'change'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'sha1'
name|'in'
name|'unhandled_sha1s'
op|':'
newline|'\n'
indent|'                    '
name|'sha1s'
op|'.'
name|'append'
op|'('
name|'sha1'
op|')'
newline|'\n'
name|'unhandled_sha1s'
op|'.'
name|'remove'
op|'('
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'max_emails'
op|'='
name|'change'
op|'.'
name|'environment'
op|'.'
name|'maxcommitemails'
newline|'\n'
name|'if'
name|'max_emails'
name|'and'
name|'len'
op|'('
name|'sha1s'
op|')'
op|'>'
name|'max_emails'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'*** Too many new commits (%d), not sending commit emails.\\n'"
op|'%'
name|'len'
op|'('
name|'sha1s'
op|')'
nl|'\n'
op|'+'
string|"'*** Try setting multimailhook.maxCommitEmails to a greater value\\n'"
nl|'\n'
op|'+'
string|"'*** Currently, multimailhook.maxCommitEmails=%d\\n'"
op|'%'
name|'max_emails'
nl|'\n'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'num'
op|','
name|'sha1'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'sha1s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rev'
op|'='
name|'Revision'
op|'('
name|'change'
op|','
name|'GitObject'
op|'('
name|'sha1'
op|')'
op|','
name|'num'
op|'='
name|'num'
op|'+'
number|'1'
op|','
name|'tot'
op|'='
name|'len'
op|'('
name|'sha1s'
op|')'
op|')'
newline|'\n'
name|'if'
name|'rev'
op|'.'
name|'recipients'
op|':'
newline|'\n'
indent|'                    '
name|'mailer'
op|'.'
name|'send'
op|'('
name|'rev'
op|'.'
name|'generate_email'
op|'('
name|'self'
op|','
name|'body_filter'
op|')'
op|','
name|'rev'
op|'.'
name|'recipients'
op|')'
newline|'\n'
nl|'\n'
comment|'# Consistency check:'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'unhandled_sha1s'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'ERROR: No emails were sent for the following new commits:\\n'"
nl|'\n'
string|"'    %s\\n'"
nl|'\n'
op|'%'
op|'('
string|"'\\n    '"
op|'.'
name|'join'
op|'('
name|'sorted'
op|'('
name|'unhandled_sha1s'
op|')'
op|')'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_as_post_receive_hook
dedent|''
dedent|''
dedent|''
name|'def'
name|'run_as_post_receive_hook'
op|'('
name|'environment'
op|','
name|'mailer'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'changes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'sys'
op|'.'
name|'stdin'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'oldrev'
op|','
name|'newrev'
op|','
name|'refname'
op|')'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'2'
op|')'
newline|'\n'
name|'changes'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'ReferenceChange'
op|'.'
name|'create'
op|'('
name|'environment'
op|','
name|'oldrev'
op|','
name|'newrev'
op|','
name|'refname'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'push'
op|'='
name|'Push'
op|'('
name|'changes'
op|')'
newline|'\n'
name|'push'
op|'.'
name|'send_emails'
op|'('
name|'mailer'
op|','
name|'body_filter'
op|'='
name|'environment'
op|'.'
name|'filter_body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_as_update_hook
dedent|''
name|'def'
name|'run_as_update_hook'
op|'('
name|'environment'
op|','
name|'mailer'
op|','
name|'refname'
op|','
name|'oldrev'
op|','
name|'newrev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'changes'
op|'='
op|'['
nl|'\n'
name|'ReferenceChange'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'environment'
op|','
nl|'\n'
name|'read_git_output'
op|'('
op|'['
string|"'rev-parse'"
op|','
string|"'--verify'"
op|','
name|'oldrev'
op|']'
op|')'
op|','
nl|'\n'
name|'read_git_output'
op|'('
op|'['
string|"'rev-parse'"
op|','
string|"'--verify'"
op|','
name|'newrev'
op|']'
op|')'
op|','
nl|'\n'
name|'refname'
op|','
nl|'\n'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'push'
op|'='
name|'Push'
op|'('
name|'changes'
op|')'
newline|'\n'
name|'push'
op|'.'
name|'send_emails'
op|'('
name|'mailer'
op|','
name|'body_filter'
op|'='
name|'environment'
op|'.'
name|'filter_body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|choose_mailer
dedent|''
name|'def'
name|'choose_mailer'
op|'('
name|'config'
op|','
name|'environment'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mailer'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'mailer'"
op|','
name|'default'
op|'='
string|"'sendmail'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'mailer'
op|'=='
string|"'smtp'"
op|':'
newline|'\n'
indent|'        '
name|'smtpserver'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'smtpserver'"
op|','
name|'default'
op|'='
string|"'localhost'"
op|')'
newline|'\n'
name|'mailer'
op|'='
name|'SMTPMailer'
op|'('
nl|'\n'
name|'envelopesender'
op|'='
op|'('
name|'environment'
op|'.'
name|'get_sender'
op|'('
op|')'
name|'or'
name|'environment'
op|'.'
name|'get_fromaddr'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'smtpserver'
op|'='
name|'smtpserver'
op|','
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'mailer'
op|'=='
string|"'sendmail'"
op|':'
newline|'\n'
indent|'        '
name|'command'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'sendmailcommand'"
op|')'
newline|'\n'
name|'if'
name|'command'
op|':'
newline|'\n'
indent|'            '
name|'command'
op|'='
name|'shlex'
op|'.'
name|'split'
op|'('
name|'command'
op|')'
newline|'\n'
dedent|''
name|'mailer'
op|'='
name|'SendMailer'
op|'('
name|'command'
op|'='
name|'command'
op|','
name|'envelopesender'
op|'='
name|'environment'
op|'.'
name|'get_sender'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'\'fatal: multimailhook.mailer is set to an incorrect value: "%s"\\n\''
op|'%'
name|'mailer'
nl|'\n'
op|'+'
string|'\'please use one of "smtp" or "sendmail".\\n\''
nl|'\n'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mailer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|KNOWN_ENVIRONMENTS
dedent|''
name|'KNOWN_ENVIRONMENTS'
op|'='
op|'{'
nl|'\n'
string|"'generic'"
op|':'
name|'GenericEnvironmentMixin'
op|','
nl|'\n'
string|"'gitolite'"
op|':'
name|'GitoliteEnvironmentMixin'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|choose_environment
name|'def'
name|'choose_environment'
op|'('
name|'config'
op|','
name|'osenv'
op|'='
name|'None'
op|','
name|'env'
op|'='
name|'None'
op|','
name|'recipients'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'osenv'
op|':'
newline|'\n'
indent|'        '
name|'osenv'
op|'='
name|'os'
op|'.'
name|'environ'
newline|'\n'
nl|'\n'
dedent|''
name|'environment_mixins'
op|'='
op|'['
nl|'\n'
name|'ProjectdescEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigMaxlinesEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigFilterLinesEnvironmentMixin'
op|','
nl|'\n'
name|'PusherDomainEnvironmentMixin'
op|','
nl|'\n'
name|'ConfigOptionsEnvironmentMixin'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'environment_kw'
op|'='
op|'{'
nl|'\n'
string|"'osenv'"
op|':'
name|'osenv'
op|','
nl|'\n'
string|"'config'"
op|':'
name|'config'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'env'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'='
name|'config'
op|'.'
name|'get'
op|'('
string|"'environment'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'env'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'GL_USER'"
name|'in'
name|'osenv'
name|'and'
string|"'GL_REPO'"
name|'in'
name|'osenv'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
string|"'gitolite'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
string|"'generic'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'environment_mixins'
op|'.'
name|'append'
op|'('
name|'KNOWN_ENVIRONMENTS'
op|'['
name|'env'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'recipients'
op|':'
newline|'\n'
indent|'        '
name|'environment_mixins'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'StaticRecipientsEnvironmentMixin'
op|')'
newline|'\n'
name|'environment_kw'
op|'['
string|"'refchange_recipients'"
op|']'
op|'='
name|'recipients'
newline|'\n'
name|'environment_kw'
op|'['
string|"'announce_recipients'"
op|']'
op|'='
name|'recipients'
newline|'\n'
name|'environment_kw'
op|'['
string|"'revision_recipients'"
op|']'
op|'='
name|'recipients'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'environment_mixins'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'ConfigRecipientsEnvironmentMixin'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'environment_klass'
op|'='
name|'type'
op|'('
nl|'\n'
string|"'EffectiveEnvironment'"
op|','
nl|'\n'
name|'tuple'
op|'('
name|'environment_mixins'
op|')'
op|'+'
op|'('
name|'Environment'
op|','
op|')'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'return'
name|'environment_klass'
op|'('
op|'**'
name|'environment_kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'='
name|'optparse'
op|'.'
name|'OptionParser'
op|'('
nl|'\n'
name|'description'
op|'='
name|'__doc__'
op|','
nl|'\n'
name|'usage'
op|'='
string|"'%prog [OPTIONS]\\n   or: %prog [OPTIONS] REFNAME OLDREV NEWREV'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--environment'"
op|','
string|"'--env'"
op|','
name|'action'
op|'='
string|"'store'"
op|','
name|'type'
op|'='
string|"'choice'"
op|','
nl|'\n'
name|'choices'
op|'='
op|'['
string|"'generic'"
op|','
string|"'gitolite'"
op|']'
op|','
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
name|'help'
op|'='
op|'('
nl|'\n'
string|"'Choose type of environment is in use.  Default is taken from '"
nl|'\n'
string|'\'multimailhook.environment if set; otherwise "generic".\''
nl|'\n'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--stdout'"
op|','
name|'action'
op|'='
string|"'store_true'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
name|'help'
op|'='
string|"'Output emails to stdout rather than sending them.'"
op|','
nl|'\n'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--recipients'"
op|','
name|'action'
op|'='
string|"'store'"
op|','
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
name|'help'
op|'='
string|"'Set list of email recipients for all types of emails.'"
op|','
nl|'\n'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--show-env'"
op|','
name|'action'
op|'='
string|"'store_true'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
name|'help'
op|'='
op|'('
nl|'\n'
string|"'Write to stderr the values determined for the environment '"
nl|'\n'
string|"'(intended for debugging purposes).'"
nl|'\n'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'options'
op|','
name|'args'
op|')'
op|'='
name|'parser'
op|'.'
name|'parse_args'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'Config'
op|'('
string|"'multimailhook'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'environment'
op|'='
name|'choose_environment'
op|'('
nl|'\n'
name|'config'
op|','
name|'osenv'
op|'='
name|'os'
op|'.'
name|'environ'
op|','
nl|'\n'
name|'env'
op|'='
name|'options'
op|'.'
name|'environment'
op|','
nl|'\n'
name|'recipients'
op|'='
name|'options'
op|'.'
name|'recipients'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'options'
op|'.'
name|'show_env'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'Environment values:\\n'"
op|')'
newline|'\n'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'sorted'
op|'('
name|'environment'
op|'.'
name|'get_values'
op|'('
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'    %s : %r\\n'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'options'
op|'.'
name|'stdout'
op|':'
newline|'\n'
indent|'            '
name|'mailer'
op|'='
name|'OutputMailer'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mailer'
op|'='
name|'choose_mailer'
op|'('
name|'config'
op|','
name|'environment'
op|')'
newline|'\n'
nl|'\n'
comment|'# Dual mode: if arguments were specified on the command line, run'
nl|'\n'
comment|'# like an update hook; otherwise, run as a post-receive hook.'
nl|'\n'
dedent|''
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'!='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'parser'
op|'.'
name|'error'
op|'('
string|"'Need zero or three non-option arguments'"
op|')'
newline|'\n'
dedent|''
op|'('
name|'refname'
op|','
name|'oldrev'
op|','
name|'newrev'
op|')'
op|'='
name|'args'
newline|'\n'
name|'run_as_update_hook'
op|'('
name|'environment'
op|','
name|'mailer'
op|','
name|'refname'
op|','
name|'oldrev'
op|','
name|'newrev'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'run_as_post_receive_hook'
op|'('
name|'environment'
op|','
name|'mailer'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ConfigurationException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'exit'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
