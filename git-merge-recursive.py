begin_unit
comment|'#!/usr/bin/python'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
op|','
name|'math'
op|','
name|'random'
op|','
name|'os'
op|','
name|'re'
op|','
name|'signal'
op|','
name|'tempfile'
op|','
name|'stat'
op|','
name|'errno'
op|','
name|'traceback'
newline|'\n'
name|'from'
name|'heapq'
name|'import'
name|'heappush'
op|','
name|'heappop'
newline|'\n'
name|'from'
name|'sets'
name|'import'
name|'Set'
newline|'\n'
nl|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'append'
op|'('
string|"'@@GIT_PYTHON_PATH@@'"
op|')'
newline|'\n'
name|'from'
name|'gitMergeCommon'
name|'import'
op|'*'
newline|'\n'
nl|'\n'
comment|'# The actual merge code'
nl|'\n'
comment|'# ---------------------'
nl|'\n'
nl|'\n'
DECL|function|merge
name|'def'
name|'merge'
op|'('
name|'h1'
op|','
name|'h2'
op|','
name|'branch1Name'
op|','
name|'branch2Name'
op|','
name|'graph'
op|','
name|'callDepth'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Merge the commits h1 and h2, return the resulting virtual\n    commit object and a flag indicating the cleaness of the merge.'''"
newline|'\n'
name|'assert'
op|'('
name|'isinstance'
op|'('
name|'h1'
op|','
name|'Commit'
op|')'
name|'and'
name|'isinstance'
op|'('
name|'h2'
op|','
name|'Commit'
op|')'
op|')'
newline|'\n'
name|'assert'
op|'('
name|'isinstance'
op|'('
name|'graph'
op|','
name|'Graph'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|infoMsg
name|'def'
name|'infoMsg'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"'  '"
op|'*'
name|'callDepth'
op|')'
newline|'\n'
name|'printList'
op|'('
name|'args'
op|')'
newline|'\n'
dedent|''
name|'infoMsg'
op|'('
string|"'Merging:'"
op|')'
newline|'\n'
name|'infoMsg'
op|'('
name|'h1'
op|')'
newline|'\n'
name|'infoMsg'
op|'('
name|'h2'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ca'
op|'='
name|'getCommonAncestors'
op|'('
name|'graph'
op|','
name|'h1'
op|','
name|'h2'
op|')'
newline|'\n'
name|'infoMsg'
op|'('
string|"'found'"
op|','
name|'len'
op|'('
name|'ca'
op|')'
op|','
string|"'common ancestor(s):'"
op|')'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'ca'
op|':'
newline|'\n'
indent|'        '
name|'infoMsg'
op|'('
name|'x'
op|')'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'Ms'
op|'='
name|'ca'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'h'
name|'in'
name|'ca'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
op|'['
name|'Ms'
op|','
name|'ignore'
op|']'
op|'='
name|'merge'
op|'('
name|'Ms'
op|','
name|'h'
op|','
nl|'\n'
string|"'Temporary shared merge branch 1'"
op|','
nl|'\n'
string|"'Temporary shared merge branch 2'"
op|','
nl|'\n'
name|'graph'
op|','
name|'callDepth'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'assert'
op|'('
name|'isinstance'
op|'('
name|'Ms'
op|','
name|'Commit'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'callDepth'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'ca'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'runProgram'
op|'('
op|'['
string|"'git-read-tree'"
op|','
name|'h1'
op|'.'
name|'tree'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'runProgram'
op|'('
op|'['
string|"'git-update-index'"
op|','
string|"'-q'"
op|','
string|"'--refresh'"
op|']'
op|')'
newline|'\n'
comment|'# Use the original index if we only have one common ancestor'
nl|'\n'
nl|'\n'
dedent|''
name|'cleanCache'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'runProgram'
op|'('
op|'['
string|"'git-read-tree'"
op|','
name|'h1'
op|'.'
name|'tree'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'cleanCache'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'['
name|'shaRes'
op|','
name|'clean'
op|']'
op|'='
name|'mergeTrees'
op|'('
name|'h1'
op|'.'
name|'tree'
op|'('
op|')'
op|','
name|'h2'
op|'.'
name|'tree'
op|'('
op|')'
op|','
name|'Ms'
op|'.'
name|'tree'
op|'('
op|')'
op|','
nl|'\n'
name|'branch1Name'
op|','
name|'branch2Name'
op|','
nl|'\n'
name|'cleanCache'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'clean'
name|'or'
name|'cleanCache'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'Commit'
op|'('
name|'None'
op|','
op|'['
name|'h1'
op|','
name|'h2'
op|']'
op|','
name|'tree'
op|'='
name|'shaRes'
op|')'
newline|'\n'
name|'graph'
op|'.'
name|'addNode'
op|'('
name|'res'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'res'
op|','
name|'clean'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|getFilesRE
dedent|''
name|'getFilesRE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'([0-9]+) ([a-z0-9]+) ([0-9a-f]{40})\\t(.*)'"
op|')'
newline|'\n'
DECL|function|getFilesAndDirs
name|'def'
name|'getFilesAndDirs'
op|'('
name|'tree'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'files'
op|'='
name|'Set'
op|'('
op|')'
newline|'\n'
name|'dirs'
op|'='
name|'Set'
op|'('
op|')'
newline|'\n'
name|'out'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-ls-tree'"
op|','
string|"'-r'"
op|','
string|"'-z'"
op|','
name|'tree'
op|']'
op|')'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\0'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'getFilesRE'
op|'.'
name|'match'
op|'('
name|'l'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'=='
string|"'tree'"
op|':'
newline|'\n'
indent|'                '
name|'dirs'
op|'.'
name|'add'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'4'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'=='
string|"'blob'"
op|':'
newline|'\n'
indent|'                '
name|'files'
op|'.'
name|'add'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
op|'['
name|'files'
op|','
name|'dirs'
op|']'
newline|'\n'
nl|'\n'
DECL|class|CacheEntry
dedent|''
name|'class'
name|'CacheEntry'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
DECL|class|Stage
indent|'        '
name|'class'
name|'Stage'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sha1'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stages'
op|'='
op|'['
name|'Stage'
op|'('
op|')'
op|','
name|'Stage'
op|'('
op|')'
op|','
name|'Stage'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
nl|'\n'
DECL|variable|unmergedRE
dedent|''
dedent|''
name|'unmergedRE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^([0-9]+) ([0-9a-f]{40}) ([1-3])\\t(.*)$'"
op|')'
newline|'\n'
DECL|function|unmergedCacheEntries
name|'def'
name|'unmergedCacheEntries'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Create a dictionary mapping file names to CacheEntry\n    objects. The dictionary contains one entry for every path with a\n    non-zero stage entry.'''"
newline|'\n'
nl|'\n'
name|'lines'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-ls-files'"
op|','
string|"'-z'"
op|','
string|"'--unmerged'"
op|']'
op|')'
op|'.'
name|'split'
op|'('
string|"'\\0'"
op|')'
newline|'\n'
name|'lines'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'res'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'unmergedRE'
op|'.'
name|'match'
op|'('
name|'l'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
name|'int'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|','
number|'8'
op|')'
newline|'\n'
name|'sha1'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'stage'
op|'='
name|'int'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
op|')'
op|'-'
number|'1'
newline|'\n'
name|'path'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'res'
op|'.'
name|'has_key'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'e'
op|'='
name|'res'
op|'['
name|'path'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'e'
op|'='
name|'CacheEntry'
op|'('
name|'path'
op|')'
newline|'\n'
name|'res'
op|'['
name|'path'
op|']'
op|'='
name|'e'
newline|'\n'
nl|'\n'
dedent|''
name|'e'
op|'.'
name|'stages'
op|'['
name|'stage'
op|']'
op|'.'
name|'mode'
op|'='
name|'mode'
newline|'\n'
name|'e'
op|'.'
name|'stages'
op|'['
name|'stage'
op|']'
op|'.'
name|'sha1'
op|'='
name|'sha1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'die'
op|'('
string|"'Error: Merge program failed: Unexpected output from'"
op|','
string|"'git-ls-files:'"
op|','
name|'l'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
DECL|function|mergeTrees
dedent|''
name|'def'
name|'mergeTrees'
op|'('
name|'head'
op|','
name|'merge'
op|','
name|'common'
op|','
name|'branch1Name'
op|','
name|'branch2Name'
op|','
nl|'\n'
name|'cleanCache'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Merge the trees 'head' and 'merge' with the common ancestor\n    'common'. The name of the head branch is 'branch1Name' and the name of\n    the merge branch is 'branch2Name'. Return a tuple (tree, cleanMerge)\n    where tree is the resulting tree and cleanMerge is True iff the\n    merge was clean.'''"
newline|'\n'
nl|'\n'
name|'assert'
op|'('
name|'isSha'
op|'('
name|'head'
op|')'
name|'and'
name|'isSha'
op|'('
name|'merge'
op|')'
name|'and'
name|'isSha'
op|'('
name|'common'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'common'
op|'=='
name|'merge'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'Already uptodate!'"
newline|'\n'
name|'return'
op|'['
name|'head'
op|','
name|'True'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cleanCache'
op|':'
newline|'\n'
indent|'        '
name|'updateArg'
op|'='
string|"'-i'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'updateArg'
op|'='
string|"'-u'"
newline|'\n'
nl|'\n'
dedent|''
name|'runProgram'
op|'('
op|'['
string|"'git-read-tree'"
op|','
name|'updateArg'
op|','
string|"'-m'"
op|','
name|'common'
op|','
name|'head'
op|','
name|'merge'
op|']'
op|')'
newline|'\n'
name|'cleanMerge'
op|'='
name|'True'
newline|'\n'
nl|'\n'
op|'['
name|'tree'
op|','
name|'code'
op|']'
op|'='
name|'runProgram'
op|'('
string|"'git-write-tree'"
op|','
name|'returnCode'
op|'='
name|'True'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'tree'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'code'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
op|'['
name|'files'
op|','
name|'dirs'
op|']'
op|'='
name|'getFilesAndDirs'
op|'('
name|'head'
op|')'
newline|'\n'
op|'['
name|'filesM'
op|','
name|'dirsM'
op|']'
op|'='
name|'getFilesAndDirs'
op|'('
name|'merge'
op|')'
newline|'\n'
name|'files'
op|'.'
name|'union_update'
op|'('
name|'filesM'
op|')'
newline|'\n'
name|'dirs'
op|'.'
name|'union_update'
op|'('
name|'dirsM'
op|')'
newline|'\n'
nl|'\n'
name|'cleanMerge'
op|'='
name|'True'
newline|'\n'
name|'entries'
op|'='
name|'unmergedCacheEntries'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'entries'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'processEntry'
op|'('
name|'entries'
op|'['
name|'name'
op|']'
op|','
name|'branch1Name'
op|','
name|'branch2Name'
op|','
nl|'\n'
name|'files'
op|','
name|'dirs'
op|','
name|'cleanCache'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cleanMerge'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'cleanMerge'
name|'or'
name|'cleanCache'
op|':'
newline|'\n'
indent|'            '
name|'tree'
op|'='
name|'runProgram'
op|'('
string|"'git-write-tree'"
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tree'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cleanMerge'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'tree'
op|','
name|'cleanMerge'
op|']'
newline|'\n'
nl|'\n'
DECL|function|processEntry
dedent|''
name|'def'
name|'processEntry'
op|'('
name|'entry'
op|','
name|'branch1Name'
op|','
name|'branch2Name'
op|','
name|'files'
op|','
name|'dirs'
op|','
name|'cleanCache'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Merge one cache entry. 'files' is a Set with the files in both of\n    the heads that we are going to merge. 'dirs' contains the\n    corresponding data for directories. If 'cleanCache' is True no\n    non-zero stages will be left in the cache for the path\n    corresponding to the entry 'entry'.'''"
newline|'\n'
nl|'\n'
comment|"# cleanCache == True  => Don't leave any non-stage 0 entries in the cache and"
nl|'\n'
comment|"#                        don't update the working directory"
nl|'\n'
comment|'#               False => Leave unmerged entries and update the working directory'
nl|'\n'
nl|'\n'
comment|'# clean     == True  => non-conflict case'
nl|'\n'
comment|'#              False => conflict case'
nl|'\n'
nl|'\n'
comment|"# If cleanCache == False then the cache shouldn't be updated if clean == False"
nl|'\n'
nl|'\n'
DECL|function|updateFile
name|'def'
name|'updateFile'
op|'('
name|'clean'
op|','
name|'sha'
op|','
name|'mode'
op|','
name|'path'
op|','
name|'onlyWd'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'updateCache'
op|'='
name|'not'
name|'onlyWd'
name|'and'
op|'('
name|'cleanCache'
name|'or'
op|'('
name|'not'
name|'cleanCache'
name|'and'
name|'clean'
op|')'
op|')'
newline|'\n'
name|'updateWd'
op|'='
name|'onlyWd'
name|'or'
op|'('
name|'not'
name|'cleanCache'
name|'and'
name|'clean'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'updateWd'
op|':'
newline|'\n'
indent|'            '
name|'prog'
op|'='
op|'['
string|"'git-cat-file'"
op|','
string|"'blob'"
op|','
name|'sha'
op|']'
newline|'\n'
name|'if'
name|'stat'
op|'.'
name|'S_ISREG'
op|'('
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'if'
name|'mode'
op|'&'
number|'0100'
op|':'
newline|'\n'
indent|'                    '
name|'mode'
op|'='
number|'0777'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'mode'
op|'='
number|'0666'
newline|'\n'
dedent|''
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'path'
op|','
name|'os'
op|'.'
name|'O_WRONLY'
op|'|'
name|'os'
op|'.'
name|'O_TRUNC'
op|'|'
name|'os'
op|'.'
name|'O_CREAT'
op|','
name|'mode'
op|')'
newline|'\n'
name|'proc'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'prog'
op|','
name|'stdout'
op|'='
name|'fd'
op|')'
newline|'\n'
name|'proc'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'stat'
op|'.'
name|'S_ISLNK'
op|'('
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'linkTarget'
op|'='
name|'runProgram'
op|'('
name|'prog'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'symlink'
op|'('
name|'linkTarget'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'assert'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'updateWd'
name|'and'
name|'updateCache'
op|':'
newline|'\n'
indent|'            '
name|'runProgram'
op|'('
op|'['
string|"'git-update-index'"
op|','
string|"'--add'"
op|','
string|"'--'"
op|','
name|'path'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'updateCache'
op|':'
newline|'\n'
indent|'            '
name|'runProgram'
op|'('
op|'['
string|"'git-update-index'"
op|','
string|"'--add'"
op|','
string|"'--cacheinfo'"
op|','
nl|'\n'
string|"'0%o'"
op|'%'
name|'mode'
op|','
name|'sha'
op|','
name|'path'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|removeFile
dedent|''
dedent|''
name|'def'
name|'removeFile'
op|'('
name|'clean'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cleanCache'
name|'or'
op|'('
name|'not'
name|'cleanCache'
name|'and'
name|'clean'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'runProgram'
op|'('
op|'['
string|"'git-update-index'"
op|','
string|"'--force-remove'"
op|','
string|"'--'"
op|','
name|'path'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'cleanCache'
name|'and'
name|'clean'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
name|'and'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EISDIR'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
DECL|function|uniquePath
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'uniquePath'
op|'('
name|'path'
op|','
name|'branch'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newPath'
op|'='
name|'path'
op|'+'
string|"'_'"
op|'+'
name|'branch'
newline|'\n'
name|'suffix'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'newPath'
name|'in'
name|'files'
name|'or'
name|'newPath'
name|'in'
name|'dirs'
op|':'
newline|'\n'
indent|'            '
name|'suffix'
op|'+='
number|'1'
newline|'\n'
name|'newPath'
op|'='
name|'path'
op|'+'
string|"'_'"
op|'+'
name|'branch'
op|'+'
string|"'_'"
op|'+'
name|'str'
op|'('
name|'suffix'
op|')'
newline|'\n'
dedent|''
name|'files'
op|'.'
name|'add'
op|'('
name|'newPath'
op|')'
newline|'\n'
name|'return'
name|'newPath'
newline|'\n'
nl|'\n'
dedent|''
name|'debug'
op|'('
string|"'processing'"
op|','
name|'entry'
op|'.'
name|'path'
op|','
string|"'clean cache:'"
op|','
name|'cleanCache'
op|')'
newline|'\n'
nl|'\n'
name|'cleanMerge'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'path'
op|'='
name|'entry'
op|'.'
name|'path'
newline|'\n'
name|'oSha'
op|'='
name|'entry'
op|'.'
name|'stages'
op|'['
number|'0'
op|']'
op|'.'
name|'sha1'
newline|'\n'
name|'oMode'
op|'='
name|'entry'
op|'.'
name|'stages'
op|'['
number|'0'
op|']'
op|'.'
name|'mode'
newline|'\n'
name|'aSha'
op|'='
name|'entry'
op|'.'
name|'stages'
op|'['
number|'1'
op|']'
op|'.'
name|'sha1'
newline|'\n'
name|'aMode'
op|'='
name|'entry'
op|'.'
name|'stages'
op|'['
number|'1'
op|']'
op|'.'
name|'mode'
newline|'\n'
name|'bSha'
op|'='
name|'entry'
op|'.'
name|'stages'
op|'['
number|'2'
op|']'
op|'.'
name|'sha1'
newline|'\n'
name|'bMode'
op|'='
name|'entry'
op|'.'
name|'stages'
op|'['
number|'2'
op|']'
op|'.'
name|'mode'
newline|'\n'
nl|'\n'
name|'assert'
op|'('
name|'oSha'
op|'=='
name|'None'
name|'or'
name|'isSha'
op|'('
name|'oSha'
op|')'
op|')'
newline|'\n'
name|'assert'
op|'('
name|'aSha'
op|'=='
name|'None'
name|'or'
name|'isSha'
op|'('
name|'aSha'
op|')'
op|')'
newline|'\n'
name|'assert'
op|'('
name|'bSha'
op|'=='
name|'None'
name|'or'
name|'isSha'
op|'('
name|'bSha'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'assert'
op|'('
name|'oMode'
op|'=='
name|'None'
name|'or'
name|'type'
op|'('
name|'oMode'
op|')'
name|'is'
name|'int'
op|')'
newline|'\n'
name|'assert'
op|'('
name|'aMode'
op|'=='
name|'None'
name|'or'
name|'type'
op|'('
name|'aMode'
op|')'
name|'is'
name|'int'
op|')'
newline|'\n'
name|'assert'
op|'('
name|'bMode'
op|'=='
name|'None'
name|'or'
name|'type'
op|'('
name|'bMode'
op|')'
name|'is'
name|'int'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'oSha'
name|'and'
op|'('
name|'not'
name|'aSha'
name|'or'
name|'not'
name|'bSha'
op|')'
op|')'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# Case A: Deleted in one'
nl|'\n'
comment|'#'
nl|'\n'
indent|'        '
name|'if'
op|'('
name|'not'
name|'aSha'
name|'and'
name|'not'
name|'bSha'
op|')'
name|'or'
op|'('
name|'aSha'
op|'=='
name|'oSha'
name|'and'
name|'not'
name|'bSha'
op|')'
name|'or'
op|'('
name|'not'
name|'aSha'
name|'and'
name|'bSha'
op|'=='
name|'oSha'
op|')'
op|':'
newline|'\n'
comment|'# Deleted in both or deleted in one and unchanged in the other'
nl|'\n'
indent|'            '
name|'if'
name|'aSha'
op|':'
newline|'\n'
indent|'                '
name|'print'
string|"'Removing '"
op|'+'
name|'path'
newline|'\n'
dedent|''
name|'removeFile'
op|'('
name|'True'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Deleted in one and changed in the other'
nl|'\n'
indent|'            '
name|'cleanMerge'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'aSha'
op|':'
newline|'\n'
indent|'                '
name|'print'
string|'\'CONFLICT (del/mod): "\''
op|'+'
name|'path'
op|'+'
string|'\'" deleted in\''
op|','
name|'branch1Name'
op|','
string|"'and modified in'"
op|','
name|'branch2Name'
op|','
string|"'. Version'"
op|','
name|'branch2Name'
op|','
string|'\' of "\''
op|'+'
name|'path'
op|'+'
string|'\'" left in tree\''
newline|'\n'
name|'mode'
op|'='
name|'bMode'
newline|'\n'
name|'sha'
op|'='
name|'bSha'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'print'
string|'\'CONFLICT (mod/del): "\''
op|'+'
name|'path'
op|'+'
string|'\'" deleted in\''
op|','
name|'branch2Name'
op|','
string|"'and modified in'"
op|','
name|'branch1Name'
op|'+'
string|"'. Version'"
op|','
name|'branch1Name'
op|','
string|'\'of "\''
op|'+'
name|'path'
op|'+'
string|'\'" left in tree\''
newline|'\n'
name|'mode'
op|'='
name|'aMode'
newline|'\n'
name|'sha'
op|'='
name|'aSha'
newline|'\n'
nl|'\n'
dedent|''
name|'updateFile'
op|'('
name|'False'
op|','
name|'sha'
op|','
name|'mode'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
op|'('
name|'not'
name|'oSha'
name|'and'
name|'aSha'
name|'and'
name|'not'
name|'bSha'
op|')'
name|'or'
op|'('
name|'not'
name|'oSha'
name|'and'
name|'not'
name|'aSha'
name|'and'
name|'bSha'
op|')'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# Case B: Added in one.'
nl|'\n'
comment|'#'
nl|'\n'
indent|'        '
name|'if'
name|'aSha'
op|':'
newline|'\n'
indent|'            '
name|'addBranch'
op|'='
name|'branch1Name'
newline|'\n'
name|'otherBranch'
op|'='
name|'branch2Name'
newline|'\n'
name|'mode'
op|'='
name|'aMode'
newline|'\n'
name|'sha'
op|'='
name|'aSha'
newline|'\n'
name|'conf'
op|'='
string|"'file/dir'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'addBranch'
op|'='
name|'branch2Name'
newline|'\n'
name|'otherBranch'
op|'='
name|'branch1Name'
newline|'\n'
name|'mode'
op|'='
name|'bMode'
newline|'\n'
name|'sha'
op|'='
name|'bSha'
newline|'\n'
name|'conf'
op|'='
string|"'dir/file'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'path'
name|'in'
name|'dirs'
op|':'
newline|'\n'
indent|'            '
name|'cleanMerge'
op|'='
name|'False'
newline|'\n'
name|'newPath'
op|'='
name|'uniquePath'
op|'('
name|'path'
op|','
name|'addBranch'
op|')'
newline|'\n'
name|'print'
string|"'CONFLICT ('"
op|'+'
name|'conf'
op|'+'
string|'\'): There is a directory with name "\''
op|'+'
name|'path'
op|'+'
string|'\'" in\''
op|','
name|'otherBranch'
op|'+'
string|'\'. Adding "\''
op|'+'
name|'path'
op|'+'
string|'\'" as "\''
op|'+'
name|'newPath'
op|'+'
string|'\'"\''
newline|'\n'
nl|'\n'
name|'removeFile'
op|'('
name|'False'
op|','
name|'path'
op|')'
newline|'\n'
name|'path'
op|'='
name|'newPath'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'\'Adding "\''
op|'+'
name|'path'
op|'+'
string|'\'"\''
newline|'\n'
nl|'\n'
dedent|''
name|'updateFile'
op|'('
name|'True'
op|','
name|'sha'
op|','
name|'mode'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'not'
name|'oSha'
name|'and'
name|'aSha'
name|'and'
name|'bSha'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# Case C: Added in both (check for same permissions).'
nl|'\n'
comment|'#'
nl|'\n'
indent|'        '
name|'if'
name|'aSha'
op|'=='
name|'bSha'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'aMode'
op|'!='
name|'bMode'
op|':'
newline|'\n'
indent|'                '
name|'cleanMerge'
op|'='
name|'False'
newline|'\n'
name|'print'
string|'\'CONFLICT: File "\''
op|'+'
name|'path'
op|'+'
string|'\'" added identically in both branches,\''
op|','
string|"'but permissions conflict'"
op|','
string|"'0%o'"
op|'%'
name|'aMode'
op|','
string|"'->'"
op|','
string|"'0%o'"
op|'%'
name|'bMode'
newline|'\n'
name|'print'
string|"'CONFLICT: adding with permission:'"
op|','
string|"'0%o'"
op|'%'
name|'aMode'
newline|'\n'
nl|'\n'
name|'updateFile'
op|'('
name|'False'
op|','
name|'aSha'
op|','
name|'aMode'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# This case is handled by git-read-tree'
nl|'\n'
indent|'                '
name|'assert'
op|'('
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cleanMerge'
op|'='
name|'False'
newline|'\n'
name|'newPath1'
op|'='
name|'uniquePath'
op|'('
name|'path'
op|','
name|'branch1Name'
op|')'
newline|'\n'
name|'newPath2'
op|'='
name|'uniquePath'
op|'('
name|'path'
op|','
name|'branch2Name'
op|')'
newline|'\n'
name|'print'
string|'\'CONFLICT (add/add): File "\''
op|'+'
name|'path'
op|'+'
string|'\'" added non-identically in both branches.\''
newline|'\n'
name|'removeFile'
op|'('
name|'False'
op|','
name|'path'
op|')'
newline|'\n'
name|'updateFile'
op|'('
name|'False'
op|','
name|'aSha'
op|','
name|'aMode'
op|','
name|'newPath1'
op|')'
newline|'\n'
name|'updateFile'
op|'('
name|'False'
op|','
name|'bSha'
op|','
name|'bMode'
op|','
name|'newPath2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'oSha'
name|'and'
name|'aSha'
name|'and'
name|'bSha'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# case D: Modified in both, but differently.'
nl|'\n'
comment|'#'
nl|'\n'
indent|'        '
name|'print'
string|"'Auto-merging'"
op|','
name|'path'
newline|'\n'
name|'orig'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-unpack-file'"
op|','
name|'oSha'
op|']'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'src1'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-unpack-file'"
op|','
name|'aSha'
op|']'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'src2'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-unpack-file'"
op|','
name|'bSha'
op|']'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
op|'['
name|'out'
op|','
name|'ret'
op|']'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'merge'"
op|','
nl|'\n'
string|"'-L'"
op|','
name|'branch1Name'
op|'+'
string|"'/'"
op|'+'
name|'path'
op|','
nl|'\n'
string|"'-L'"
op|','
string|"'orig/'"
op|'+'
name|'path'
op|','
nl|'\n'
string|"'-L'"
op|','
name|'branch2Name'
op|'+'
string|"'/'"
op|'+'
name|'path'
op|','
nl|'\n'
name|'src1'
op|','
name|'orig'
op|','
name|'src2'
op|']'
op|','
name|'returnCode'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'aMode'
op|'=='
name|'oMode'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
name|'bMode'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mode'
op|'='
name|'aMode'
newline|'\n'
nl|'\n'
dedent|''
name|'sha'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-hash-object'"
op|','
string|"'-t'"
op|','
string|"'blob'"
op|','
string|"'-w'"
op|','
nl|'\n'
name|'src1'
op|']'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ret'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'cleanMerge'
op|'='
name|'False'
newline|'\n'
name|'print'
string|'\'CONFLICT (content): Merge conflict in "\''
op|'+'
name|'path'
op|'+'
string|'\'".\''
newline|'\n'
nl|'\n'
name|'if'
name|'cleanCache'
op|':'
newline|'\n'
indent|'                '
name|'updateFile'
op|'('
name|'False'
op|','
name|'sha'
op|','
name|'mode'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'updateFile'
op|'('
name|'True'
op|','
name|'aSha'
op|','
name|'aMode'
op|','
name|'path'
op|')'
newline|'\n'
name|'updateFile'
op|'('
name|'False'
op|','
name|'sha'
op|','
name|'mode'
op|','
name|'path'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'updateFile'
op|'('
name|'True'
op|','
name|'sha'
op|','
name|'mode'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'unlink'
op|'('
name|'orig'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'src1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'src2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'die'
op|'('
string|'"ERROR: Fatal merge failure, shouldn\'t happen."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'cleanMerge'
newline|'\n'
nl|'\n'
DECL|function|usage
dedent|''
name|'def'
name|'usage'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'die'
op|'('
string|"'Usage:'"
op|','
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
string|"' <base>... -- <head> <remote>..'"
op|')'
newline|'\n'
nl|'\n'
comment|'# main entry point as merge strategy module'
nl|'\n'
comment|'# The first parameters up to -- are merge bases, and the rest are heads.'
nl|'\n'
comment|'# This strategy module figures out merge bases itself, so we only'
nl|'\n'
comment|'# get heads.'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'    '
name|'usage'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'nextArg'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'sys'
op|'.'
name|'argv'
op|'['
name|'nextArg'
op|']'
op|'=='
string|"'--'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'!='
name|'nextArg'
op|'+'
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'die'
op|'('
string|"'Not handling anything other than two heads merge.'"
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'h1'
op|'='
name|'firstBranch'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
name|'nextArg'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'h2'
op|'='
name|'secondBranch'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
name|'nextArg'
op|'+'
number|'2'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'usage'
op|'('
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'print'
string|"'Merging'"
op|','
name|'h1'
op|','
string|"'with'"
op|','
name|'h2'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'h1'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-rev-parse'"
op|','
string|"'--verify'"
op|','
name|'h1'
op|'+'
string|"'^0'"
op|']'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'h2'
op|'='
name|'runProgram'
op|'('
op|'['
string|"'git-rev-parse'"
op|','
string|"'--verify'"
op|','
name|'h2'
op|'+'
string|"'^0'"
op|']'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'graph'
op|'='
name|'buildGraph'
op|'('
op|'['
name|'h1'
op|','
name|'h2'
op|']'
op|')'
newline|'\n'
nl|'\n'
op|'['
name|'res'
op|','
name|'clean'
op|']'
op|'='
name|'merge'
op|'('
name|'graph'
op|'.'
name|'shaMap'
op|'['
name|'h1'
op|']'
op|','
name|'graph'
op|'.'
name|'shaMap'
op|'['
name|'h2'
op|']'
op|','
nl|'\n'
name|'firstBranch'
op|','
name|'secondBranch'
op|','
name|'graph'
op|')'
newline|'\n'
nl|'\n'
name|'print'
string|"''"
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'traceback'
op|'.'
name|'print_exc'
op|'('
name|'None'
op|','
name|'sys'
op|'.'
name|'stderr'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'clean'
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
